{'CLASSES': {'keyedcache.CacheNotRespondingError': {'bases': ['Exception'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [],
                                                    'properties': []},
             'keyedcache.CacheWrapper': {'bases': ['object'],
                                         'constructor': ['val', 'inprocess=False'],
                                         'docstring': '',
                                         'methods': [('__str__', [], ''),
                                                     ('__repr__', [], ''),
                                                     ('wrap', ['obj'], '')],
                                         'properties': ['val', 'inprocess', 'wrap']},
             'keyedcache.MethodNotFinishedError': {'bases': ['Exception'],
                                                   'constructor': ['f'],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': ['func']},
             'keyedcache.NotCachedError': {'bases': ['Exception'],
                                           'constructor': ['k'],
                                           'docstring': '',
                                           'methods': [],
                                           'properties': ['key']},
             'keyedcache.models.CachedObjectMixin': {'bases': ['object'],
                                                     'constructor': [],
                                                     'docstring': 'Provides basic object keyedcache for any objects using this as a mixin.',
                                                     'methods': [('cache_delete',
                                                                  ['*args', '**kwargs'],
                                                                  ''),
                                                                 ('cache_get',
                                                                  ['*args', '**kwargs'],
                                                                  ''),
                                                                 ('cache_key',
                                                                  ['*args', '**kwargs'],
                                                                  ''),
                                                                 ('cache_reset', [], ''),
                                                                 ('cache_set',
                                                                  ['*args', '**kwargs'],
                                                                  ''),
                                                                 ('is_cached',
                                                                  ['*args', '**kwargs'],
                                                                  '')],
                                                     'properties': []},
             'keyedcache.tests.CachingTest': {'bases': ['django.test.TestCase'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('testCacheGetFail', [], ''),
                                                          ('testCacheGetOK', [], ''),
                                                          ('testCacheGetDefault', [], ''),
                                                          ('testDelete', [], '')],
                                              'properties': []},
             'keyedcache.tests.DecoratorTest': {'bases': ['django.test.TestCase'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [('testCachePut', [], ''),
                                                            ('testDeleteCachedFunction',
                                                             [],
                                                             '')],
                                                'properties': []},
             'keyedcache.tests.TestCacheDisable': {'bases': ['django.test.TestCase'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [('testDisable', [], '')],
                                                   'properties': []},
             'keyedcache.tests.TestKeyMaker': {'bases': ['django.test.TestCase'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('testSimpleKey', [], ''),
                                                           ('testDualKey', [], ''),
                                                           ('testPairedKey', [], ''),
                                                           ('testPairedDualKey', [], '')],
                                               'properties': []},
             'keyedcache.views.CacheDeleteForm': {'bases': ['django.forms.Form'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [('delete_cache', [], '')],
                                                  'properties': ['tag', 'children', 'kill_all']},
             'l10n.admin.AdminArea_Inline': {'bases': ['django.contrib.admin.TabularInline'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [],
                                             'properties': ['model', 'extra']},
             'l10n.admin.CountryOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [],
                                           'properties': ['list_display',
                                                          'list_filter',
                                                          'search_fields',
                                                          'inlines']},
             'l10n.mixins.TranslatedObjectMixin': {'bases': ['object'],
                                                   'constructor': [],
                                                   'docstring': 'Allows any object with a "translations" object to find the proper translation.\n    ',
                                                   'methods': [('_find_translation',
                                                                ['language_code=None',
                                                                 "attr='translations'"],
                                                                "Look up a translation for an attr.\n        \n        Ex: self._find_translation(language_code='en-us', attr='translations')\n        ")],
                                                   'properties': []},
             'l10n.models.AdminArea': {'bases': ['django.db.models.Model'],
                                       'constructor': [],
                                       'docstring': '\n    Administrative Area level 1 for a country.  For the US, this would be the states\n    ',
                                       'methods': [('__unicode__', [], '')],
                                       'properties': ['country', 'name', 'abbrev', 'active']},
             'l10n.models.Country': {'bases': ['django.db.models.Model'],
                                     'constructor': [],
                                     'docstring': '\n    International Organization for Standardization (ISO) 3166-1 Country list\n    ',
                                     'methods': [('__unicode__', [], '')],
                                     'properties': ['iso2_code',
                                                    'name',
                                                    'printable_name',
                                                    'iso3_code',
                                                    'numcode',
                                                    'active',
                                                    'continent',
                                                    'admin_area']},
             'l10n.tests.AUPostCodeTest': {'bases': ['django.test.TestCase'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('test_valid', [], ''),
                                                       ('test_invalid', [], '')],
                                           'properties': []},
             'l10n.tests.CAPostCodeTest': {'bases': ['django.test.TestCase'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('test_valid', [], ''),
                                                       ('test_invalid', [], '')],
                                           'properties': []},
             'l10n.tests.USPostCodeTest': {'bases': ['django.test.TestCase'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('test_five_digit', [], ''),
                                                       ('test_nine_digit', [], ''),
                                                       ('test_invalid', [], '')],
                                           'properties': []},
             'livesettings.forms.SettingsEditor': {'bases': ['django.forms.Form'],
                                                   'constructor': ['*args', '**kwargs'],
                                                   'docstring': 'Base editor, from which customized forms are created',
                                                   'methods': [],
                                                   'properties': ['groups']},
             'livesettings.functions.ConfigurationSettings': {'bases': ['object'],
                                                              'constructor': [],
                                                              'docstring': 'A singleton manager for ConfigurationSettings',
                                                              'methods': [('__getattr__',
                                                                           ['attr'],
                                                                           ' Delegate access to implementation '),
                                                                          ('__getitem__',
                                                                           ['key'],
                                                                           ''),
                                                                          ('__len__', [], ''),
                                                                          ('__setattr__',
                                                                           ['attr', 'value'],
                                                                           ' Delegate access to implementation '),
                                                                          ('__unicode__',
                                                                           [],
                                                                           '')],
                                                              'properties': ['__instance']},
             'livesettings.models.ImmutableSetting': {'bases': ['object'],
                                                      'constructor': ["group=''",
                                                                      "key=''",
                                                                      "value=''",
                                                                      'site=1'],
                                                      'docstring': '',
                                                      'methods': [('cache_key',
                                                                   ['*args', '**kwargs'],
                                                                   ''),
                                                                  ('delete', [], ''),
                                                                  ('save',
                                                                   ['*args', '**kwargs'],
                                                                   ''),
                                                                  ('__repr__', [], '')],
                                                      'properties': ['site',
                                                                     'group',
                                                                     'key',
                                                                     'value']},
             'livesettings.models.LongSetting': {'bases': ['django.db.models.Model',
                                                           'keyedcache.models.CachedObjectMixin'],
                                                 'constructor': [],
                                                 'docstring': 'A Setting which can handle more than 255 characters',
                                                 'methods': [('__nonzero__', [], ''),
                                                             ('cache_key',
                                                              ['*args', '**kwargs'],
                                                              ''),
                                                             ('delete', [], ''),
                                                             ('save',
                                                              ['force_insert=False',
                                                               'force_update=False'],
                                                              '')],
                                                 'properties': ['site',
                                                                'group',
                                                                'key',
                                                                'value',
                                                                'objects']},
             'livesettings.models.LongSettingManager': {'bases': ['django.db.models.Manager'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('get_query_set', [], '')],
                                                        'properties': []},
             'livesettings.models.Setting': {'bases': ['django.db.models.Model',
                                                       'keyedcache.models.CachedObjectMixin'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('__nonzero__', [], ''),
                                                         ('cache_key',
                                                          ['*args', '**kwargs'],
                                                          ''),
                                                         ('delete', [], ''),
                                                         ('save',
                                                          ['force_insert=False',
                                                           'force_update=False'],
                                                          '')],
                                             'properties': ['site',
                                                            'group',
                                                            'key',
                                                            'value',
                                                            'objects']},
             'livesettings.models.SettingManager': {'bases': ['django.db.models.Manager'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('get_query_set', [], '')],
                                                    'properties': []},
             'livesettings.models.SettingNotSet': {'bases': ['Exception'],
                                                   'constructor': ['k', 'cachekey=None'],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': ['key', 'cachekey']},
             'livesettings.tests.ConfigCollectGroup': {'bases': ['django.test.TestCase'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('setUp', [], ''),
                                                                   ('testCollectSimple',
                                                                    [],
                                                                    ''),
                                                                   ('testCollectUnique',
                                                                    [],
                                                                    '')],
                                                       'properties': ['choices']},
             'livesettings.tests.ConfigTestChoices': {'bases': ['django.test.TestCase'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [('testAddPreregisteredChoice',
                                                                   [],
                                                                   'Test that we can register choices before the config is actually set up.')],
                                                      'properties': []},
             'livesettings.tests.ConfigTestDotAccess': {'bases': ['django.test.TestCase'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('setUp', [], ''),
                                                                    ('testDotAccess', [], ''),
                                                                    ('testSettingProperty',
                                                                     [],
                                                                     '')],
                                                        'properties': ['g']},
             'livesettings.tests.ConfigTestGroupRequires': {'bases': ['django.test.TestCase'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [('setUp', [], ''),
                                                                        ('testRequiresValue',
                                                                         [],
                                                                         '')],
                                                            'properties': ['g1',
                                                                           'g1c1',
                                                                           'g1c2',
                                                                           'g1c3']},
             'livesettings.tests.ConfigTestModuleValue': {'bases': ['django.test.TestCase'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [('setUp', [], ''),
                                                                      ('testModule', [], '')],
                                                          'properties': ['g', 'c']},
             'livesettings.tests.ConfigTestRequires': {'bases': ['django.test.TestCase'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('setUp', [], ''),
                                                                   ('testSimpleRequires',
                                                                    [],
                                                                    '')],
                                                       'properties': ['g1',
                                                                      'g1c1',
                                                                      'g1c2',
                                                                      'g1c3']},
             'livesettings.tests.ConfigTestRequiresChoices': {'bases': ['django.test.TestCase'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [('setUp', [], ''),
                                                                          ('testSimpleRequiresChoices',
                                                                           [],
                                                                           ''),
                                                                          ('testRequiresSingleValue',
                                                                           [],
                                                                           '')],
                                                              'properties': ['g1',
                                                                             'g1c1',
                                                                             'g1c2',
                                                                             'g1c3',
                                                                             'g2',
                                                                             'g2c1',
                                                                             'g2c2',
                                                                             'g2c3']},
             'livesettings.tests.ConfigTestRequiresValue': {'bases': ['django.test.TestCase'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [('setUp', [], ''),
                                                                        ('testRequiresValue',
                                                                         [],
                                                                         ''),
                                                                        ('testRequiresSingleValue',
                                                                         [],
                                                                         '')],
                                                            'properties': ['g1',
                                                                           'g1c1',
                                                                           'g1c2',
                                                                           'g1c3',
                                                                           'g2',
                                                                           'g2c1',
                                                                           'g2c2',
                                                                           'g2c3']},
             'livesettings.tests.ConfigTestSortOrder': {'bases': ['django.test.TestCase'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('setUp', [], ''),
                                                                    ('testGroupOrdering',
                                                                     [],
                                                                     '')],
                                                        'properties': ['g1',
                                                                       'g2',
                                                                       'g3',
                                                                       'g1c1',
                                                                       'g1c2',
                                                                       'g1c3',
                                                                       'g2c1',
                                                                       'g2c2',
                                                                       'g2c3',
                                                                       'g3c1',
                                                                       'g3c2',
                                                                       'g3c3']},
             'livesettings.tests.ConfigurationFunctionTest': {'bases': ['django.test.TestCase'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [('testSetSingleConfigItem',
                                                                           [],
                                                                           ''),
                                                                          ('testSetTwoConfigItems',
                                                                           [],
                                                                           ''),
                                                                          ('testSetGroup',
                                                                           [],
                                                                           '')],
                                                              'properties': []},
             'livesettings.tests.ConfigurationTestSettings': {'bases': ['django.test.TestCase'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [('setUp', [], ''),
                                                                          ('testSetSetting',
                                                                           [],
                                                                           ''),
                                                                          ('testSettingDefault',
                                                                           [],
                                                                           ''),
                                                                          ('testSetAndReset',
                                                                           [],
                                                                           'Test setting one value and then updating'),
                                                                          ('testTwice',
                                                                           [],
                                                                           'Config items should respond False to duplicate requests to update.'),
                                                                          ('testDeletesDefault',
                                                                           [],
                                                                           '')],
                                                              'properties': ['g']},
             'livesettings.tests.LongSettingTest': {'bases': ['django.test.TestCase'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('setUp', [], ''),
                                                                ('testLongStorage', [], ''),
                                                                ('testShortInLong', [], ''),
                                                                ('testDelete', [], '')],
                                                    'properties': ['wide']},
             'livesettings.tests.OverrideTest': {'bases': ['django.test.TestCase'],
                                                 'constructor': [],
                                                 'docstring': 'Test settings overrides',
                                                 'methods': [('setUp', [], ''),
                                                             ('tearDown', [], ''),
                                                             ('testOverriddenSetting',
                                                              [],
                                                              'Accessing an overridden setting should give the override value.'),
                                                             ('testCantChangeSetting',
                                                              [],
                                                              'When overridden, setting a value should not work, should get the overridden value'),
                                                             ('testNotOverriddenSetting',
                                                              [],
                                                              'Settings which are not overridden should return their defaults'),
                                                             ('testOverriddenListSetting',
                                                              [],
                                                              'Make sure lists work when overridden')],
                                                 'properties': ['g']},
             'livesettings.tests.TestMultipleValues': {'bases': ['django.test.TestCase'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('setUp', [], ''),
                                                                   ('testSave', [], ''),
                                                                   ('testAddChoice', [], ''),
                                                                   ('testChoiceValues', [], '')],
                                                       'properties': ['g1', 'g1c1']},
             'livesettings.tests.TestMultipleValuesWithDefault': {'bases': ['django.test.TestCase'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [('setUp', [], ''),
                                                                              ('testDefault',
                                                                               [],
                                                                               '')],
                                                                  'properties': ['g1', 'g1c1']},
             'livesettings.values.BooleanValue': {'bases': ['livesettings.values.Value'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [('add_choice', ['choice'], ''),
                                                              ('to_python', ['value'], '')],
                                                  'properties': ['to_editor']},
             'livesettings.values.ConfigurationGroup': {'bases': ['livesettings.values.SortedDotDict'],
                                                        'constructor': ['key',
                                                                        'name',
                                                                        '*args',
                                                                        '**kwargs'],
                                                        'docstring': 'A simple wrapper for a group of configuration values',
                                                        'methods': [('__cmp__', ['other'], ''),
                                                                    ('__eq__', ['other'], ''),
                                                                    ('__ne__', ['other'], ''),
                                                                    ('values', [], '')],
                                                        'properties': ['key',
                                                                       'name',
                                                                       'ordering',
                                                                       'requires',
                                                                       'requires_value']},
             'livesettings.values.DecimalValue': {'bases': ['livesettings.values.Value'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [('to_python', ['value'], ''),
                                                              ('to_editor', ['value'], '')],
                                                  'properties': []},
             'livesettings.values.DurationValue': {'bases': ['livesettings.values.Value'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [('to_python', ['value'], ''),
                                                               ('get_db_prep_save',
                                                                ['value'],
                                                                '')],
                                                   'properties': []},
             'livesettings.values.FloatValue': {'bases': ['livesettings.values.Value'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [('to_python', ['value'], ''),
                                                            ('to_editor', ['value'], '')],
                                                'properties': []},
             'livesettings.values.IntegerValue': {'bases': ['livesettings.values.Value'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [('to_python', ['value'], ''),
                                                              ('to_editor', ['value'], '')],
                                                  'properties': []},
             'livesettings.values.LongStringValue': {'bases': ['livesettings.values.Value'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('make_setting',
                                                                  ['db_value'],
                                                                  ''),
                                                                 ('to_python', ['value'], '')],
                                                     'properties': ['to_editor']},
             'livesettings.values.ModuleValue': {'bases': ['livesettings.values.Value'],
                                                 'constructor': [],
                                                 'docstring': 'Handles setting modules, storing them as strings in the db.',
                                                 'methods': [('load_module',
                                                              ['module'],
                                                              'Load a child module'),
                                                             ('to_python', ['value'], ''),
                                                             ('to_editor', ['value'], '')],
                                                 'properties': []},
             'livesettings.values.MultipleStringValue': {'bases': ['livesettings.values.Value'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('choice_field',
                                                                      ['**kwargs'],
                                                                      ''),
                                                                     ('get_db_prep_save',
                                                                      ['value'],
                                                                      ''),
                                                                     ('to_python',
                                                                      ['value'],
                                                                      '')],
                                                         'properties': ['to_editor']},
             'livesettings.values.PercentValue': {'bases': ['livesettings.values.Value'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [('to_python', ['value'], ''),
                                                              ('to_editor', ['value'], '')],
                                                  'properties': []},
             'livesettings.values.PositiveIntegerValue': {'bases': ['livesettings.values.IntegerValue'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [],
                                                          'properties': []},
             'livesettings.values.SortedDotDict': {'bases': ['django.utils.datastructures.SortedDict'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [('__getattr__', ['key'], ''),
                                                               ('__iter__', [], ''),
                                                               ('values', [], '')],
                                                   'properties': []},
             'livesettings.values.StringValue': {'bases': ['livesettings.values.Value'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [('to_python', ['value'], '')],
                                                 'properties': ['to_editor']},
             'livesettings.values.Value': {'bases': ['object'],
                                           'constructor': ['group', 'key', '**kwargs'],
                                           'docstring': '',
                                           'methods': [('__cmp__', ['other'], ''),
                                                       ('__eq__', ['other'], ''),
                                                       ('__iter__', [], ''),
                                                       ('__unicode__', [], ''),
                                                       ('__str__', [], ''),
                                                       ('add_choice',
                                                        ['choice'],
                                                        "Add a choice if it doesn't already exist."),
                                                       ('choice_field', ['**kwargs'], ''),
                                                       ('_choice_values', [], ''),
                                                       ('copy', [], ''),
                                                       ('_default_text', [], ''),
                                                       ('enabled', [], ''),
                                                       ('make_field', ['**kwargs'], ''),
                                                       ('make_setting', ['db_value'], ''),
                                                       ('_setting', [], ''),
                                                       ('_value', [], ''),
                                                       ('update', ['value'], ''),
                                                       ('value', [], ''),
                                                       ('editor_value', [], ''),
                                                       ('to_python',
                                                        ['value'],
                                                        'Returns a native Python object suitable for immediate use'),
                                                       ('get_db_prep_save',
                                                        ['value'],
                                                        'Returns a value suitable for storage into a CharField'),
                                                       ('to_editor',
                                                        ['value'],
                                                        'Returns a value suitable for display in a form widget')],
                                           'properties': ['creation_counter',
                                                          'group',
                                                          'key',
                                                          'description',
                                                          'help_text',
                                                          'choices',
                                                          'ordering',
                                                          'hidden',
                                                          'requires',
                                                          'requires_value',
                                                          'default',
                                                          'use_default',
                                                          'choice_values',
                                                          'default_text',
                                                          'setting',
                                                          'value',
                                                          'editor_value']},
             'payment.admin.CreditCardDetail_Inline': {'bases': ['django.contrib.admin.StackedInline'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [],
                                                       'properties': ['model', 'extra']},
             'payment.admin.PaymentOptionOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [],
                                                    'properties': ['list_display', 'ordering']},
             'payment.fields.CreditChoiceCharField': {'bases': ['django.db.models.CharField'],
                                                      'constructor': ["choices='__DYNAMIC__'",
                                                                      '*args',
                                                                      '**kwargs'],
                                                      'docstring': '',
                                                      'methods': [],
                                                      'properties': []},
             'payment.fields.PaymentChoiceCharField': {'bases': ['django.db.models.CharField'],
                                                       'constructor': ["choices='__DYNAMIC__'",
                                                                       '*args',
                                                                       '**kwargs'],
                                                       'docstring': '',
                                                       'methods': [],
                                                       'properties': []},
             'payment.forms.CreditPayShipForm': {'bases': ['payment.forms.SimplePayShipForm'],
                                                 'constructor': ['request',
                                                                 'paymentmodule',
                                                                 '*args',
                                                                 '**kwargs'],
                                                 'docstring': '',
                                                 'methods': [('clean', [], ''),
                                                             ('clean_credit_number',
                                                              [],
                                                              ' Check if credit card is valid. '),
                                                             ('clean_month_expires', [], ''),
                                                             ('clean_year_expires',
                                                              [],
                                                              ' Check if credit card has expired. '),
                                                             ('clean_ccv',
                                                              [],
                                                              " Validate a proper CCV is entered. Remember it can have a leading 0 so don't convert to int and return it"),
                                                             ('save',
                                                              ['request',
                                                               'cart',
                                                               'contact',
                                                               'payment_module',
                                                               'data=None'],
                                                              'Save the order and the credit card information for this orderpayment')],
                                                 'properties': ['credit_type',
                                                                'credit_number',
                                                                'month_expires',
                                                                'year_expires',
                                                                'ccv',
                                                                'cc',
                                                                'tempCart',
                                                                'tempContact']},
             'payment.forms.CustomChargeForm': {'bases': ['django.forms.Form'],
                                                'constructor': ['*args', '**kwargs'],
                                                'docstring': '',
                                                'methods': [('clean',
                                                             ['*args', '**kwargs'],
                                                             '')],
                                                'properties': ['orderitem',
                                                               'amount',
                                                               'shipping',
                                                               'notes']},
             'payment.forms.PaymentContactInfoForm': {'bases': ['payment.forms.PaymentMethodForm',
                                                                'satchmo_store.contact.forms.ContactInfoForm'],
                                                      'constructor': ['*args', '**kwargs'],
                                                      'docstring': '',
                                                      'methods': [('save',
                                                                   ['request',
                                                                    '*args',
                                                                    '**kwargs'],
                                                                   ''),
                                                                  ('clean', [], ''),
                                                                  ('clean_discount',
                                                                   [],
                                                                   ' Check if discount exists and is valid. ')],
                                                      'properties': ['payment_required_fields',
                                                                     'cart',
                                                                     'order',
                                                                     'enforce_state']},
             'payment.forms.PaymentMethodForm': {'bases': ['satchmo_store.contact.forms.ProxyContactForm'],
                                                 'constructor': ['cart=None',
                                                                 'order=None',
                                                                 '*args',
                                                                 '**kwargs'],
                                                 'docstring': '',
                                                 'methods': [('clean', [], '')],
                                                 'properties': ['paymentmethod', 'cart']},
             'payment.forms.SimplePayShipForm': {'bases': ['django.forms.Form'],
                                                 'constructor': ['request',
                                                                 'paymentmodule',
                                                                 '*args',
                                                                 '**kwargs'],
                                                 'docstring': '',
                                                 'methods': [('clean_shipping', [], ''),
                                                             ('is_needed',
                                                              [],
                                                              'Check to see if this form is even needed\n        it is *not* needed if:\n        - we have an order\n        - the order balance is zero\n        - No shipping needs to be selected\n        '),
                                                             ('save',
                                                              ['request',
                                                               'cart',
                                                               'contact',
                                                               'payment_module',
                                                               'data=None'],
                                                              '')],
                                                 'properties': ['shipping',
                                                                'order',
                                                                'orderpayment',
                                                                'paymentmodule',
                                                                'tempCart',
                                                                'tempContact',
                                                                'cheapshipping',
                                                                'shipping_hidden',
                                                                'shipping_description',
                                                                'shipping_dict']},
             'payment.models.CreditCardDetail': {'bases': ['django.db.models.Model'],
                                                 'constructor': [],
                                                 'docstring': '\n    Stores an encrypted CC number, its information, and its\n    displayable number.\n    ',
                                                 'methods': [('storeCC',
                                                              ['ccnum'],
                                                              'Take as input a valid cc, encrypt it and store the last 4 digits in a visible form'),
                                                             ('setCCV',
                                                              ['ccv'],
                                                              "Put the CCV in the cache, don't save it for security/legal reasons."),
                                                             ('getCCV', [], ''),
                                                             ('_decryptCC', [], ''),
                                                             ('_expireDate', [], '')],
                                                 'properties': ['orderpayment',
                                                                'credit_type',
                                                                'display_cc',
                                                                'encrypted_cc',
                                                                'expire_month',
                                                                'expire_year',
                                                                'card_holder',
                                                                'start_month',
                                                                'start_year',
                                                                'issue_num',
                                                                'ccv',
                                                                'decryptedCC',
                                                                'expirationDate']},
             'payment.models.PaymentOption': {'bases': ['django.db.models.Model'],
                                              'constructor': [],
                                              'docstring': '\n    If there are multiple options - CC, Cash, COD, etc this class allows\n    configuration.\n    ',
                                              'methods': [],
                                              'properties': ['description',
                                                             'active',
                                                             'optionName',
                                                             'sortOrder']},
             'payment.modules.authorizenet.processor.PaymentProcessor': {'bases': ['payment.modules.base.BasePaymentProcessor'],
                                                                         'constructor': ['settings'],
                                                                         'docstring': '\n    Authorize.NET payment processing module\n    You must have an account with authorize.net in order to use this module.\n    \n    Additionally, you must have ARB enabled in your account to use recurring billing.\n    ',
                                                                         'methods': [('authorize_payment',
                                                                                      ['order=None',
                                                                                       'amount=NOTSET',
                                                                                       'testing=False'],
                                                                                      'Authorize a single payment.\n        \n        Returns: ProcessorResult\n        '),
                                                                                     ('can_authorize',
                                                                                      [],
                                                                                      ''),
                                                                                     ('can_recur_bill',
                                                                                      [],
                                                                                      ''),
                                                                                     ('capture_authorized_payment',
                                                                                      ['authorization',
                                                                                       'testing=False',
                                                                                       'order=None',
                                                                                       'amount=NOTSET'],
                                                                                      'Capture a single payment'),
                                                                                     ('capture_payment',
                                                                                      ['testing=False',
                                                                                       'order=None',
                                                                                       'amount=NOTSET'],
                                                                                      'Process payments without an authorization step.'),
                                                                                     ('get_prior_auth_data',
                                                                                      ['authorization',
                                                                                       'amount=NOTSET'],
                                                                                      'Build the dictionary needed to process a prior auth capture.'),
                                                                                     ('get_void_auth_data',
                                                                                      ['authorization'],
                                                                                      'Build the dictionary needed to process a prior auth release.'),
                                                                                     ('get_recurring_charge_data',
                                                                                      ['testing=False'],
                                                                                      'Build the list of dictionaries needed to process a recurring charge.\n        \n        Because Authorize can only take one subscription at a time, we build a list\n        of the transaction dictionaries, for later sequential posting.\n        '),
                                                                                     ('get_standard_charge_data',
                                                                                      ['amount=NOTSET',
                                                                                       'authorize=False'],
                                                                                      'Build the dictionary needed to process a credit card charge'),
                                                                                     ('process_recurring_subscriptions',
                                                                                      ['recurlist',
                                                                                       'testing=False'],
                                                                                      'Post all subscription requests.'),
                                                                                     ('process_recurring_subscription',
                                                                                      ['data',
                                                                                       'testing=False'],
                                                                                      'Post one subscription request.'),
                                                                                     ('release_authorized_payment',
                                                                                      ['order=None',
                                                                                       'auth=None',
                                                                                       'testing=False'],
                                                                                      'Release a previously authorized payment.'),
                                                                                     ('send_post',
                                                                                      ['data',
                                                                                       'testing=False',
                                                                                       'amount=NOTSET'],
                                                                                      "Execute the post to Authorize Net.\n        \n        Params:\n        - data: dictionary as returned by get_standard_charge_data\n        - testing: if true, then don't record the payment\n        \n        Returns:\n        - ProcessorResult\n        ")],
                                                                         'properties': ['arb_enabled']},
             'payment.modules.authorizenet.processor.testCC': {'bases': ['object'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [],
                                                               'properties': []},
             'payment.modules.authorizenet.processor.testContact': {'bases': ['object'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [],
                                                                    'properties': []},
             'payment.modules.authorizenet.processor.testOrder': {'bases': ['object'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [('order_success',
                                                                               [],
                                                                               '')],
                                                                  'properties': ['contact',
                                                                                 'credit_card']},
             'payment.modules.autosuccess.processor.PaymentProcessor': {'bases': ['payment.modules.base.BasePaymentProcessor'],
                                                                        'constructor': ['settings'],
                                                                        'docstring': '\n    Autosuccess Payment Module\n    ',
                                                                        'methods': [('capture_payment',
                                                                                     ['testing=False',
                                                                                      'order=None',
                                                                                      'amount=NOTSET'],
                                                                                     '')],
                                                                        'properties': []},
             'payment.modules.base.BasePaymentProcessor': {'bases': ['object'],
                                                           'constructor': ['label',
                                                                           'payment_module'],
                                                           'docstring': '',
                                                           'methods': [('allowed',
                                                                        ['user', 'amount'],
                                                                        'Allows different payment processors to be allowed for certain situations.'),
                                                                       ('authorize_and_release',
                                                                        ['order=None',
                                                                         'amount=NOTSET',
                                                                         'testing=False'],
                                                                        ''),
                                                                       ('authorize_payment',
                                                                        ['testing=False',
                                                                         'order=None',
                                                                         'amount=NOTSET'],
                                                                        'Authorize a single payment, must be overridden to function'),
                                                                       ('can_authorize',
                                                                        [],
                                                                        ''),
                                                                       ('can_process', [], ''),
                                                                       ('can_refund', [], ''),
                                                                       ('can_recur_bill',
                                                                        [],
                                                                        ''),
                                                                       ('capture_authorized_payments',
                                                                        ['order=None'],
                                                                        "Capture all outstanding payments for this processor.  This is usually called by a \n        listener which watches for a 'shipped' status change on the Order."),
                                                                       ('capture_authorized_payment',
                                                                        ['authorization',
                                                                         'testing=False',
                                                                         'order=None',
                                                                         'amount=NOTSET'],
                                                                        'Capture a single payment, must be overridden to function'),
                                                                       ('capture_payment',
                                                                        ['testing=False',
                                                                         'order=None',
                                                                         'amount=NOTSET'],
                                                                        'Capture payment without an authorization step.  Override this one.'),
                                                                       ('create_pending_payment',
                                                                        ['order=None',
                                                                         'amount=NOTSET'],
                                                                        ''),
                                                                       ('get_recurring_orderitems',
                                                                        [],
                                                                        'Iterate through the order and get all recurring billing items'),
                                                                       ('is_live', [], ''),
                                                                       ('log_extra',
                                                                        ['msg', '*args'],
                                                                        'Send a log message if EXTRA_LOGGING is set in settings.'),
                                                                       ('prepare_data',
                                                                        ['order'],
                                                                        ''),
                                                                       ('process',
                                                                        ['testing=False'],
                                                                        'This will process the payment.'),
                                                                       ('record_authorization',
                                                                        ['amount=NOTSET',
                                                                         "transaction_id=''",
                                                                         "reason_code=''",
                                                                         'order=None'],
                                                                        '\n        Convert a pending payment into a real authorization.\n        '),
                                                                       ('record_failure',
                                                                        ['amount=NOTSET',
                                                                         "transaction_id=''",
                                                                         "reason_code=''",
                                                                         'authorization=None',
                                                                         'order=None',
                                                                         "details=''"],
                                                                        '\n        Add an OrderPaymentFailure record\n        '),
                                                                       ('record_payment',
                                                                        ['amount=NOTSET',
                                                                         "transaction_id=''",
                                                                         "reason_code=''",
                                                                         'authorization=None',
                                                                         'order=None'],
                                                                        '\n        Convert a pending payment or an authorization.\n        '),
                                                                       ('release_authorized_payment',
                                                                        ['order=None',
                                                                         'auth=None',
                                                                         'testing=False'],
                                                                        'Release a previously authorized payment.')],
                                                           'properties': ['key',
                                                                          'settings',
                                                                          'label',
                                                                          'log',
                                                                          'order']},
             'payment.modules.base.HeadlessPaymentProcessor': {'bases': ['payment.modules.base.BasePaymentProcessor'],
                                                               'constructor': [],
                                                               'docstring': "A payment processor which doesn't actually do any processing directly.\n    \n    This is used for payment providers such as PayPal and Google, which are entirely\n    view/form based.\n    ",
                                                               'methods': [('can_process',
                                                                            [],
                                                                            '')],
                                                               'properties': []},
             'payment.modules.base.PaymentRecorder': {'bases': ['object'],
                                                      'constructor': ['order', 'config'],
                                                      'docstring': 'Manages proper recording of pending payments, payments, and authorizations.',
                                                      'methods': [('_set_amount',
                                                                   ['amount'],
                                                                   ''),
                                                                  ('_get_amount', [], ''),
                                                                  ('_get_pending', [], ''),
                                                                  ('authorize_payment',
                                                                   ['amount=NOTSET'],
                                                                   'Make an authorization, using the existing pending payment if found'),
                                                                  ('capture_authorized_payment',
                                                                   ['authorization',
                                                                    'amount=NOTSET'],
                                                                   'Convert an authorization into a payment.'),
                                                                  ('capture_payment',
                                                                   ['amount=NOTSET'],
                                                                   'Make a direct payment without a prior authorization, using the existing pending payment if found.'),
                                                                  ('record_failure',
                                                                   ['amount=NOTSET',
                                                                    "details=''",
                                                                    'authorization=None'],
                                                                   ''),
                                                                  ('cleanup', [], ''),
                                                                  ('create_pending',
                                                                   ['amount=NOTSET'],
                                                                   'Create a placeholder payment entry for the order.  \n        This is done by step 2 of the payment process.'),
                                                                  ('set_amount_from_pending',
                                                                   [],
                                                                   'Try to figure out how much to charge. If it is set on the "pending" charge use that\n        otherwise use the order balance.')],
                                                      'properties': ['order',
                                                                     'key',
                                                                     'config',
                                                                     '_amount',
                                                                     'transaction_id',
                                                                     'reason_code',
                                                                     'orderpayment',
                                                                     'pending',
                                                                     'amount',
                                                                     'pendingpayments']},
             'payment.modules.base.ProcessorResult': {'bases': ['object'],
                                                      'constructor': ['processor',
                                                                      'success',
                                                                      'message',
                                                                      'payment=None'],
                                                      'docstring': 'The result from a processor.process call',
                                                      'methods': [('__unicode__', [], '')],
                                                      'properties': ['success',
                                                                     'processor',
                                                                     'message',
                                                                     'payment']},
             'payment.modules.cod.processor.PaymentProcessor': {'bases': ['payment.modules.base.BasePaymentProcessor'],
                                                                'constructor': ['settings'],
                                                                'docstring': 'COD Payment Processor',
                                                                'methods': [('capture_payment',
                                                                             ['testing=False',
                                                                              'order=None',
                                                                              'amount=NOTSET'],
                                                                             '\n        COD is always successful.\n        ')],
                                                                'properties': []},
             'payment.modules.cybersource.processor.PaymentProcessor': {'bases': ['payment.modules.base.BasePaymentProcessor'],
                                                                        'constructor': ['settings'],
                                                                        'docstring': '\n    Cybersource payment processing module\n    You must have an account with Cybersource in order to use this module\n    \n    ',
                                                                        'methods': [('prepare_content',
                                                                                     ['order',
                                                                                      'amount'],
                                                                                     ''),
                                                                                    ('capture_payment',
                                                                                     ['testing=False',
                                                                                      'order=None',
                                                                                      'amount=NOTSET'],
                                                                                     '\n        Creates and sends XML representation of transaction to Cybersource\n        ')],
                                                                        'properties': ['contents',
                                                                                       'testflag',
                                                                                       'connection',
                                                                                       'configuration',
                                                                                       'bill_to',
                                                                                       'card',
                                                                                       'purchase_totals']},
             'payment.modules.cybersource.processor.testCC': {'bases': ['object'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [],
                                                              'properties': []},
             'payment.modules.cybersource.processor.testContact': {'bases': ['object'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [],
                                                                   'properties': []},
             'payment.modules.cybersource.processor.testOrder': {'bases': ['object'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [('order_success',
                                                                              [],
                                                                              '')],
                                                                 'properties': ['contact',
                                                                                'credit_card']},
             'payment.modules.dummy.processor.PaymentProcessor': {'bases': ['payment.modules.base.BasePaymentProcessor'],
                                                                  'constructor': ['settings'],
                                                                  'docstring': '',
                                                                  'methods': [('authorize_payment',
                                                                               ['order=None',
                                                                                'testing=False',
                                                                                'amount=NOTSET'],
                                                                               "\n        Make an authorization for an order.  This payment will then be captured when the order\n        is set marked 'shipped'.\n        "),
                                                                              ('can_authorize',
                                                                               [],
                                                                               ''),
                                                                              ('capture_payment',
                                                                               ['testing=False',
                                                                                'amount=NOTSET'],
                                                                               "\n        Process the transaction and return a ProcessorResult:\n\n        Example:\n        >>> from livesettings import config_get_group\n        >>> settings = config_get_group('PAYMENT_DUMMY')\n        >>> from payment.modules.dummy.processor import PaymentProcessor\n        >>> processor = PaymentProcessor(settings)\n        # If using a normal payment module, data should be an Order object.\n        >>> data = {}\n        >>> processor.prepare_data(data)\n        >>> processor.process()\n        ProcessorResult: DUMMY [Success] Success\n        "),
                                                                              ('capture_authorized_payment',
                                                                               ['authorization',
                                                                                'amount=NOTSET'],
                                                                               '\n        Given a prior authorization, capture remaining amount not yet captured.\n        '),
                                                                              ('release_authorized_payment',
                                                                               ['order=None',
                                                                                'auth=None',
                                                                                'testing=False'],
                                                                               'Release a previously authorized payment.')],
                                                                  'properties': []},
             'payment.modules.giftcertificate.admin.GiftCertificateOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                                              'constructor': [],
                                                                              'docstring': '',
                                                                              'methods': [],
                                                                              'properties': ['list_display',
                                                                                             'list_display_links',
                                                                                             'ordering',
                                                                                             'inlines']},
             'payment.modules.giftcertificate.admin.GiftCertificateUsage_Inline': {'bases': ['django.contrib.admin.StackedInline'],
                                                                                   'constructor': [],
                                                                                   'docstring': '',
                                                                                   'methods': [],
                                                                                   'properties': ['model',
                                                                                                  'extra']},
             'payment.modules.giftcertificate.forms.GiftCertCodeForm': {'bases': ['django.forms.Form'],
                                                                        'constructor': [],
                                                                        'docstring': '',
                                                                        'methods': [],
                                                                        'properties': ['code']},
             'payment.modules.giftcertificate.forms.GiftCertPayShipForm': {'bases': ['payment.forms.SimplePayShipForm'],
                                                                           'constructor': ['request',
                                                                                           'paymentmodule',
                                                                                           '*args',
                                                                                           '**kwargs'],
                                                                           'docstring': '',
                                                                           'methods': [],
                                                                           'properties': ['giftcode']},
             'payment.modules.giftcertificate.models.GiftCertificate': {'bases': ['django.db.models.Model'],
                                                                        'constructor': [],
                                                                        'docstring': 'A Gift Cert which holds value.',
                                                                        'methods': [('balance',
                                                                                     [],
                                                                                     ''),
                                                                                    ('apply_to_order',
                                                                                     ['order'],
                                                                                     'Apply up to the full amount of the balance of this cert to the order.\n\n        Returns new balance.\n        '),
                                                                                    ('use',
                                                                                     ['amount',
                                                                                      "notes=''",
                                                                                      'orderpayment=None'],
                                                                                     'Use some amount of the gift cert, returning the current balance.'),
                                                                                    ('save',
                                                                                     ['force_insert=False',
                                                                                      'force_update=False'],
                                                                                     ''),
                                                                                    ('__unicode__',
                                                                                     [],
                                                                                     '')],
                                                                        'properties': ['site',
                                                                                       'order',
                                                                                       'code',
                                                                                       'purchased_by',
                                                                                       'date_added',
                                                                                       'valid',
                                                                                       'message',
                                                                                       'recipient_email',
                                                                                       'start_balance',
                                                                                       'objects',
                                                                                       'balance',
                                                                                       'orderpayment']},
             'payment.modules.giftcertificate.models.GiftCertificateManager': {'bases': ['django.db.models.Manager'],
                                                                               'constructor': [],
                                                                               'docstring': '',
                                                                               'methods': [('from_order',
                                                                                            ['order'],
                                                                                            '')],
                                                                               'properties': []},
             'payment.modules.giftcertificate.models.GiftCertificateProduct': {'bases': ['django.db.models.Model'],
                                                                               'constructor': [],
                                                                               'docstring': '\n    The product model for a Gift Certificate\n    ',
                                                                               'methods': [('__unicode__',
                                                                                            [],
                                                                                            ''),
                                                                                           ('_get_subtype',
                                                                                            [],
                                                                                            ''),
                                                                                           ('order_success',
                                                                                            ['order',
                                                                                             'order_item'],
                                                                                            '')],
                                                                               'properties': ['product',
                                                                                              'is_shippable',
                                                                                              'discountable']},
             'payment.modules.giftcertificate.models.GiftCertificateUsage': {'bases': ['django.db.models.Model'],
                                                                             'constructor': [],
                                                                             'docstring': 'Any usage of a Gift Cert is logged with one of these objects.',
                                                                             'methods': [('__unicode__',
                                                                                          [],
                                                                                          ''),
                                                                                         ('save',
                                                                                          ['force_insert=False',
                                                                                           'force_update=False'],
                                                                                          '')],
                                                                             'properties': ['usage_date',
                                                                                            'notes',
                                                                                            'balance_used',
                                                                                            'orderpayment',
                                                                                            'used_by',
                                                                                            'giftcertificate']},
             'payment.modules.giftcertificate.processor.PaymentProcessor': {'bases': ['payment.modules.base.BasePaymentProcessor'],
                                                                            'constructor': ['settings'],
                                                                            'docstring': '',
                                                                            'methods': [('capture_payment',
                                                                                         ['testing=False',
                                                                                          'order=None',
                                                                                          'amount=NOTSET'],
                                                                                         '\n        Process the transaction and return a ProcessorResponse\n        ')],
                                                                            'properties': []},
             'payment.modules.giftcertificate.tests.GiftCertOrderTest': {'bases': ['django.test.TestCase'],
                                                                         'constructor': [],
                                                                         'docstring': '',
                                                                         'methods': [('tearDown',
                                                                                      [],
                                                                                      ''),
                                                                                     ('testOrderSuccess',
                                                                                      [],
                                                                                      'Test cert creation on order success')],
                                                                         'properties': ['fixtures']},
             'payment.modules.giftcertificate.tests.TestCertCreate': {'bases': ['django.test.TestCase'],
                                                                      'constructor': [],
                                                                      'docstring': '',
                                                                      'methods': [('setUp',
                                                                                   [],
                                                                                   ''),
                                                                                  ('tearDown',
                                                                                   [],
                                                                                   ''),
                                                                                  ('testCreate',
                                                                                   [],
                                                                                   ''),
                                                                                  ('testUse',
                                                                                   [],
                                                                                   '')],
                                                                      'properties': ['fixtures',
                                                                                     'site']},
             'payment.modules.giftcertificate.tests.TestGenerateCertificateCode': {'bases': ['django.test.TestCase'],
                                                                                   'constructor': [],
                                                                                   'docstring': '',
                                                                                   'methods': [('setUp',
                                                                                                [],
                                                                                                ''),
                                                                                               ('testGetCode',
                                                                                                [],
                                                                                                '')],
                                                                                   'properties': ['charset',
                                                                                                  'format']},
             'payment.modules.giftcertificate.tests.TestGenerateCode': {'bases': ['django.test.TestCase'],
                                                                        'constructor': [],
                                                                        'docstring': '',
                                                                        'methods': [('testGetCode',
                                                                                     [],
                                                                                     ''),
                                                                                    ('testGetCode2',
                                                                                     [],
                                                                                     ''),
                                                                                    ('testFormat',
                                                                                     [],
                                                                                     '')],
                                                                        'properties': []},
             'payment.modules.google.processor.PaymentProcessor': {'bases': ['payment.modules.base.HeadlessPaymentProcessor'],
                                                                   'constructor': ['settings'],
                                                                   'docstring': '',
                                                                   'methods': [],
                                                                   'properties': []},
             'payment.modules.google.views.GoogleCart': {'bases': ['object'],
                                                         'constructor': ['order',
                                                                         'payment_module',
                                                                         'live'],
                                                         'docstring': '',
                                                         'methods': [('_cart_xml',
                                                                      ['order'],
                                                                      ''),
                                                                     ('_signature',
                                                                      ['live'],
                                                                      ''),
                                                                     ('encoded_cart', [], ''),
                                                                     ('encoded_signature',
                                                                      [],
                                                                      '')],
                                                         'properties': ['settings',
                                                                        'cart_xml',
                                                                        'signature']},
             'payment.modules.paypal.processor.PaymentProcessor': {'bases': ['payment.modules.base.HeadlessPaymentProcessor'],
                                                                   'constructor': ['settings'],
                                                                   'docstring': '',
                                                                   'methods': [],
                                                                   'properties': []},
             'payment.modules.protx.forms.ProtxPayShipForm': {'bases': ['payment.forms.CreditPayShipForm'],
                                                              'constructor': ['request',
                                                                              'paymentmodule',
                                                                              '*args',
                                                                              '**kwargs'],
                                                              'docstring': 'Adds fields required by Prot/X to the Credit form.',
                                                              'methods': [('save',
                                                                           ['request',
                                                                            'cart',
                                                                            'contact',
                                                                            'payment_module'],
                                                                           'Save the order and the credit card details.'),
                                                                          ('clean_card_holder',
                                                                           [],
                                                                           ''),
                                                                          ('clean_month_start',
                                                                           [],
                                                                           ''),
                                                                          ('clean_year_start',
                                                                           [],
                                                                           ''),
                                                                          ('clean_issue_num',
                                                                           [],
                                                                           ''),
                                                                          ('_maybe_require',
                                                                           ['data',
                                                                            'field',
                                                                            'message'],
                                                                           '')],
                                                              'properties': ['card_holder',
                                                                             'month_start',
                                                                             'year_start',
                                                                             'issue_num',
                                                                             'requires_issue_number']},
             'payment.modules.protx.processor.PaymentProcessor': {'bases': ['payment.modules.base.BasePaymentProcessor'],
                                                                  'constructor': ['settings'],
                                                                  'docstring': '',
                                                                  'methods': [('_url',
                                                                               ['key'],
                                                                               ''),
                                                                              ('_connection',
                                                                               [],
                                                                               ''),
                                                                              ('_callback',
                                                                               [],
                                                                               ''),
                                                                              ('prepare_post',
                                                                               ['data',
                                                                                'amount'],
                                                                               ''),
                                                                              ('prepare_data3d',
                                                                               ['md', 'pares'],
                                                                               ''),
                                                                              ('capture_payment',
                                                                               ['testing=False',
                                                                                'order=None',
                                                                                'amount=NOTSET'],
                                                                               'Execute the post to protx VSP DIRECT')],
                                                                  'properties': ['packet',
                                                                                 'response',
                                                                                 'valid',
                                                                                 'connection',
                                                                                 'callback',
                                                                                 'postString',
                                                                                 'url']},
             'payment.modules.purchaseorder.admin.PurchaseOrderOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                                          'constructor': [],
                                                                          'docstring': '',
                                                                          'methods': [],
                                                                          'properties': ['list_display']},
             'payment.modules.purchaseorder.forms.PurchaseorderPayShipForm': {'bases': ['payment.forms.SimplePayShipForm'],
                                                                              'constructor': ['*args',
                                                                                              '**kwargs'],
                                                                              'docstring': '',
                                                                              'methods': [('save',
                                                                                           ['request',
                                                                                            'cart',
                                                                                            'contact',
                                                                                            'payment_module'],
                                                                                           'Save the order and the po information for this orderpayment')],
                                                                              'properties': ['po_number',
                                                                                             'purchaseorder']},
             'payment.modules.purchaseorder.models.PurchaseOrder': {'bases': ['django.db.models.Model'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [('__unicode__',
                                                                                 [],
                                                                                 ''),
                                                                                ('balance_due',
                                                                                 [],
                                                                                 ''),
                                                                                ('order_link',
                                                                                 [],
                                                                                 ''),
                                                                                ('save',
                                                                                 [],
                                                                                 '')],
                                                                    'properties': ['po_number',
                                                                                   'order',
                                                                                   'balance',
                                                                                   'paydate',
                                                                                   'notes']},
             'payment.modules.purchaseorder.processor.PaymentProcessor': {'bases': ['payment.modules.base.BasePaymentProcessor'],
                                                                          'constructor': ['settings'],
                                                                          'docstring': '',
                                                                          'methods': [('can_refund',
                                                                                       [],
                                                                                       ''),
                                                                                      ('prepare_data',
                                                                                       ['order'],
                                                                                       ''),
                                                                                      ('capture_payment',
                                                                                       ['testing=False',
                                                                                        'order=None',
                                                                                        'amount=NOTSET'],
                                                                                       '\n        Purchase Orders are always successful.\n        ')],
                                                                          'properties': []},
             'payment.modules.sermepa.processor.PaymentProcessor': {'bases': ['payment.modules.base.HeadlessPaymentProcessor'],
                                                                    'constructor': ['settings'],
                                                                    'docstring': '',
                                                                    'methods': [],
                                                                    'properties': []},
             'payment.modules.trustcommerce.processor.PaymentProcessor': {'bases': ['payment.modules.base.BasePaymentProcessor'],
                                                                          'constructor': ['settings'],
                                                                          'docstring': '',
                                                                          'methods': [('prepare_post',
                                                                                       ['data',
                                                                                        'amount'],
                                                                                       ''),
                                                                                      ('capture_payment',
                                                                                       ['testing=False',
                                                                                        'order=None',
                                                                                        'amount=NOTSET'],
                                                                                       'process the transaction through tclink')],
                                                                          'properties': ['demo',
                                                                                         'AVS',
                                                                                         'custid',
                                                                                         'password',
                                                                                         'auth',
                                                                                         'tclink_version',
                                                                                         'transactionData']},
             'payment.modules.trustcommerce.processor.phone': {'bases': ['object'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [],
                                                               'properties': []},
             'payment.modules.trustcommerce.processor.testCC': {'bases': ['object'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [],
                                                                'properties': []},
             'payment.modules.trustcommerce.processor.testContact': {'bases': ['object'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [],
                                                                     'properties': []},
             'payment.modules.trustcommerce.processor.testOrder': {'bases': ['object'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [('order_sucess',
                                                                                [],
                                                                                '')],
                                                                   'properties': ['contact',
                                                                                  'credit_card']},
             'payment.templatetags.satchmo_googlecheckout.GoogleCheckoutImageUrlNode': {'bases': ['django.template.Node'],
                                                                                        'constructor': ['merchid',
                                                                                                        'imgsize',
                                                                                                        'transparent',
                                                                                                        'disabled'],
                                                                                        'docstring': '',
                                                                                        'methods': [('render',
                                                                                                     ['context'],
                                                                                                     '')],
                                                                                        'properties': ['merchid',
                                                                                                       'imgsize',
                                                                                                       'transparent',
                                                                                                       'disabled']},
             'payment.tests.TestMinimumOrder': {'bases': ['django.test.TestCase'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [('setUp', [], ''),
                                                            ('tearDown', [], ''),
                                                            ('test_checkout_minimums',
                                                             [],
                                                             '\n        Validate we can add some items to the cart\n        ')],
                                                'properties': ['fixtures', 'client']},
             'payment.tests.TestModulesSettings': {'bases': ['django.test.TestCase'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [('setUp', [], ''),
                                                               ('tearDown', [], ''),
                                                               ('testGetDummy', [], ''),
                                                               ('testLookupTemplateSet',
                                                                [],
                                                                ''),
                                                               ('testLookupURL', [], ''),
                                                               ('testUrlPatterns', [], '')],
                                                   'properties': ['dummy']},
             'payment.tests.TestPaymentHandling': {'bases': ['django.test.TestCase'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [('setUp', [], ''),
                                                               ('tearDown', [], ''),
                                                               ('test_authorize',
                                                                [],
                                                                'Test making an authorization using DUMMY.'),
                                                               ('test_authorize_multiple',
                                                                [],
                                                                'Test making multiple authorization using DUMMY.'),
                                                               ('test_capture',
                                                                [],
                                                                'Test making a capture without authorization using DUMMY.'),
                                                               ('test_multiple_pending',
                                                                [],
                                                                'Test that creating a second pending payment deletes the first one.')],
                                                   'properties': ['fixtures', 'client', 'US']},
             'payment.tests.TestRecurringBilling': {'bases': ['django.test.TestCase'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('setUp', [], ''),
                                                                ('tearDown', [], ''),
                                                                ('testProductType', [], ''),
                                                                ('testCheckout', [], ''),
                                                                ('testCronRebill', [], ''),
                                                                ('getTerms',
                                                                 ['object',
                                                                  'ignore_trial=False'],
                                                                 '')],
                                                    'properties': ['fixtures',
                                                                   'customer',
                                                                   'c',
                                                                   'response']},
             'payment.views.confirm.ConfirmController': {'bases': ['object'],
                                                         'constructor': ['request',
                                                                         'payment_module',
                                                                         'extra_context={}'],
                                                         'docstring': 'Centralizes and manages data used by the confirm views.\n    Generally, this is used by initializing, then calling\n    `confirm`.  If defaults need to be overridden, such as\n    by setting different templates, or by overriding `viewTax`,\n    then do that before calling `confirm`.\n    ',
                                                         'methods': [('confirm',
                                                                      ['force_post=False'],
                                                                      'Handles confirming an order and processing the charges.\n\n        If this is a POST, then tries to charge the order using the `payment_module`.`processor`\n        On success, sets `response` to the result of the `success_handler`, returns True\n        On failure, sets `response` to the result, the result of the `form_handler`, returns False\n        \n        If not a POST, sets `response` to the result, the result of the `form_handler`, returns True\n        '),
                                                                     ('invalidate',
                                                                      ['dest'],
                                                                      'Mark the confirmation invalid, and set the response'),
                                                                     ('lookup_template',
                                                                      ['key'],
                                                                      'Shortcut method to the the proper template from the `paymentModule`'),
                                                                     ('lookup_url',
                                                                      ['view'],
                                                                      'Shortcut method to the the proper url from the `paymentModule`'),
                                                                     ('_onForm',
                                                                      ['controller'],
                                                                      'Show the confirmation page for the order.  Looks up the proper template for the\n        payment_module.\n        '),
                                                                     ('_onSuccess',
                                                                      ['controller'],
                                                                      'Handles a success in payment.  If the order is paid-off, sends success, else return page to pay remaining.'),
                                                                     ('process',
                                                                      [],
                                                                      'Process a prepared payment'),
                                                                     ('sanity_check',
                                                                      [],
                                                                      'Ensure we have a valid cart and order.')],
                                                         'properties': ['request',
                                                                        'paymentModule',
                                                                        'processor',
                                                                        'viewTax',
                                                                        'order',
                                                                        'cart',
                                                                        'extra_context',
                                                                        'onForm',
                                                                        'onSuccess',
                                                                        'valid',
                                                                        'response',
                                                                        'processorMessage',
                                                                        'processorReasonCode',
                                                                        'processorResults',
                                                                        'templates']},
             'payment.views.confirm.FakeValue': {'bases': ['object'],
                                                 'constructor': ['val'],
                                                 'docstring': '',
                                                 'methods': [],
                                                 'properties': ['value']},
             'payment.views.confirm.FreeProcessor': {'bases': ['object'],
                                                     'constructor': ['key'],
                                                     'docstring': '',
                                                     'methods': [('has_key', [], '')],
                                                     'properties': ['KEY', 'LABEL']},
             'payment.views.confirm.FreeProcessorModule': {'bases': ['object'],
                                                           'constructor': ['key'],
                                                           'docstring': '',
                                                           'methods': [('prepare_data',
                                                                        ['order',
                                                                         '*args',
                                                                         '**kwargs'],
                                                                        ''),
                                                                       ('process',
                                                                        ['*args', '**kwargs'],
                                                                        '')],
                                                           'properties': ['KEY',
                                                                          'LABEL',
                                                                          'order']},
             'posplit.Rule': {'bases': ['object'],
                              'constructor': ['line'],
                              'docstring': '',
                              'methods': [('applies_to', ['target'], ''),
                                          ('apply', ['target'], ''),
                                          ('do_copy', ['targets', 'lines'], ''),
                                          ('__str__', [], '')],
                              'properties': ['parent', 'key', 'option', 'dest']},
             'posplit.RuleSet': {'bases': ['object'],
                                 'constructor': ['fname'],
                                 'docstring': '',
                                 'methods': [('parse_rules',
                                              [],
                                              'Parse a rules file which tells where to put target sections\n\n        The rules file is formatted like:\n        slug=[option:]dest\n\n        Where:\n        - slug is the beginning part of the filename in the po file.\n        - dest is the destination name\n\n        For example:\n        accounts=apps/satchmo_store/accounts\n        giftcertificate=apps/payment/modules/giftcertificate\n        local_settings-customize.py=nostrip:projects/template/\n        '),
                                             ('add', ['rule'], ''),
                                             ('match_rule', ['target'], ''),
                                             ('open_pofile', ['dest'], ''),
                                             ('set_header', ['header'], ''),
                                             ('set_pofile', ['fname'], '')],
                                 'properties': ['rules', 'fname', 'files', 'header', 'pofile']},
             'posplit.Section': {'bases': ['object'],
                                 'constructor': [],
                                 'docstring': '',
                                 'methods': [('add', ['line'], ''),
                                             ('apply_rules', ['rules'], ''),
                                             ('do_copy', [], ''),
                                             ('__unicode__', [], '')],
                                 'properties': ['targets', 'decisions', 'lines']},
             'product.admin.CategoryAdminForm': {'bases': ['django.forms.models.ModelForm'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [('clean_parent', [], '')],
                                                 'properties': []},
             'product.admin.CategoryImageOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [],
                                                    'properties': ['inlines']},
             'product.admin.CategoryImageTranslation_Inline': {'bases': ['django.contrib.admin.StackedInline'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [],
                                                               'properties': ['model', 'extra']},
             'product.admin.CategoryImage_Inline': {'bases': ['django.contrib.admin.TabularInline'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [],
                                                    'properties': ['model',
                                                                   'extra',
                                                                   'formfield_overrides']},
             'product.admin.CategoryOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('mark_active',
                                                            ['request', 'queryset'],
                                                            ''),
                                                           ('mark_inactive',
                                                            ['request', 'queryset'],
                                                            '')],
                                               'properties': ['list_display',
                                                              'list_display_links',
                                                              'ordering',
                                                              'inlines',
                                                              'filter_horizontal',
                                                              'form',
                                                              'actions']},
             'product.admin.CategoryTranslation_Inline': {'bases': ['django.contrib.admin.StackedInline'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [],
                                                          'properties': ['model', 'extra']},
             'product.admin.CustomProductOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [],
                                                    'properties': ['inlines']},
             'product.admin.CustomTextFieldOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [],
                                                      'properties': ['inlines']},
             'product.admin.CustomTextFieldTranslation_Inline': {'bases': ['django.contrib.admin.StackedInline'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [],
                                                                 'properties': ['model',
                                                                                'extra']},
             'product.admin.CustomTextField_Inline': {'bases': ['django.contrib.admin.TabularInline'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [],
                                                      'properties': ['model', 'extra']},
             'product.admin.DiscountOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': ['list_display',
                                                              'list_display_links',
                                                              'filter_horizontal']},
             'product.admin.OptionGroupOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [],
                                                  'properties': ['inlines', 'list_display']},
             'product.admin.OptionGroupTranslation_Inline': {'bases': ['django.contrib.admin.StackedInline'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [],
                                                             'properties': ['model', 'extra']},
             'product.admin.OptionOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [],
                                             'properties': ['inlines']},
             'product.admin.OptionTranslation_Inline': {'bases': ['django.contrib.admin.StackedInline'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [],
                                                        'properties': ['model', 'extra']},
             'product.admin.Option_Inline': {'bases': ['django.contrib.admin.TabularInline'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [],
                                             'properties': ['model', 'extra']},
             'product.admin.Price_Inline': {'bases': ['django.contrib.admin.TabularInline'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [],
                                            'properties': ['model', 'extra']},
             'product.admin.ProductAttribute_Inline': {'bases': ['django.contrib.admin.TabularInline'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [],
                                                       'properties': ['model', 'extra']},
             'product.admin.ProductImageOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': ['inlines']},
             'product.admin.ProductImageTranslation_Inline': {'bases': ['django.contrib.admin.StackedInline'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [],
                                                              'properties': ['model', 'extra']},
             'product.admin.ProductImage_Inline': {'bases': ['django.contrib.admin.StackedInline'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [],
                                                   'properties': ['model',
                                                                  'extra',
                                                                  'formfield_overrides']},
             'product.admin.ProductOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('formfield_for_dbfield',
                                                           ['db_field', '**kwargs'],
                                                           '')],
                                              'properties': ['list_display',
                                                             'list_display_links',
                                                             'list_filter',
                                                             'fieldsets',
                                                             'search_fields',
                                                             'inlines',
                                                             'filter_horizontal']},
             'product.admin.ProductTranslation_Inline': {'bases': ['django.contrib.admin.TabularInline'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [],
                                                         'properties': ['model', 'extra']},
             'product.admin.ProductVariationOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [],
                                                       'properties': ['filter_horizontal']},
             'product.admin.SubscriptionProductOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [],
                                                          'properties': ['inlines']},
             'product.admin.Trial_Inline': {'bases': ['django.contrib.admin.StackedInline'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [],
                                            'properties': ['model', 'extra']},
             'product.forms.InventoryForm': {'bases': ['django.forms.Form'],
                                             'constructor': ['*args', '**kwargs'],
                                             'docstring': '',
                                             'methods': [('save', ['request'], '')],
                                             'properties': []},
             'product.forms.ProductExportForm': {'bases': ['django.forms.Form'],
                                                 'constructor': ['*args', '**kwargs'],
                                                 'docstring': '',
                                                 'methods': [('export', ['request'], '')],
                                                 'properties': []},
             'product.forms.ProductImportForm': {'bases': ['django.forms.Form'],
                                                 'constructor': ['*args', '**kwargs'],
                                                 'docstring': '',
                                                 'methods': [('import_from',
                                                              ['infile', 'maxsize=10000000'],
                                                              '')],
                                                 'properties': []},
             'product.forms.VariationManagerForm': {'bases': ['django.forms.Form'],
                                                    'constructor': ['*args', '**kwargs'],
                                                    'docstring': '',
                                                    'methods': [('_save', ['request'], ''),
                                                                ('_create_variation',
                                                                 ['opts',
                                                                  'key',
                                                                  'data',
                                                                  'request'],
                                                                 ''),
                                                                ('_delete_variation',
                                                                 ['opts', 'request'],
                                                                 '')],
                                                    'properties': ['dirty',
                                                                   'optionkeys',
                                                                   'variationkeys',
                                                                   'existing',
                                                                   'optiondict',
                                                                   'edit_urls',
                                                                   'namedict',
                                                                   'skudict',
                                                                   'slugdict',
                                                                   'product',
                                                                   'save']},
             'product.jobs.daily.rebuild_prices.Job': {'bases': ['django_extensions.management.jobs.DailyJob'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('execute', [], '')],
                                                       'properties': ['help']},
             'product.jobs.sample.Job': {'bases': ['django_extensions.management.jobs.BaseJob'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('execute', [], '')],
                                         'properties': ['help']},
             'product.management.commands.satchmo_rebuild_pricing.Command': {'bases': ['django.core.management.base.BaseCommand'],
                                                                             'constructor': [],
                                                                             'docstring': '',
                                                                             'methods': [('handle',
                                                                                          ['*sitenames',
                                                                                           '**options'],
                                                                                          '')],
                                                                             'properties': ['help',
                                                                                            'args',
                                                                                            'requires_model_validation']},
             'product.models.Category': {'bases': ['django.db.models.Model'],
                                         'constructor': [],
                                         'docstring': '\n    Basic hierarchical category model for storing products\n    ',
                                         'methods': [('_get_mainImage', [], ''),
                                                     ('active_products',
                                                      ['variations=True',
                                                       'include_children=False',
                                                       '**kwargs'],
                                                      ''),
                                                     ('translated_description',
                                                      ['language_code=None'],
                                                      ''),
                                                     ('translated_name',
                                                      ['language_code=None'],
                                                      ''),
                                                     ('_recurse_for_parents', ['cat_obj'], ''),
                                                     ('parents', [], ''),
                                                     ('get_absolute_url', [], ''),
                                                     ('get_separator', [], ''),
                                                     ('_parents_repr', [], ''),
                                                     ('get_url_name', [], ''),
                                                     ('__unicode__', [], ''),
                                                     ('save',
                                                      ['force_insert=False',
                                                       'force_update=False'],
                                                      ''),
                                                     ('_flatten',
                                                      ['L'],
                                                      '\n        Taken from a python newsgroup post\n        '),
                                                     ('_recurse_for_children',
                                                      ['node', 'only_active=False'],
                                                      ''),
                                                     ('get_active_children',
                                                      ['include_self=False'],
                                                      '\n        Gets a list of all of the children categories which have active products.\n        '),
                                                     ('get_all_children',
                                                      ['only_active=False',
                                                       'include_self=False'],
                                                      '\n        Gets a list of all of the children categories.\n        ')],
                                         'properties': ['site',
                                                        'name',
                                                        'slug',
                                                        'parent',
                                                        'meta',
                                                        'description',
                                                        'ordering',
                                                        'is_active',
                                                        'related_categories',
                                                        'objects',
                                                        'main_image']},
             'product.models.CategoryImage': {'bases': ['django.db.models.Model'],
                                              'constructor': [],
                                              'docstring': '\n    A picture of an item.  Can have many pictures associated with an item.\n    Thumbnails are automatically created.\n    ',
                                              'methods': [('translated_caption',
                                                           ['language_code=None'],
                                                           ''),
                                                          ('_get_filename', [], ''),
                                                          ('__unicode__', [], '')],
                                              'properties': ['category',
                                                             'picture',
                                                             'caption',
                                                             'sort',
                                                             '_filename']},
             'product.models.CategoryImageTranslation': {'bases': ['django.db.models.Model'],
                                                         'constructor': [],
                                                         'docstring': 'A specific language translation for a `CategoryImage`.  This is intended for all descriptions which are not the\n    default settings.LANGUAGE.\n    ',
                                                         'methods': [('__unicode__', [], '')],
                                                         'properties': ['categoryimage',
                                                                        'languagecode',
                                                                        'caption',
                                                                        'version',
                                                                        'active']},
             'product.models.CategoryManager': {'bases': ['django.db.models.Manager'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [('active', [], ''),
                                                            ('by_site',
                                                             ['site=None', '**kwargs'],
                                                             'Get all categories for this site'),
                                                            ('get_by_site',
                                                             ['site=None', '**kwargs'],
                                                             ''),
                                                            ('root_categories',
                                                             ['site=None', '**kwargs'],
                                                             'Get all root categories.'),
                                                            ('search_by_site',
                                                             ['keyword',
                                                              'site=None',
                                                              'include_children=False'],
                                                             'Search for categories by keyword. \n        Note, this does not return a queryset.')],
                                                'properties': []},
             'product.models.CategoryTranslation': {'bases': ['django.db.models.Model'],
                                                    'constructor': [],
                                                    'docstring': 'A specific language translation for a `Category`.  This is intended for all descriptions which are not the\n    default settings.LANGUAGE.\n    ',
                                                    'methods': [('__unicode__', [], '')],
                                                    'properties': ['category',
                                                                   'languagecode',
                                                                   'name',
                                                                   'description',
                                                                   'version',
                                                                   'active']},
             'product.models.ConfigurableProduct': {'bases': ['django.db.models.Model'],
                                                    'constructor': ['*args', '**kwargs'],
                                                    'docstring': '\n    Product with selectable options.\n    This is a sort of virtual product that is visible to the customer, but isn\'t actually stocked on a shelf,\n    the specific "shelf" product is determined by the selected options.\n    ',
                                                    'methods': [('_get_subtype', [], ''),
                                                                ('get_all_options',
                                                                 [],
                                                                 "\n        Returns all possible combinations of options for this products OptionGroups as a List of Lists.\n        Ex:\n        For OptionGroups Color and Size with Options (Blue, Green) and (Large, Small) you'll get\n        [['Blue', 'Small'], ['Blue', 'Large'], ['Green', 'Small'], ['Green', 'Large']]\n        Note: the actual values will be instances of Option instead of strings\n        "),
                                                                ('get_valid_options',
                                                                 [],
                                                                 "\n        Returns unique_ids from get_all_options(), but filters out Options that this\n        ConfigurableProduct doesn't have a ProductVariation for.\n        "),
                                                                ('create_all_variations',
                                                                 [],
                                                                 '\n        Get a list of all the optiongroups applied to this object\n        Create all combinations of the options and create variations\n        '),
                                                                ('create_variation',
                                                                 ['options',
                                                                  "name=u''",
                                                                  "sku=u''",
                                                                  "slug=u''"],
                                                                 'Create a productvariation with the specified options.\n        Will not create a duplicate.'),
                                                                ('_unique_ids_from_options',
                                                                 ['options'],
                                                                 '\n        Takes an iterable of Options (or str(Option)) and outputs a sorted tuple of\n        option unique ids suitable for comparing to a productvariation.option_values\n        '),
                                                                ('get_product_from_options',
                                                                 ['options'],
                                                                 '\n        Accepts an iterable of either Option object or a sorted tuple of\n        options ids.\n        Returns the product that matches or None\n        '),
                                                                ('get_variations_for_options',
                                                                 ['options'],
                                                                 '\n        Returns a list of existing ProductVariations with the specified options.\n        '),
                                                                ('add_template_context',
                                                                 ['context',
                                                                  'request',
                                                                  'selected_options',
                                                                  'default_view_tax=False',
                                                                  '**kwargs'],
                                                                 '\n        Add context for the product template.\n        Return the updated context.\n        '),
                                                                ('save',
                                                                 ['force_insert=False',
                                                                  'force_update=False'],
                                                                 '\n        Right now this only works if you save the suboptions, then go back and choose to create the variations.\n        '),
                                                                ('get_absolute_url', [], ''),
                                                                ('setup_variation_cache',
                                                                 [],
                                                                 ''),
                                                                ('__unicode__', [], '')],
                                                    'properties': ['product',
                                                                   'option_group',
                                                                   'create_subs',
                                                                   '_variation_cache']},
             'product.models.CustomProduct': {'bases': ['django.db.models.Model'],
                                              'constructor': [],
                                              'docstring': '\n    Product which must be custom-made or ordered.\n    ',
                                              'methods': [('_is_shippable', [], ''),
                                                          ('_get_fullPrice',
                                                           [],
                                                           '\n        returns price as a Decimal\n        '),
                                                          ('add_template_context',
                                                           ['context',
                                                            'selected_options',
                                                            '**kwargs'],
                                                           '\n        Add context for the product template.\n        Return the updated context.\n        '),
                                                          ('get_qty_price',
                                                           ['qty', 'include_discount=True'],
                                                           '\n        If QTY_DISCOUNT prices are specified, then return the appropriate discount price for\n        the specified qty.  Otherwise, return the unit_price\n        returns price as a Decimal\n        '),
                                                          ('get_full_price',
                                                           ['qty=Decimal(1)'],
                                                           '\n        Return the full price, ignoring the deposit.\n        '),
                                                          ('_get_subtype', [], ''),
                                                          ('__unicode__', [], ''),
                                                          ('get_valid_options',
                                                           [],
                                                           '\n        Returns all of the valid options\n        ')],
                                              'properties': ['product',
                                                             'downpayment',
                                                             'deferred_shipping',
                                                             'option_group',
                                                             'is_shippable',
                                                             'unit_price',
                                                             'full_price']},
             'product.models.CustomTextField': {'bases': ['django.db.models.Model'],
                                                'constructor': [],
                                                'docstring': '\n    A text field to be filled in by a customer.\n    ',
                                                'methods': [('save',
                                                             ['force_insert=False',
                                                              'force_update=False'],
                                                             ''),
                                                            ('translated_name',
                                                             ['language_code=None'],
                                                             '')],
                                                'properties': ['name',
                                                               'slug',
                                                               'products',
                                                               'sort_order',
                                                               'price_change']},
             'product.models.CustomTextFieldTranslation': {'bases': ['django.db.models.Model'],
                                                           'constructor': [],
                                                           'docstring': 'A specific language translation for a `CustomTextField`.  This is intended for all descriptions which are not the\n    default settings.LANGUAGE.\n    ',
                                                           'methods': [('__unicode__', [], '')],
                                                           'properties': ['customtextfield',
                                                                          'languagecode',
                                                                          'name',
                                                                          'version',
                                                                          'active']},
             'product.models.Discount': {'bases': ['django.db.models.Model'],
                                         'constructor': ['*args', '**kwargs'],
                                         'docstring': '\n    Allows for multiple types of discounts including % and dollar off.\n    Also allows finite number of uses.\n    ',
                                         'methods': [('__unicode__', [], ''),
                                                     ('isValid',
                                                      ['cart=None', 'contact=None'],
                                                      '\n        Make sure this discount still has available uses and is in the current date range.\n        If a cart has been populated, validate that it does apply to the products we have selected.\n        If this is a "FREECHEAP" discount, then error if the cheapest shipping hasn\'t been chosen.\n        '),
                                                     ('_valid_products', ['item_query'], ''),
                                                     ('calc', ['order'], ''),
                                                     ('save',
                                                      ['force_insert=False',
                                                       'force_update=False'],
                                                      ''),
                                                     ('_total', [], ''),
                                                     ('_item_discounts',
                                                      [],
                                                      'Get the dictionary of orderitem -> discounts.'),
                                                     ('_percentage_text',
                                                      [],
                                                      'Get the human readable form of the sale percentage.'),
                                                     ('valid_for_product',
                                                      ['product'],
                                                      'Tests if discount is valid for a single product'),
                                                     ('apply_even_split',
                                                      ['discounted', 'amount'],
                                                      ''),
                                                     ('apply_percentage',
                                                      ['discounted', 'percentage'],
                                                      '')],
                                         'properties': ['site',
                                                        'description',
                                                        'code',
                                                        'active',
                                                        'amount',
                                                        'percentage',
                                                        'automatic',
                                                        'allowedUses',
                                                        'numUses',
                                                        'minOrder',
                                                        'startDate',
                                                        'endDate',
                                                        'shipping',
                                                        'allValid',
                                                        'validProducts',
                                                        'objects',
                                                        '_calculated',
                                                        '_item_discounts',
                                                        'total',
                                                        'item_discounts',
                                                        'percentage_text',
                                                        'apply_even_split',
                                                        'apply_percentage']},
             'product.models.DiscountManager': {'bases': ['django.db.models.Manager'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [('by_code',
                                                             ['code', 'raises=False'],
                                                             ''),
                                                            ('get_sale',
                                                             [],
                                                             "Get the current 'sale' discount.")],
                                                'properties': []},
             'product.models.DownloadableProduct': {'bases': ['django.db.models.Model'],
                                                    'constructor': [],
                                                    'docstring': '\n    This type of Product is a file to be downloaded\n    ',
                                                    'methods': [('__unicode__', [], ''),
                                                                ('_get_subtype', [], ''),
                                                                ('create_key', [], ''),
                                                                ('order_success',
                                                                 ['order', 'order_item'],
                                                                 '')],
                                                    'properties': ['product',
                                                                   'file',
                                                                   'num_allowed_downloads',
                                                                   'expire_minutes',
                                                                   'active',
                                                                   'is_shippable',
                                                                   'is_downloadable']},
             'product.models.NullDiscount': {'bases': ['object'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('calc', ['*args'], ''),
                                                         ('is_valid', [], ''),
                                                         ('valid_for_product', ['product'], '')],
                                             'properties': ['description',
                                                            'total',
                                                            'item_discounts',
                                                            'discounted_prices',
                                                            'automatic']},
             'product.models.Option': {'bases': ['django.db.models.Model'],
                                       'constructor': [],
                                       'docstring': '\n    These are the actual items in an OptionGroup.  If the OptionGroup is Size, then an Option\n    would be Small.\n    ',
                                       'methods': [('translated_name',
                                                    ['language_code=None'],
                                                    ''),
                                                   ('_get_unique_id', [], ''),
                                                   ('__repr__', [], ''),
                                                   ('__unicode__', [], '')],
                                       'properties': ['objects',
                                                      'option_group',
                                                      'name',
                                                      'value',
                                                      'price_change',
                                                      'sort_order',
                                                      'unique_id']},
             'product.models.OptionGroup': {'bases': ['django.db.models.Model'],
                                            'constructor': [],
                                            'docstring': '\n    A set of options that can be applied to an item.\n    Examples - Size, Color, Shape, etc\n    ',
                                            'methods': [('translated_description',
                                                         ['language_code=None'],
                                                         ''),
                                                        ('translated_name',
                                                         ['language_code=None'],
                                                         ''),
                                                        ('__unicode__', [], '')],
                                            'properties': ['site',
                                                           'name',
                                                           'description',
                                                           'sort_order',
                                                           'objects']},
             'product.models.OptionGroupManager': {'bases': ['django.db.models.Manager'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [('get_sortmap',
                                                                [],
                                                                'Returns a dictionary mapping ids to sort order')],
                                                   'properties': []},
             'product.models.OptionGroupTranslation': {'bases': ['django.db.models.Model'],
                                                       'constructor': [],
                                                       'docstring': 'A specific language translation for an `OptionGroup`.  This is intended for all descriptions which are not the\n    default settings.LANGUAGE.\n    ',
                                                       'methods': [('__unicode__', [], '')],
                                                       'properties': ['optiongroup',
                                                                      'languagecode',
                                                                      'name',
                                                                      'description',
                                                                      'version',
                                                                      'active']},
             'product.models.OptionManager': {'bases': ['django.db.models.Manager'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('from_unique_id', ['unique_id'], '')],
                                              'properties': []},
             'product.models.OptionTranslation': {'bases': ['django.db.models.Model'],
                                                  'constructor': [],
                                                  'docstring': 'A specific language translation for an `Option`.  This is intended for all descriptions which are not the\n    default settings.LANGUAGE.\n    ',
                                                  'methods': [('__unicode__', [], '')],
                                                  'properties': ['option',
                                                                 'languagecode',
                                                                 'name',
                                                                 'version',
                                                                 'active']},
             'product.models.Price': {'bases': ['django.db.models.Model'],
                                      'constructor': [],
                                      'docstring': "\n    A Price!\n    Separating it out lets us have different prices for the same product for different purposes.\n    For example for quantity discounts.\n    The current price should be the one with the earliest expires date, and the highest quantity\n    that's still below the user specified (IE: ordered) quantity, that matches a given product.\n    ",
                                      'methods': [('__unicode__', [], ''),
                                                  ('adjustments',
                                                   [],
                                                   'Get a list of price adjustments, in the form of a PriceAdjustmentCalc object.\n        '),
                                                  ('_dynamic_price',
                                                   [],
                                                   'Get the current price as modified by all listeners.'),
                                                  ('save',
                                                   ['force_insert=False',
                                                    'force_update=False'],
                                                   '')],
                                      'properties': ['product',
                                                     'price',
                                                     'quantity',
                                                     'expires',
                                                     'dynamic_price']},
             'product.models.PriceAdjustment': {'bases': ['object'],
                                                'constructor': ['key',
                                                                'label=None',
                                                                'amount=None'],
                                                'docstring': 'A single product pricing adjustment',
                                                'methods': [('__unicode__', [], '')],
                                                'properties': ['key', 'label', 'amount']},
             'product.models.PriceAdjustmentCalc': {'bases': ['object'],
                                                    'constructor': ['price', 'product=None'],
                                                    'docstring': 'Helper class to handle adding up product pricing adjustments',
                                                    'methods': [('__add__', ['adjustment'], ''),
                                                                ('total_adjustment', [], ''),
                                                                ('_product',
                                                                 [],
                                                                 'Lazy product dereference'),
                                                                ('final_price', [], '')],
                                                    'properties': ['price',
                                                                   'base_product',
                                                                   'adjustments',
                                                                   'product']},
             'product.models.Product': {'bases': ['django.db.models.Model'],
                                        'constructor': [],
                                        'docstring': '\n    Root class for all Products\n    ',
                                        'methods': [('_get_mainCategory',
                                                     [],
                                                     'Return the first category for the product'),
                                                    ('_get_mainImage', [], ''),
                                                    ('_is_discountable', [], ''),
                                                    ('translated_attributes',
                                                     ['language_code=None'],
                                                     ''),
                                                    ('translated_description',
                                                     ['language_code=None'],
                                                     ''),
                                                    ('translated_name',
                                                     ['language_code=None'],
                                                     ''),
                                                    ('translated_short_description',
                                                     ['language_code=None'],
                                                     ''),
                                                    ('_get_fullPrice',
                                                     [],
                                                     '\n        returns price as a Decimal\n        '),
                                                    ('get_qty_price',
                                                     ['qty', 'include_discount=True'],
                                                     '\n        If QTY_DISCOUNT prices are specified, then return the appropriate discount price for\n        the specified qty.  Otherwise, return the unit_price\n        returns price as a Decimal\n        '),
                                                    ('get_qty_price_list',
                                                     [],
                                                     'Return a list of tuples (qty, price)'),
                                                    ('in_stock', [], ''),
                                                    ('_has_full_dimensions',
                                                     [],
                                                     'Return true if the dimensions all have units and values. Used in shipping calcs. '),
                                                    ('_has_full_weight',
                                                     [],
                                                     'Return True if we have weight and weight units'),
                                                    ('__unicode__', [], ''),
                                                    ('get_absolute_url', [], ''),
                                                    ('save',
                                                     ['force_insert=False',
                                                      'force_update=False'],
                                                     ''),
                                                    ('get_subtypes', [], ''),
                                                    ('get_subtype_with_attr',
                                                     ['*args'],
                                                     "Get a subtype with the specified attributes.  Note that this can be chained\n        so that you can ensure that the attribute then must have the specified attributes itself.\n\n        example:  get_subtype_with_attr('parent') = any parent\n        example:  get_subtype_with_attr('parent', 'product') = any parent which has a product attribute\n        "),
                                                    ('smart_attr',
                                                     ['attr'],
                                                     "Retrieve an attribute, or its parent's attribute if it is null or blank.\n        Ex: to get a weight.  obj.smart_attr('weight')"),
                                                    ('smart_relation',
                                                     ['relation'],
                                                     "Retrieve a relation, or its parent's relation if the relation count is 0"),
                                                    ('_has_variants', [], ''),
                                                    ('_get_category',
                                                     [],
                                                     '\n        Return the primary category associated with this product\n        '),
                                                    ('_get_downloadable',
                                                     [],
                                                     '\n        If this Product has any subtypes associated with it that are downloadable, then\n        consider it downloadable\n        '),
                                                    ('_get_subscription',
                                                     [],
                                                     '\n        If this Product has any subtypes associated with it that are subscriptions, then\n        consider it subscription based.\n        '),
                                                    ('_get_shippable',
                                                     [],
                                                     "\n        If this Product has any subtypes associated with it that are not\n        shippable, then consider the product not shippable.\n        If it is downloadable, then we don't ship it either.\n        "),
                                                    ('add_template_context',
                                                     ['context', '*args', '**kwargs'],
                                                     '\n        Add context for the product template.\n        Call the add_template_context method of each subtype and return the\n        combined context.\n        ')],
                                        'properties': ['site',
                                                       'name',
                                                       'slug',
                                                       'sku',
                                                       'short_description',
                                                       'description',
                                                       'category',
                                                       'items_in_stock',
                                                       'meta',
                                                       'date_added',
                                                       'active',
                                                       'featured',
                                                       'ordering',
                                                       'weight',
                                                       'weight_units',
                                                       'length',
                                                       'length_units',
                                                       'width',
                                                       'width_units',
                                                       'height',
                                                       'height_units',
                                                       'related_items',
                                                       'also_purchased',
                                                       'total_sold',
                                                       'taxable',
                                                       'taxClass',
                                                       'shipclass',
                                                       'objects',
                                                       'main_category',
                                                       'main_image',
                                                       'is_discountable',
                                                       'unit_price',
                                                       'has_full_dimensions',
                                                       'has_full_weight',
                                                       '_sub_types',
                                                       'has_variants',
                                                       'get_category',
                                                       'is_downloadable',
                                                       'is_subscription',
                                                       'is_shippable']},
             'product.models.ProductAttribute': {'bases': ['django.db.models.Model'],
                                                 'constructor': [],
                                                 'docstring': '\n    Allows arbitrary name/value pairs (as strings) to be attached to a product.\n    This is a very quick and dirty way to add extra info to a product.\n    If you want more structure then this, create your own subtype to add\n    whatever you want to your Products.\n    ',
                                                 'methods': [],
                                                 'properties': ['product',
                                                                'languagecode',
                                                                'name',
                                                                'value']},
             'product.models.ProductImage': {'bases': ['django.db.models.Model'],
                                             'constructor': [],
                                             'docstring': '\n    A picture of an item.  Can have many pictures associated with an item.\n    Thumbnails are automatically created.\n    ',
                                             'methods': [('translated_caption',
                                                          ['language_code=None'],
                                                          ''),
                                                         ('_get_filename', [], ''),
                                                         ('__unicode__', [], '')],
                                             'properties': ['product',
                                                            'picture',
                                                            'caption',
                                                            'sort',
                                                            '_filename']},
             'product.models.ProductImageTranslation': {'bases': ['django.db.models.Model'],
                                                        'constructor': [],
                                                        'docstring': 'A specific language translation for a `ProductImage`.  This is intended for all descriptions which are not the\n    default settings.LANGUAGE.\n    ',
                                                        'methods': [('__unicode__', [], '')],
                                                        'properties': ['productimage',
                                                                       'languagecode',
                                                                       'caption',
                                                                       'version',
                                                                       'active']},
             'product.models.ProductManager': {'bases': ['django.db.models.Manager'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('active',
                                                            ['variations=True', '**kwargs'],
                                                            ''),
                                                           ('active_by_site',
                                                            ['variations=True', '**kwargs'],
                                                            ''),
                                                           ('by_site',
                                                            ['site=None',
                                                             'variations=True',
                                                             '**kwargs'],
                                                            ''),
                                                           ('featured_by_site',
                                                            ['site=None', '**kwargs'],
                                                            ''),
                                                           ('get_by_site',
                                                            ['site=None', '**kwargs'],
                                                            ''),
                                                           ('recent_by_site', ['**kwargs'], '')],
                                               'properties': []},
             'product.models.ProductPriceLookup': {'bases': ['django.db.models.Model'],
                                                   'constructor': [],
                                                   'docstring': '\n    A denormalized object, used to quickly provide\n    details needed for productvariation display, without way too many database hits.\n    ',
                                                   'methods': [('_product', [], ''),
                                                               ('_dynamic_price',
                                                                [],
                                                                'Get the current price as modified by all listeners.')],
                                                   'properties': ['siteid',
                                                                  'key',
                                                                  'parentid',
                                                                  'productslug',
                                                                  'price',
                                                                  'quantity',
                                                                  'active',
                                                                  'discountable',
                                                                  'items_in_stock',
                                                                  'objects',
                                                                  'product',
                                                                  'dynamic_price']},
             'product.models.ProductPriceLookupManager': {'bases': ['django.db.models.Manager'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [('by_product',
                                                                       ['product'],
                                                                       ''),
                                                                      ('delete_expired',
                                                                       [],
                                                                       ''),
                                                                      ('create_for_product',
                                                                       ['product'],
                                                                       'Create a set of lookup objects for all priced quantities of the Product'),
                                                                      ('create_for_configurableproduct',
                                                                       ['configproduct'],
                                                                       'Create a set of lookup objects for all variations of this product'),
                                                                      ('create_for_variation',
                                                                       ['variation', 'parent'],
                                                                       ''),
                                                                      ('delete_for_product',
                                                                       ['product'],
                                                                       ''),
                                                                      ('rebuild_all',
                                                                       ['site=None'],
                                                                       ''),
                                                                      ('smart_create_for_product',
                                                                       ['product'],
                                                                       '')],
                                                          'properties': []},
             'product.models.ProductTranslation': {'bases': ['django.db.models.Model'],
                                                   'constructor': [],
                                                   'docstring': 'A specific language translation for a `Product`.  This is intended for all descriptions which are not the\n    default settings.LANGUAGE.\n    ',
                                                   'methods': [('__unicode__', [], '')],
                                                   'properties': ['product',
                                                                  'languagecode',
                                                                  'name',
                                                                  'description',
                                                                  'short_description',
                                                                  'version',
                                                                  'active']},
             'product.models.ProductVariation': {'bases': ['django.db.models.Model'],
                                                 'constructor': [],
                                                 'docstring': '\n    This is the real Product that is ordered when a customer orders a\n    ConfigurableProduct with the matching Options selected\n\n    ',
                                                 'methods': [('_get_fullPrice',
                                                              [],
                                                              ' Get price based on parent ConfigurableProduct '),
                                                             ('_get_optionName',
                                                              [],
                                                              'Returns the options in a human readable form'),
                                                             ('_optionkey', [], ''),
                                                             ('_get_option_ids',
                                                              [],
                                                              '\n        Return a sorted tuple of all the valid options for this variant.\n        '),
                                                             ('_get_subtype', [], ''),
                                                             ('_has_variants', [], ''),
                                                             ('_get_category',
                                                              [],
                                                              '\n        Return the primary category associated with this product\n        '),
                                                             ('_check_optionParents', [], ''),
                                                             ('get_qty_price',
                                                              ['qty', 'include_discount=True'],
                                                              ''),
                                                             ('get_qty_price_list',
                                                              [],
                                                              'Return a list of tuples (qty, price)'),
                                                             ('_is_shippable', [], ''),
                                                             ('isValidOption',
                                                              ['field_data', 'all_data'],
                                                              ''),
                                                             ('price_delta',
                                                              ['include_discount=True'],
                                                              ''),
                                                             ('save',
                                                              ['force_insert=False',
                                                               'force_update=False'],
                                                              ''),
                                                             ('_set_name', ['name'], ''),
                                                             ('_get_name', [], ''),
                                                             ('_set_sku', ['sku'], ''),
                                                             ('_get_sku', [], ''),
                                                             ('get_absolute_url', [], ''),
                                                             ('__unicode__', [], '')],
                                                 'properties': ['product',
                                                                'options',
                                                                'parent',
                                                                'objects',
                                                                'unit_price',
                                                                'full_name',
                                                                'optionkey',
                                                                'unique_option_ids',
                                                                'has_variants',
                                                                'get_category',
                                                                'is_shippable',
                                                                'name',
                                                                'sku']},
             'product.models.ProductVariationManager': {'bases': ['django.db.models.Manager'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('by_parent',
                                                                     ['parent'],
                                                                     'Get the list of productvariations which have the `product` as the parent')],
                                                        'properties': []},
             'product.models.SubscriptionProduct': {'bases': ['django.db.models.Model'],
                                                    'constructor': [],
                                                    'docstring': '\n    This type of Product is for recurring billing (memberships, subscriptions, payment terms)\n    ',
                                                    'methods': [('_get_subtype', [], ''),
                                                                ('__unicode__', [], ''),
                                                                ('_get_fullPrice',
                                                                 [],
                                                                 '\n        returns price as a Decimal\n        '),
                                                                ('get_qty_price',
                                                                 ['qty',
                                                                  'show_trial=True',
                                                                  'include_discount=True'],
                                                                 "\n        If QTY_DISCOUNT prices are specified, then return the appropriate discount price for\n        the specified qty.  Otherwise, return the unit_price\n        returns price as a Decimal\n        \n        Note: If a subscription has a trial, then we'll return the first trial price, otherwise the checkout won't\n        balance and it will look like there are items to be paid on the order.\n        "),
                                                                ('recurring_price',
                                                                 [],
                                                                 '\n        Get the non-trial price.\n        '),
                                                                ('get_trial_terms',
                                                                 ['trial=None'],
                                                                 'Get the trial terms for this subscription'),
                                                                ('calc_expire_date',
                                                                 ['date=None'],
                                                                 '')],
                                                    'properties': ['product',
                                                                   'recurring',
                                                                   'recurring_times',
                                                                   'expire_length',
                                                                   'SUBSCRIPTION_UNITS',
                                                                   'expire_unit',
                                                                   'SHIPPING_CHOICES',
                                                                   'is_shippable',
                                                                   'is_subscription',
                                                                   'unit_price']},
             'product.models.TaxClass': {'bases': ['django.db.models.Model'],
                                         'constructor': [],
                                         'docstring': '\n    Type of tax that can be applied to a product.  Tax\n    might vary based on the type of product.  In the US, clothing could be\n    taxed at a different rate than food items.\n    ',
                                         'methods': [('__unicode__', [], '')],
                                         'properties': ['title', 'description']},
             'product.models.Trial': {'bases': ['django.db.models.Model'],
                                      'constructor': [],
                                      'docstring': '\n    Trial billing terms for subscription products.\n    Separating it out lets us have as many trial periods as we want.\n    Note that some third party payment processors support only a limited number of trial\n    billing periods.  For example, PayPal limits us to 2 trial periods, so if you are using\n    PayPal for a billing option, you need to create no more than 2 trial periods for your\n    product.  However, gateway based processors like Authorize.net can support as many\n    billing periods as you wish.\n    ',
                                      'methods': [('__unicode__', [], ''),
                                                  ('_occurrences', [], ''),
                                                  ('calc_expire_date', ['date=None'], '')],
                                      'properties': ['subscription',
                                                     'price',
                                                     'expire_length',
                                                     'occurrences']},
             'product.tests.CalcFunctionTest': {'bases': ['django.test.TestCase'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [('testEvenSplit1',
                                                             [],
                                                             'Simple split test'),
                                                            ('testEvenSplitTooMuch',
                                                             [],
                                                             'Test when amount is greater than total'),
                                                            ('testEvenSplitEqual',
                                                             [],
                                                             'Test when amount is exactly equal'),
                                                            ('testEvenSplitOneTooSmall',
                                                             [],
                                                             'Test when one of the items is maxed, but others are OK'),
                                                            ('testThirds', [], ''),
                                                            ('testThirdsUneven', [], ''),
                                                            ('testPercentage1', [], '')],
                                                'properties': []},
             'product.tests.CategoryTest': {'bases': ['django.test.TestCase'],
                                            'constructor': [],
                                            'docstring': '\n    Run some category tests on urls\n    ',
                                            'methods': [('setUp', [], ''), ('tearDown', [], '')],
                                            'properties': ['site']},
             'product.tests.ConfigurableProductTest': {'bases': ['django.test.TestCase'],
                                                       'constructor': [],
                                                       'docstring': 'Test ConfigurableProduct.',
                                                       'methods': [('tearDown', [], ''),
                                                                   ('test_get_variations_for_options',
                                                                    [],
                                                                    '')],
                                                       'properties': ['fixtures']},
             'product.tests.DiscountTest': {'bases': ['django.test.TestCase'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('setUp', [], ''),
                                                        ('tearDown', [], ''),
                                                        ('testValid', [], ''),
                                                        ('testFutureDate',
                                                         [],
                                                         'Test a future date for discount start'),
                                                        ('testPastDate',
                                                         [],
                                                         'Test an expired discount'),
                                                        ('testNotActive',
                                                         [],
                                                         'Not active should always be invalid.')],
                                            'properties': ['site', 'discount']},
             'product.tests.OptionGroupTest': {'bases': ['django.test.TestCase'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('setUp', [], ''),
                                                           ('testUniqueTogether',
                                                            [],
                                                            "You can't have two options with the same value in an option group"),
                                                           ('testValues', [], ''),
                                                           ('testConfigurable',
                                                            [],
                                                            'Create a configurable product, testing ordering and price'),
                                                           ('testConfigurableSlugs',
                                                            [],
                                                            "Create a product with a slug that could conflict with an \n        automatically generated product's slug.")],
                                               'properties': ['site',
                                                              'sizes',
                                                              'option_small',
                                                              'option_large',
                                                              'colors',
                                                              'option_black',
                                                              'option_white']},
             'product.tests.OptionUtilsTest': {'bases': ['django.test.TestCase'],
                                               'constructor': [],
                                               'docstring': 'Test the utilities used for serialization of options and selected option details.',
                                               'methods': [('test_base_sort_order', [], ''),
                                                           ('test_reordered', [], '')],
                                               'properties': ['fixtures']},
             'product.tests.PriceAdjustmentTest': {'bases': ['django.test.TestCase'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [('setUp', [], ''),
                                                               ('tearDown', [], ''),
                                                               ('test_basic', [], ''),
                                                               ('test_product_adjustments',
                                                                [],
                                                                '')],
                                                   'properties': ['fixtures',
                                                                  'product',
                                                                  'price']},
             'product.tests.ProductExportTest': {'bases': ['django.test.TestCase'],
                                                 'constructor': [],
                                                 'docstring': '\n    Test product export functionality.\n    ',
                                                 'methods': [('setUp', [], ''),
                                                             ('tearDown', [], ''),
                                                             ('test_text_export',
                                                              [],
                                                              '\n        Test the content type of an exported text file.\n        '),
                                                             ('test_zip_export_content_type',
                                                              [],
                                                              '\n        Test the content type of an exported zip file.\n        '),
                                                             ('test_unicode',
                                                              [],
                                                              "Test the ProductExportForm behavior\n        Specifically, we're checking that a unicode 'format' is converted to ascii\n        in the 'export' method of 'ProductExportForm'.")],
                                                 'properties': []},
             'product.tests.ProductTest': {'bases': ['django.test.TestCase'],
                                           'constructor': [],
                                           'docstring': 'Test Product functions',
                                           'methods': [('tearDown', [], ''),
                                                       ('test_quantity_price_standard_product',
                                                        [],
                                                        'Check quantity price for a standard product'),
                                                       ('test_discount_qty_price',
                                                        [],
                                                        'Test quantity price discounts'),
                                                       ('test_expiring_price',
                                                        [],
                                                        'Test whether a price with an expiration date is used in preference to a non-expiring price.'),
                                                       ('test_quantity_price_productvariation',
                                                        [],
                                                        'Check quantity price for a productvariation'),
                                                       ('test_quantity_price_productvariation_expiring',
                                                        [],
                                                        'Check expiring quantity price for a productvariation'),
                                                       ('test_smart_attr', [], '')],
                                           'properties': ['fixtures']},
             'satchmo_ext.brand.admin.BrandCategoryInline': {'bases': ['django.contrib.admin.TabularInline'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [],
                                                             'properties': ['model',
                                                                            'extra',
                                                                            'verbose_name',
                                                                            'verbose_name_plural']},
             'satchmo_ext.brand.admin.BrandCategoryOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [],
                                                              'properties': ['inlines']},
             'satchmo_ext.brand.admin.BrandCategoryTranslationOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                                         'constructor': [],
                                                                         'docstring': '',
                                                                         'methods': [],
                                                                         'properties': ['fieldsets']},
             'satchmo_ext.brand.admin.BrandCategoryTranslation_Inline': {'bases': ['django.contrib.admin.StackedInline'],
                                                                         'constructor': [],
                                                                         'docstring': '',
                                                                         'methods': [],
                                                                         'properties': ['model',
                                                                                        'extra',
                                                                                        'verbose_name',
                                                                                        'verbose_name_plural',
                                                                                        'formfield_overrides']},
             'satchmo_ext.brand.admin.BrandOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [],
                                                      'properties': ['inlines']},
             'satchmo_ext.brand.admin.BrandProductInline': {'bases': ['django.contrib.admin.TabularInline'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [],
                                                            'properties': ['model',
                                                                           'max_num',
                                                                           'verbose_name',
                                                                           'verbose_name_plural']},
             'satchmo_ext.brand.admin.BrandTranslationOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [],
                                                                 'properties': ['fieldsets']},
             'satchmo_ext.brand.admin.BrandTranslation_Inline': {'bases': ['django.contrib.admin.StackedInline'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [],
                                                                 'properties': ['model',
                                                                                'extra',
                                                                                'verbose_name',
                                                                                'verbose_name_plural',
                                                                                'formfield_overrides']},
             'satchmo_ext.brand.models.Brand': {'bases': ['django.db.models.Model',
                                                          'l10n.mixins.TranslatedObjectMixin'],
                                                'constructor': [],
                                                'docstring': 'A product brand',
                                                'methods': [('_active_categories', [], ''),
                                                            ('_translation', [], ''),
                                                            ('_get_absolute_url', [], ''),
                                                            ('active_products', [], ''),
                                                            ('has_categories', [], ''),
                                                            ('has_content', [], ''),
                                                            ('has_products', [], ''),
                                                            ('__unicode__', [], '')],
                                                'properties': ['site',
                                                               'slug',
                                                               'products',
                                                               'ordering',
                                                               'active',
                                                               'objects',
                                                               'active_categories',
                                                               'translation',
                                                               'get_absolute_url']},
             'satchmo_ext.brand.models.BrandCategory': {'bases': ['django.db.models.Model',
                                                                  'l10n.mixins.TranslatedObjectMixin'],
                                                        'constructor': [],
                                                        'docstring': 'A category within a brand',
                                                        'methods': [('_translation', [], ''),
                                                                    ('_get_absolute_url',
                                                                     [],
                                                                     ''),
                                                                    ('active_products', [], ''),
                                                                    ('has_categories', [], ''),
                                                                    ('has_content', [], ''),
                                                                    ('has_products', [], ''),
                                                                    ('__unicode__', [], '')],
                                                        'properties': ['slug',
                                                                       'brand',
                                                                       'products',
                                                                       'ordering',
                                                                       'active',
                                                                       'objects',
                                                                       'translation',
                                                                       'get_absolute_url']},
             'satchmo_ext.brand.models.BrandCategoryManager': {'bases': ['django.db.models.Manager'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [('by_slug',
                                                                            ['brandname',
                                                                             'slug'],
                                                                            '')],
                                                               'properties': []},
             'satchmo_ext.brand.models.BrandCategoryProduct': {'bases': ['django.db.models.Model'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [],
                                                               'properties': ['brandcategory',
                                                                              'product']},
             'satchmo_ext.brand.models.BrandCategoryTranslation': {'bases': ['django.db.models.Model'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [('_get_filename',
                                                                                [],
                                                                                '')],
                                                                   'properties': ['brandcategory',
                                                                                  'languagecode',
                                                                                  'name',
                                                                                  'short_description',
                                                                                  'description',
                                                                                  'picture',
                                                                                  '_filename']},
             'satchmo_ext.brand.models.BrandManager': {'bases': ['django.db.models.Manager'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('active',
                                                                    ['site=None'],
                                                                    ''),
                                                                   ('by_slug', ['slug'], '')],
                                                       'properties': []},
             'satchmo_ext.brand.models.BrandProduct': {'bases': ['django.db.models.Model'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [],
                                                       'properties': ['brand', 'product']},
             'satchmo_ext.brand.models.BrandTranslation': {'bases': ['django.db.models.Model'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [('_get_filename',
                                                                        [],
                                                                        '')],
                                                           'properties': ['brand',
                                                                          'languagecode',
                                                                          'name',
                                                                          'short_description',
                                                                          'description',
                                                                          'picture',
                                                                          '_filename']},
             'satchmo_ext.brand.templatetags.satchmo_brands.BrandListNode': {'bases': ['django.template.Node'],
                                                                             'constructor': ['var',
                                                                                             'nodelist'],
                                                                             'docstring': 'Template Node tag which pushes the brand list into the context',
                                                                             'methods': [('render',
                                                                                          ['context'],
                                                                                          '')],
                                                                             'properties': ['var',
                                                                                            'nodelist']},
             'satchmo_ext.metrics.logger.LogMiddleware': {'bases': ['object'],
                                                          'constructor': [],
                                                          'docstring': '\n    This middleware setups a cache to store information on which items are\n    viewed.\n    ',
                                                          'methods': [('process_view',
                                                                       ['request',
                                                                        'view_func',
                                                                        'view_args',
                                                                        'view_kwargs'],
                                                                       '')],
                                                          'properties': []},
             'satchmo_ext.newsletter.admin.SubscriptionAttributeInline': {'bases': ['django.contrib.admin.TabularInline'],
                                                                          'constructor': [],
                                                                          'docstring': '',
                                                                          'methods': [],
                                                                          'properties': ['model',
                                                                                         'extra']},
             'satchmo_ext.newsletter.admin.SubscriptionOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [],
                                                                  'properties': ['list_display',
                                                                                 'list_filter',
                                                                                 'inlines']},
             'satchmo_ext.newsletter.forms.NewsletterForm': {'bases': ['django.forms.Form'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [('get_contact',
                                                                          [],
                                                                          ''),
                                                                         ('save',
                                                                          ['state=_NOTSET',
                                                                           'attributes={}'],
                                                                          '')],
                                                             'properties': ['full_name',
                                                                            'email',
                                                                            'subscribed']},
             'satchmo_ext.newsletter.forms.OptionalBoolean': {'bases': ['django.forms.BooleanField'],
                                                              'constructor': ['*args',
                                                                              '**kwargs'],
                                                              'docstring': '',
                                                              'methods': [],
                                                              'properties': ['required']},
             'satchmo_ext.newsletter.mailman.UserDesc': {'bases': [],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [],
                                                         'properties': []},
             'satchmo_ext.newsletter.models.NullContact': {'bases': ['object'],
                                                           'constructor': ['full_name', 'email'],
                                                           'docstring': "Simple object emulating a Contact, so that we can add users who aren't Satchmo Contacts.\n\n    Note, this is *not* a Django object, and is not saved to the DB, only to the subscription lists.\n    ",
                                                           'methods': [],
                                                           'properties': ['full_name', 'email']},
             'satchmo_ext.newsletter.models.Subscription': {'bases': ['django.db.models.Model'],
                                                            'constructor': [],
                                                            'docstring': 'A newsletter subscription.',
                                                            'methods': [('email_is_subscribed',
                                                                         ['email'],
                                                                         ''),
                                                                        ('__unicode__', [], ''),
                                                                        ('__repr__', [], ''),
                                                                        ('attribute_value',
                                                                         ['name',
                                                                          'value=_NOTSET'],
                                                                         'Get a value from an attribute.'),
                                                                        ('save',
                                                                         ['force_insert=False',
                                                                          'force_update=False'],
                                                                         ''),
                                                                        ('update_attribute',
                                                                         ['name', 'value'],
                                                                         'Update or create a `SubscriptionAttribute` object with the passed `name` and `value`.'),
                                                                        ('update_attributes',
                                                                         ['attributes'],
                                                                         'Update `SubscriptionAttribute` objects from a dictionary of name val mappings.')],
                                                            'properties': ['subscribed',
                                                                           'email',
                                                                           'create_date',
                                                                           'update_date',
                                                                           'email_is_subscribed']},
             'satchmo_ext.newsletter.models.SubscriptionAttribute': {'bases': ['django.db.models.Model'],
                                                                     'constructor': [],
                                                                     'docstring': '\n    Allows arbitrary name/value pairs (as strings) to be attached to a subscription.\n    ',
                                                                     'methods': [],
                                                                     'properties': ['subscription',
                                                                                    'name',
                                                                                    'value']},
             'satchmo_ext.newsletter.tests.NewsletterTest': {'bases': ['django.test.TestCase'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [('setUp', [], ''),
                                                                         ('tearDown', [], ''),
                                                                         ('testNewIsUnsubscribed',
                                                                          [],
                                                                          ''),
                                                                         ('testExplicitUnsubscribed',
                                                                          [],
                                                                          ''),
                                                                         ('testExplicitSubscribed',
                                                                          [],
                                                                          ''),
                                                                         ('testSetReset',
                                                                          [],
                                                                          ''),
                                                                         ('testAttributeSetting',
                                                                          [],
                                                                          '')],
                                                             'properties': []},
             'satchmo_ext.newsletter.tests.NewsletterTestViews': {'bases': ['django.test.TestCase'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [('setUp', [], ''),
                                                                              ('tearDown',
                                                                               [],
                                                                               ''),
                                                                              ('testNewIsSubscribed',
                                                                               [],
                                                                               ''),
                                                                              ('testNewIsUnsubscribed',
                                                                               [],
                                                                               '')],
                                                                  'properties': ['fixtures',
                                                                                 'client']},
             'satchmo_ext.product_feeds.tests.GoogleBaseTest': {'bases': ['django.test.TestCase'],
                                                                'constructor': [],
                                                                'docstring': 'Test Google Base feed.',
                                                                'methods': [('tearDown',
                                                                             [],
                                                                             ''),
                                                                            ('test_feed',
                                                                             [],
                                                                             '')],
                                                                'properties': ['fixtures']},
             'satchmo_ext.productratings.models.ProductRating': {'bases': ['django.db.models.Model'],
                                                                 'constructor': [],
                                                                 'docstring': 'A rating attached to a comment',
                                                                 'methods': [],
                                                                 'properties': ['comment',
                                                                                'rating']},
             'satchmo_ext.recentlist.middleware.RecentProductMiddleware': {'bases': ['object'],
                                                                           'constructor': [],
                                                                           'docstring': 'Remember recent products',
                                                                           'methods': [('process_response',
                                                                                        ['request',
                                                                                         'response'],
                                                                                        '')],
                                                                           'properties': []},
             'satchmo_ext.tieredpricing.admin.PricingTierOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [],
                                                                    'properties': []},
             'satchmo_ext.tieredpricing.admin.TieredPriceInline': {'bases': ['django.contrib.admin.TabularInline'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [],
                                                                   'properties': ['model',
                                                                                  'extra',
                                                                                  'verbose_name',
                                                                                  'verbose_name_plural']},
             'satchmo_ext.tieredpricing.models.PricingTier': {'bases': ['django.db.models.Model'],
                                                              'constructor': [],
                                                              'docstring': 'A specific pricing tier, such as "trade customers"\n    ',
                                                              'methods': [('__unicode__',
                                                                           [],
                                                                           '')],
                                                              'properties': ['group',
                                                                             'title',
                                                                             'discount_percent',
                                                                             'objects']},
             'satchmo_ext.tieredpricing.models.PricingTierManager': {'bases': ['django.db.models.Manager'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [('by_user',
                                                                                  ['user'],
                                                                                  'Get the pricing tiers for a user')],
                                                                     'properties': []},
             'satchmo_ext.tieredpricing.models.TieredPrice': {'bases': ['django.db.models.Model'],
                                                              'constructor': [],
                                                              'docstring': '\n    A Price which applies only to special tiers.\n    ',
                                                              'methods': [('_dynamic_price',
                                                                           [],
                                                                           'Get the current price as modified by all listeners.'),
                                                                          ('save',
                                                                           ['force_insert=False',
                                                                            'force_update=False'],
                                                                           '')],
                                                              'properties': ['pricingtier',
                                                                             'product',
                                                                             'price',
                                                                             'quantity',
                                                                             'expires',
                                                                             'objects',
                                                                             'dynamic_price']},
             'satchmo_ext.tieredpricing.models.TieredPriceManager': {'bases': ['django.db.models.Manager'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [('by_product_qty',
                                                                                  ['tier',
                                                                                   'product',
                                                                                   'qty=Decimal(1)'],
                                                                                  'Get the tiered price for the specified product and quantity.')],
                                                                     'properties': []},
             'satchmo_ext.tieredpricing.tests.TieredTest': {'bases': ['django.test.TestCase'],
                                                            'constructor': [],
                                                            'docstring': 'Test Tiered Pricing',
                                                            'methods': [('setUp', [], ''),
                                                                        ('tearDown', [], ''),
                                                                        ('test_simple_tier',
                                                                         [],
                                                                         'Check quantity price for a standard product using the default price'),
                                                                        ('test_tiered_user',
                                                                         [],
                                                                         'Test that a tiered user gets the tiered price'),
                                                                        ('test_no_tier_user',
                                                                         [],
                                                                         "Check price when user doesn't have a tier"),
                                                                        ('test_tieredprice',
                                                                         [],
                                                                         'Test setting an explicit tieredprice on a product'),
                                                                        ('test_tieredprice_no_tier_user',
                                                                         [],
                                                                         'Test setting an explicit tieredprice on a product, but no tier for user')],
                                                            'properties': ['fixtures',
                                                                           'tieruser',
                                                                           'stduser',
                                                                           'tier']},
             'satchmo_ext.upsell.admin.UpsellOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [],
                                                        'properties': ['fieldsets',
                                                                       'inlines',
                                                                       'filter_horizontal']},
             'satchmo_ext.upsell.admin.UpsellTranslation_Inline': {'bases': ['django.contrib.admin.TabularInline'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [],
                                                                   'properties': ['model',
                                                                                  'extra']},
             'satchmo_ext.upsell.models.Upsell': {'bases': ['django.db.models.Model',
                                                            'keyedcache.models.CachedObjectMixin'],
                                                  'constructor': [],
                                                  'docstring': '',
                                                  'methods': [('_description',
                                                               [],
                                                               'Get the description, looking up by language code, falling back intelligently.\n        '),
                                                              ('_find_translation',
                                                               ['language_code'],
                                                               ''),
                                                              ('is_form',
                                                               [],
                                                               'Returns true if the style is a FORM'),
                                                              ('is_qty_one',
                                                               [],
                                                               "Returns true if this style has a '1' in the center field"),
                                                              ('is_checked',
                                                               [],
                                                               'Returns true if this style ends with TRUE'),
                                                              ('__unicode__', [], ''),
                                                              ('save',
                                                               ['force_insert=False',
                                                                'force_update=False'],
                                                               '')],
                                                  'properties': ['target',
                                                                 'goal',
                                                                 'create_date',
                                                                 'style',
                                                                 'notes',
                                                                 'description']},
             'satchmo_ext.upsell.models.UpsellTranslation': {'bases': ['django.db.models.Model'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [],
                                                             'properties': ['menu',
                                                                            'languagecode',
                                                                            'description']},
             'satchmo_ext.wishlist.admin.ProductWishOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [],
                                                               'properties': ['list_display',
                                                                              'ordering']},
             'satchmo_ext.wishlist.models.ProductWish': {'bases': ['django.db.models.Model'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('set_details',
                                                                      ['raw'],
                                                                      'Set the details from a raw list'),
                                                                     ('get_details',
                                                                      [],
                                                                      'Convert the pickled details into a list'),
                                                                     ('save',
                                                                      ['force_insert=False',
                                                                       'force_update=False'],
                                                                      'Ensure we have a create_date before saving the first time.')],
                                                         'properties': ['contact',
                                                                        'product',
                                                                        '_details',
                                                                        'create_date',
                                                                        'objects',
                                                                        'details']},
             'satchmo_ext.wishlist.models.ProductWishManager': {'bases': ['django.db.models.Manager'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [('create_if_new',
                                                                             ['product',
                                                                              'contact',
                                                                              'details'],
                                                                             '')],
                                                                'properties': []},
             'satchmo_ext.wishlist.tests.WishTest': {'bases': ['django.test.TestCase'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('setUp', [], ''),
                                                                 ('tearDown', [], ''),
                                                                 ('test_main_page',
                                                                  [],
                                                                  '\n        Look at the main page\n        '),
                                                                 ('test_wish_adding_not_logged_in',
                                                                  [],
                                                                  "\n        Validate we can't add unless we are logged in.\n        ")],
                                                     'properties': ['fixtures', 'client']},
             'satchmo_ext.wishlist.tests.WishTestLoggedIn': {'bases': ['django.test.TestCase'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [('setUp', [], ''),
                                                                         ('tearDown', [], ''),
                                                                         ('test_wish_adding',
                                                                          [],
                                                                          '\n        Validate we can add some items to the wishlist\n        '),
                                                                         ('test_wish_removing',
                                                                          [],
                                                                          '\n        Validate that we can remove wishlist items\n        '),
                                                                         ('test_wish_to_cart',
                                                                          [],
                                                                          '\n        Validate that we can move an item to the cart\n        ')],
                                                             'properties': ['fixtures',
                                                                            'client',
                                                                            'contact']},
             'satchmo_store.accounts.email-auth.EmailBackend': {'bases': ['django.contrib.auth.backends.ModelBackend'],
                                                                'constructor': [],
                                                                'docstring': 'Authenticate using email only',
                                                                'methods': [('authenticate',
                                                                             ['username=None',
                                                                              'password=None'],
                                                                             '')],
                                                                'properties': []},
             'satchmo_store.accounts.forms.EmailAuthenticationForm': {'bases': ['django.contrib.auth.forms.AuthenticationForm'],
                                                                      'constructor': ['*args',
                                                                                      '**kwargs'],
                                                                      'docstring': 'Authentication form with a longer username field.',
                                                                      'methods': [],
                                                                      'properties': []},
             'satchmo_store.accounts.forms.RegistrationAddressForm': {'bases': ['satchmo_store.accounts.forms.RegistrationForm',
                                                                                'satchmo_store.contact.forms.ContactInfoForm'],
                                                                      'constructor': ['*args',
                                                                                      '**kwargs'],
                                                                      'docstring': 'Registration form which also requires address information.',
                                                                      'methods': [('save',
                                                                                   ['request=None',
                                                                                    '**kwargs'],
                                                                                   '')],
                                                                      'properties': []},
             'satchmo_store.accounts.forms.RegistrationForm': {'bases': ['django.forms.Form'],
                                                               'constructor': ['*args',
                                                                               '**kwargs'],
                                                               'docstring': 'The basic account registration form.',
                                                               'methods': [('clean_password1',
                                                                            [],
                                                                            'Enforce that password and password2 are the same.'),
                                                                           ('clean_email',
                                                                            [],
                                                                            'Prevent account hijacking by disallowing duplicate emails.'),
                                                                           ('save',
                                                                            ['request=None',
                                                                             '**kwargs'],
                                                                            'Create the contact and user described on the form.  Returns the\n        `contact`.\n        '),
                                                                           ('save_contact',
                                                                            ['request'],
                                                                            '')],
                                                               'properties': ['title',
                                                                              'email',
                                                                              'password2',
                                                                              'password1',
                                                                              'first_name',
                                                                              'last_name',
                                                                              'next',
                                                                              'contact',
                                                                              'newsletter']},
             'satchmo_store.contact.admin.AddressBook_Inline': {'bases': ['django.contrib.admin.StackedInline'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [],
                                                                'properties': ['model', 'extra']},
             'satchmo_store.contact.admin.ContactInteractionTypeOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                                           'constructor': [],
                                                                           'docstring': '',
                                                                           'methods': [],
                                                                           'properties': []},
             'satchmo_store.contact.admin.ContactOptions': {'bases': ['satchmo_utils.admin.AutocompleteAdmin'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [],
                                                            'properties': ['list_display',
                                                                           'list_filter',
                                                                           'ordering',
                                                                           'search_fields',
                                                                           'related_search_fields',
                                                                           'related_string_functions',
                                                                           'inlines']},
             'satchmo_store.contact.admin.ContactOrganizationOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                                        'constructor': [],
                                                                        'docstring': '',
                                                                        'methods': [],
                                                                        'properties': []},
             'satchmo_store.contact.admin.ContactOrganizationRoleOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                                            'constructor': [],
                                                                            'docstring': '',
                                                                            'methods': [],
                                                                            'properties': []},
             'satchmo_store.contact.admin.ContactRoleOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [],
                                                                'properties': []},
             'satchmo_store.contact.admin.Contact_Inline': {'bases': ['django.contrib.admin.TabularInline'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [],
                                                            'properties': ['model', 'extra']},
             'satchmo_store.contact.admin.InteractionOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [],
                                                                'properties': ['list_filter']},
             'satchmo_store.contact.admin.OrganizationOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [],
                                                                 'properties': ['list_filter',
                                                                                'list_display']},
             'satchmo_store.contact.admin.PhoneNumber_Inline': {'bases': ['django.contrib.admin.TabularInline'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [],
                                                                'properties': ['model', 'extra']},
             'satchmo_store.contact.forms.ContactInfoForm': {'bases': ['satchmo_store.contact.forms.ProxyContactForm'],
                                                             'constructor': ['*args',
                                                                             '**kwargs'],
                                                             'docstring': '',
                                                             'methods': [('_check_state',
                                                                          ['data', 'country'],
                                                                          ''),
                                                                         ('clean_email',
                                                                          [],
                                                                          'Prevent account hijacking by disallowing duplicate emails.'),
                                                                         ('clean_postal_code',
                                                                          [],
                                                                          ''),
                                                                         ('clean_state',
                                                                          [],
                                                                          ''),
                                                                         ('clean_addressee',
                                                                          [],
                                                                          ''),
                                                                         ('clean_ship_addressee',
                                                                          [],
                                                                          ''),
                                                                         ('clean_country',
                                                                          [],
                                                                          ''),
                                                                         ('clean_ship_country',
                                                                          [],
                                                                          ''),
                                                                         ('ship_charfield_clean',
                                                                          ['field_name'],
                                                                          ''),
                                                                         ('clean_ship_street1',
                                                                          [],
                                                                          ''),
                                                                         ('clean_ship_street2',
                                                                          [],
                                                                          ''),
                                                                         ('clean_ship_city',
                                                                          [],
                                                                          ''),
                                                                         ('clean_ship_postal_code',
                                                                          [],
                                                                          ''),
                                                                         ('clean_ship_state',
                                                                          [],
                                                                          ''),
                                                                         ('save',
                                                                          ['**kwargs'],
                                                                          ''),
                                                                         ('save_info',
                                                                          ['contact=None',
                                                                           '**kwargs'],
                                                                          'Save the contact info into the database.\n        Checks to see if contact exists. If not, creates a contact\n        and copies in the address and phone number.'),
                                                                         ('validate_postcode_by_country',
                                                                          ['postcode',
                                                                           'country'],
                                                                          '')],
                                                             'properties': ['email',
                                                                            'title',
                                                                            'first_name',
                                                                            'last_name',
                                                                            'phone',
                                                                            'addressee',
                                                                            'organization',
                                                                            'street1',
                                                                            'street2',
                                                                            'city',
                                                                            'state',
                                                                            'postal_code',
                                                                            'copy_address',
                                                                            'ship_addressee',
                                                                            'ship_street1',
                                                                            'ship_street2',
                                                                            'ship_city',
                                                                            'ship_state',
                                                                            'ship_postal_code',
                                                                            'next',
                                                                            '_shop',
                                                                            '_shippable',
                                                                            'required_billing_data',
                                                                            '_local_only',
                                                                            'enforce_state',
                                                                            '_default_country']},
             'satchmo_store.contact.forms.DateTextInput': {'bases': ['django.forms.TextInput'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [('render',
                                                                        ['name',
                                                                         'value',
                                                                         'attrs=None'],
                                                                        '')],
                                                           'properties': []},
             'satchmo_store.contact.forms.ExtendedContactInfoForm': {'bases': ['satchmo_store.contact.models.ContactInfoForm'],
                                                                     'constructor': [],
                                                                     'docstring': 'Contact form which includes birthday and newsletter.',
                                                                     'methods': [],
                                                                     'properties': ['years_to_display',
                                                                                    'dob',
                                                                                    'newsletter']},
             'satchmo_store.contact.forms.ProxyContactForm': {'bases': ['django.forms.Form'],
                                                              'constructor': ['*args',
                                                                              '**kwargs'],
                                                              'docstring': '',
                                                              'methods': [],
                                                              'properties': ['_contact']},
             'satchmo_store.contact.models.AddressBook': {'bases': ['django.db.models.Model'],
                                                          'constructor': [],
                                                          'docstring': '\n    Address information associated with a contact.\n    ',
                                                          'methods': [('__unicode__', [], ''),
                                                                      ('save',
                                                                       ['force_insert=False',
                                                                        'force_update=False'],
                                                                       "\n        If this address is the default billing or shipping address, then\n        remove the old address's default status. If there is no existing\n        default, then make this address the default.\n        ")],
                                                          'properties': ['contact',
                                                                         'description',
                                                                         'addressee',
                                                                         'street1',
                                                                         'street2',
                                                                         'state',
                                                                         'city',
                                                                         'postal_code',
                                                                         'country',
                                                                         'is_default_shipping',
                                                                         'is_default_billing']},
             'satchmo_store.contact.models.Contact': {'bases': ['django.db.models.Model'],
                                                      'constructor': [],
                                                      'docstring': '\n    A customer, supplier or any individual that a store owner might interact\n    with.\n    ',
                                                      'methods': [('_get_full_name',
                                                                   [],
                                                                   "Return the person's full name."),
                                                                  ('_shipping_address',
                                                                   [],
                                                                   'Return the default shipping address or None.'),
                                                                  ('_billing_address',
                                                                   [],
                                                                   'Return the default billing address or None.'),
                                                                  ('_primary_phone',
                                                                   [],
                                                                   'Return the default phone number or None.'),
                                                                  ('__unicode__', [], ''),
                                                                  ('save',
                                                                   ['force_insert=False',
                                                                    'force_update=False'],
                                                                   'Ensure we have a create_date before saving the first time.')],
                                                      'properties': ['title',
                                                                     'first_name',
                                                                     'last_name',
                                                                     'user',
                                                                     'role',
                                                                     'organization',
                                                                     'dob',
                                                                     'email',
                                                                     'notes',
                                                                     'create_date',
                                                                     'objects',
                                                                     'full_name',
                                                                     'shipping_address',
                                                                     'billing_address',
                                                                     'primary_phone']},
             'satchmo_store.contact.models.ContactInteractionType': {'bases': ['django.db.models.Model'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [('__unicode__',
                                                                                  [],
                                                                                  '')],
                                                                     'properties': ['key',
                                                                                    'name']},
             'satchmo_store.contact.models.ContactManager': {'bases': ['django.db.models.Manager'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [('from_request',
                                                                          ['request',
                                                                           'create=False'],
                                                                          'Get the contact from the session, else look up using the logged-in\n        user. Create an unsaved new contact if `create` is true.\n\n        Returns:\n        - Contact object or None\n        ')],
                                                             'properties': []},
             'satchmo_store.contact.models.ContactOrganization': {'bases': ['django.db.models.Model'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [('__unicode__',
                                                                               [],
                                                                               '')],
                                                                  'properties': ['key', 'name']},
             'satchmo_store.contact.models.ContactOrganizationRole': {'bases': ['django.db.models.Model'],
                                                                      'constructor': [],
                                                                      'docstring': '',
                                                                      'methods': [('__unicode__',
                                                                                   [],
                                                                                   '')],
                                                                      'properties': ['key',
                                                                                     'name']},
             'satchmo_store.contact.models.ContactRole': {'bases': ['django.db.models.Model'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [('__unicode__', [], '')],
                                                          'properties': ['key', 'name']},
             'satchmo_store.contact.models.Interaction': {'bases': ['django.db.models.Model'],
                                                          'constructor': [],
                                                          'docstring': '\n    A type of activity with the customer.  Useful to track emails, phone calls,\n    or in-person interactions.\n    ',
                                                          'methods': [('__unicode__', [], '')],
                                                          'properties': ['contact',
                                                                         'type',
                                                                         'date_time',
                                                                         'description']},
             'satchmo_store.contact.models.Organization': {'bases': ['django.db.models.Model'],
                                                           'constructor': [],
                                                           'docstring': '\n    An organization can be a company, government or any kind of group.\n    ',
                                                           'methods': [('__unicode__', [], ''),
                                                                       ('save',
                                                                        ['force_insert=False',
                                                                         'force_update=False'],
                                                                        'Ensure we have a create_date before saving the first time.')],
                                                           'properties': ['name',
                                                                          'type',
                                                                          'role',
                                                                          'create_date',
                                                                          'notes',
                                                                          'objects']},
             'satchmo_store.contact.models.OrganizationManager': {'bases': ['django.db.models.Manager'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [('by_name',
                                                                               ['name',
                                                                                'create=False',
                                                                                "role='Customer'",
                                                                                "orgtype='Company'"],
                                                                               '')],
                                                                  'properties': []},
             'satchmo_store.contact.models.PhoneNumber': {'bases': ['django.db.models.Model'],
                                                          'constructor': [],
                                                          'docstring': '\n    Phone number associated with a contact.\n    ',
                                                          'methods': [('__unicode__', [], ''),
                                                                      ('save',
                                                                       ['force_insert=False',
                                                                        'force_update=False'],
                                                                       '\n        If this number is the default, then make sure that it is the only\n        primary phone number. If there is no existing default, then make\n        this number the default.\n        ')],
                                                          'properties': ['contact',
                                                                         'type',
                                                                         'phone',
                                                                         'primary']},
             'satchmo_store.contact.supplier.admin.RawItemOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [],
                                                                     'properties': ['list_display',
                                                                                    'list_filter']},
             'satchmo_store.contact.supplier.admin.SupplierOrderItem_Inline': {'bases': ['django.contrib.admin.TabularInline'],
                                                                               'constructor': [],
                                                                               'docstring': '',
                                                                               'methods': [],
                                                                               'properties': ['model',
                                                                                              'extra']},
             'satchmo_store.contact.supplier.admin.SupplierOrderOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                                           'constructor': [],
                                                                           'docstring': '',
                                                                           'methods': [],
                                                                           'properties': ['list_display',
                                                                                          'list_filter',
                                                                                          'date_hierarchy',
                                                                                          'inlines']},
             'satchmo_store.contact.supplier.admin.SupplierOrderStatus_Inline': {'bases': ['django.contrib.admin.StackedInline'],
                                                                                 'constructor': [],
                                                                                 'docstring': '',
                                                                                 'methods': [],
                                                                                 'properties': ['model',
                                                                                                'extra']},
             'satchmo_store.contact.supplier.models.RawItem': {'bases': ['django.db.models.Model'],
                                                               'constructor': [],
                                                               'docstring': '\n    A raw good supplied by a supplier.  For instance, it could be a plain \n    shirt that you process to make your Item\n    ',
                                                               'methods': [('__unicode__',
                                                                            [],
                                                                            '')],
                                                               'properties': ['supplier',
                                                                              'supplier_num',
                                                                              'description',
                                                                              'unit_cost',
                                                                              'inventory']},
             'satchmo_store.contact.supplier.models.SupplierOrder': {'bases': ['django.db.models.Model'],
                                                                     'constructor': [],
                                                                     'docstring': '\n    An order the store owner places to a supplier for a raw good.\n    ',
                                                                     'methods': [('__unicode__',
                                                                                  [],
                                                                                  ''),
                                                                                 ('_status',
                                                                                  [],
                                                                                  ''),
                                                                                 ('save',
                                                                                  ['force_insert=False',
                                                                                   'force_update=False'],
                                                                                  'Ensure we have a date_created before saving the first time.')],
                                                                     'properties': ['supplier',
                                                                                    'date_created',
                                                                                    'order_sub_total',
                                                                                    'order_shipping',
                                                                                    'order_tax',
                                                                                    'order_notes',
                                                                                    'order_total',
                                                                                    'status']},
             'satchmo_store.contact.supplier.models.SupplierOrderItem': {'bases': ['django.db.models.Model'],
                                                                         'constructor': [],
                                                                         'docstring': '\n    Individual line items for an order\n    ',
                                                                         'methods': [('__unicode__',
                                                                                      [],
                                                                                      '')],
                                                                         'properties': ['order',
                                                                                        'line_item',
                                                                                        'line_item_quantity',
                                                                                        'line_item_total']},
             'satchmo_store.contact.supplier.models.SupplierOrderStatus': {'bases': ['django.db.models.Model'],
                                                                           'constructor': [],
                                                                           'docstring': "\n    Status of a supplier's order.  There will be multiple statuses as it is\n    placed and subsequently processed and received.\n    ",
                                                                           'methods': [('__unicode__',
                                                                                        [],
                                                                                        '')],
                                                                           'properties': ['order',
                                                                                          'status',
                                                                                          'notes',
                                                                                          'date']},
             'satchmo_store.contact.tests.ContactInfoFormLANGUAGETest': {'bases': ['django.test.TestCase'],
                                                                         'constructor': [],
                                                                         'docstring': '',
                                                                         'methods': [('test_company',
                                                                                      [],
                                                                                      ''),
                                                                                     ('test_country_specific_validation',
                                                                                      [],
                                                                                      '')],
                                                                         'properties': ['fixtures']},
             'satchmo_store.contact.tests.ContactInfoFormTest': {'bases': ['django.test.TestCase'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [('test_missing_first_and_last_name_should_not_raise_exception',
                                                                              [],
                                                                              '')],
                                                                 'properties': ['fixtures']},
             'satchmo_store.contact.tests.ContactTest': {'bases': ['django.test.TestCase'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('setUp', [], ''),
                                                                     ('test_base_contact',
                                                                      [],
                                                                      'Test creating a contact'),
                                                                     ('test_contact_org',
                                                                      [],
                                                                      '')],
                                                         'properties': ['fixtures', 'US']},
             'satchmo_store.shop.SSLMiddleware.SSLRedirect': {'bases': [],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [('process_view',
                                                                           ['request',
                                                                            'view_func',
                                                                            'view_args',
                                                                            'view_kwargs'],
                                                                           ''),
                                                                          ('_redirect',
                                                                           ['request',
                                                                            'secure'],
                                                                           '')],
                                                              'properties': []},
             'satchmo_store.shop.admin.CartItemDetails_Inline': {'bases': ['django.contrib.admin.StackedInline'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [],
                                                                 'properties': ['model',
                                                                                'extra']},
             'satchmo_store.shop.admin.CartItemOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [],
                                                          'properties': ['inlines']},
             'satchmo_store.shop.admin.CartItem_Inline': {'bases': ['django.contrib.admin.TabularInline'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [],
                                                          'properties': ['model', 'extra']},
             'satchmo_store.shop.admin.CartOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [],
                                                      'properties': ['list_display', 'inlines']},
             'satchmo_store.shop.admin.ConfigOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [],
                                                        'properties': ['list_display',
                                                                       'filter_horizontal',
                                                                       'fieldsets']},
             'satchmo_store.shop.admin.OrderAuthorizationDetail_Inline': {'bases': ['django.contrib.admin.TabularInline'],
                                                                          'constructor': [],
                                                                          'docstring': '',
                                                                          'methods': [],
                                                                          'properties': ['model',
                                                                                         'extra']},
             'satchmo_store.shop.admin.OrderAuthorizationOptions': {'bases': ['satchmo_store.shop.models.OrderPaymentOptions'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [],
                                                                    'properties': ['list_display',
                                                                                   'fieldsets']},
             'satchmo_store.shop.admin.OrderItemDetail_Inline': {'bases': ['django.contrib.admin.TabularInline'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [],
                                                                 'properties': ['model',
                                                                                'extra']},
             'satchmo_store.shop.admin.OrderItemOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [],
                                                           'properties': ['inlines']},
             'satchmo_store.shop.admin.OrderItem_Inline': {'bases': ['django.contrib.admin.TabularInline'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [],
                                                           'properties': ['model', 'extra']},
             'satchmo_store.shop.admin.OrderOptions': {'bases': ['satchmo_utils.admin.AutocompleteAdmin'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [],
                                                       'properties': ['fieldsets',
                                                                      'list_display',
                                                                      'list_filter',
                                                                      'date_hierarchy',
                                                                      'related_search_fields',
                                                                      'related_string_functions',
                                                                      'inlines']},
             'satchmo_store.shop.admin.OrderPaymentDetail_Inline': {'bases': ['django.contrib.admin.TabularInline'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [],
                                                                    'properties': ['model',
                                                                                   'extra']},
             'satchmo_store.shop.admin.OrderPaymentFailureDetail_Inline': {'bases': ['django.contrib.admin.TabularInline'],
                                                                           'constructor': [],
                                                                           'docstring': '',
                                                                           'methods': [],
                                                                           'properties': ['model',
                                                                                          'extra']},
             'satchmo_store.shop.admin.OrderPaymentOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [],
                                                              'properties': ['list_filter',
                                                                             'list_display',
                                                                             'fieldsets',
                                                                             'raw_id_fields']},
             'satchmo_store.shop.admin.OrderStatus_Inline': {'bases': ['django.contrib.admin.StackedInline'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [],
                                                             'properties': ['model', 'extra']},
             'satchmo_store.shop.admin.OrderTaxDetail_Inline': {'bases': ['django.contrib.admin.TabularInline'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [],
                                                                'properties': ['model', 'extra']},
             'satchmo_store.shop.admin.OrderVariable_Inline': {'bases': ['django.contrib.admin.TabularInline'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [],
                                                               'properties': ['model', 'extra']},
             'satchmo_store.shop.exceptions.CartAddProhibited': {'bases': ['Exception'],
                                                                 'constructor': ['product',
                                                                                 'message'],
                                                                 'docstring': 'Raised when a `signals.satchmo_cart_add_verify` listener vetoes adding an item to the cart.\n    \n    Params:\n    - product: item which was being added\n    - message: veto message\n    ',
                                                                 'methods': [('_get_message',
                                                                              [],
                                                                              '')],
                                                                 'properties': ['product',
                                                                                '_message',
                                                                                'message']},
             'satchmo_store.shop.exceptions.OutOfStockError': {'bases': ['satchmo_store.shop.exceptions.CartAddProhibited'],
                                                               'constructor': ['product',
                                                                               'have',
                                                                               'need'],
                                                               'docstring': '',
                                                               'methods': [],
                                                               'properties': ['have', 'need']},
             'satchmo_store.shop.forms.MultipleProductForm': {'bases': ['django.forms.Form'],
                                                              'constructor': ['*args',
                                                                              '**kwargs'],
                                                              'docstring': 'A form used to add multiple products to the cart.',
                                                              'methods': [('save',
                                                                           ['cart', 'request'],
                                                                           '')],
                                                              'properties': ['slugs']},
             'satchmo_store.shop.management.commands.delete_all_dbs.Command': {'bases': ['django.core.management.base.NoArgsCommand'],
                                                                               'constructor': [],
                                                                               'docstring': '',
                                                                               'methods': [('handle_noargs',
                                                                                            ['**options'],
                                                                                            'Delete the old database.')],
                                                                               'properties': ['help']},
             'satchmo_store.shop.management.commands.satchmo_check.Command': {'bases': ['django.core.management.base.NoArgsCommand'],
                                                                              'constructor': [],
                                                                              'docstring': '',
                                                                              'methods': [('handle_noargs',
                                                                                           ['**options'],
                                                                                           '')],
                                                                              'properties': ['help']},
             'satchmo_store.shop.management.commands.satchmo_copy_static.Command': {'bases': ['django.core.management.base.NoArgsCommand'],
                                                                                    'constructor': [],
                                                                                    'docstring': '',
                                                                                    'methods': [('handle_noargs',
                                                                                                 ['**options'],
                                                                                                 '')],
                                                                                    'properties': ['help']},
             'satchmo_store.shop.management.commands.satchmo_copy_templates.Command': {'bases': ['django.core.management.base.NoArgsCommand'],
                                                                                       'constructor': [],
                                                                                       'docstring': '',
                                                                                       'methods': [('handle_noargs',
                                                                                                    ['**options'],
                                                                                                    '')],
                                                                                       'properties': ['help']},
             'satchmo_store.shop.management.commands.satchmo_copy_urls.Command': {'bases': ['django.core.management.base.NoArgsCommand'],
                                                                                  'constructor': [],
                                                                                  'docstring': '',
                                                                                  'methods': [('handle_noargs',
                                                                                               ['**options'],
                                                                                               '')],
                                                                                  'properties': ['help']},
             'satchmo_store.shop.management.commands.satchmo_load_l10n.Command': {'bases': ['django.core.management.base.NoArgsCommand'],
                                                                                  'constructor': [],
                                                                                  'docstring': '',
                                                                                  'methods': [('handle_noargs',
                                                                                               ['**options'],
                                                                                               'Load l10n fixtures')],
                                                                                  'properties': ['help']},
             'satchmo_store.shop.management.commands.satchmo_load_store.Command': {'bases': ['django.core.management.base.NoArgsCommand'],
                                                                                   'constructor': [],
                                                                                   'docstring': '',
                                                                                   'methods': [('handle_noargs',
                                                                                                ['**options'],
                                                                                                '')],
                                                                                   'properties': ['help']},
             'satchmo_store.shop.management.commands.satchmo_load_us_tax.Command': {'bases': ['django.core.management.base.NoArgsCommand'],
                                                                                    'constructor': [],
                                                                                    'docstring': '',
                                                                                    'methods': [('handle_noargs',
                                                                                                 ['**options'],
                                                                                                 'Load l10n fixtures')],
                                                                                    'properties': ['help']},
             'satchmo_store.shop.models.Cart': {'bases': ['django.db.models.Model'],
                                                'constructor': [],
                                                'docstring': "\n    Store items currently in a cart\n    The desc isn't used but it is needed to make the admin interface work appropriately\n    Could be used for debugging\n    ",
                                                'methods': [('_get_count', [], ''),
                                                            ('_get_discount', [], ''),
                                                            ('_get_total',
                                                             ['include_discount=True'],
                                                             ''),
                                                            ('_get_undiscounted_total', [], ''),
                                                            ('__iter__', [], ''),
                                                            ('__len__', [], ''),
                                                            ('__unicode__', [], ''),
                                                            ('add_item',
                                                             ['chosen_item',
                                                              'number_added',
                                                              'details={}'],
                                                             ''),
                                                            ('remove_item',
                                                             ['chosen_item_id',
                                                              'number_removed'],
                                                             ''),
                                                            ('empty', [], ''),
                                                            ('save',
                                                             ['force_insert=False',
                                                              'force_update=False'],
                                                             'Ensure we have a date_time_created before saving the first time.'),
                                                            ('_get_shippable',
                                                             [],
                                                             'Return whether the cart contains shippable items.'),
                                                            ('get_shipment_list',
                                                             [],
                                                             'Return a list of shippable products, where each item is split into\n        multiple elements, one for each quantity.')],
                                                'properties': ['site',
                                                               'desc',
                                                               'date_time_created',
                                                               'customer',
                                                               'objects',
                                                               'numItems',
                                                               'discount',
                                                               'total',
                                                               'undiscounted_total',
                                                               'is_shippable']},
             'satchmo_store.shop.models.CartItem': {'bases': ['django.db.models.Model'],
                                                    'constructor': [],
                                                    'docstring': '\n    An individual item in the cart\n    ',
                                                    'methods': [('_get_line_unitprice',
                                                                 ['include_discount=True'],
                                                                 ''),
                                                                ('_get_undiscounted_unitprice',
                                                                 [],
                                                                 ''),
                                                                ('get_detail_price',
                                                                 [],
                                                                 'Get the delta price based on detail modifications'),
                                                                ('get_qty_price',
                                                                 ['qty',
                                                                  'include_discount=True'],
                                                                 'Get the price for for each unit before any detail modifications'),
                                                                ('_get_line_total', [], ''),
                                                                ('_get_undiscounted_line_total',
                                                                 [],
                                                                 ''),
                                                                ('_get_description', [], ''),
                                                                ('_is_shippable', [], ''),
                                                                ('add_detail', ['data'], ''),
                                                                ('_has_details',
                                                                 [],
                                                                 '\n        Determine if this specific item has more detail\n        '),
                                                                ('__unicode__', [], '')],
                                                    'properties': ['cart',
                                                                   'product',
                                                                   'quantity',
                                                                   'qty_price',
                                                                   'detail_price',
                                                                   'unit_price',
                                                                   'undiscounted_unit_price',
                                                                   'line_total',
                                                                   'undiscounted_line_total',
                                                                   'description',
                                                                   'is_shippable',
                                                                   'has_details']},
             'satchmo_store.shop.models.CartItemDetails': {'bases': ['django.db.models.Model'],
                                                           'constructor': [],
                                                           'docstring': '\n    An arbitrary detail about a cart item.\n    ',
                                                           'methods': [],
                                                           'properties': ['cartitem',
                                                                          'value',
                                                                          'name',
                                                                          'price_change',
                                                                          'sort_order']},
             'satchmo_store.shop.models.CartManager': {'bases': ['django.db.models.Manager'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('from_request',
                                                                    ['request',
                                                                     'create=False',
                                                                     'return_nullcart=True'],
                                                                    'Get the current cart from the request')],
                                                       'properties': []},
             'satchmo_store.shop.models.Config': {'bases': ['django.db.models.Model'],
                                                  'constructor': [],
                                                  'docstring': '\n    Used to store specific information about a store.  Also used to\n    configure various store behaviors\n    ',
                                                  'methods': [('_options', [], ''),
                                                              ('areas',
                                                               [],
                                                               'Get country areas (states/counties).  Used in forms.'),
                                                              ('countries',
                                                               [],
                                                               'Get country selections.  Used in forms.'),
                                                              ('_base_url',
                                                               ['secure=False'],
                                                               ''),
                                                              ('save',
                                                               ['force_insert=False',
                                                                'force_update=False'],
                                                               ''),
                                                              ('__unicode__', [], '')],
                                                  'properties': ['site',
                                                                 'store_name',
                                                                 'store_description',
                                                                 'store_email',
                                                                 'street1',
                                                                 'street2',
                                                                 'city',
                                                                 'state',
                                                                 'postal_code',
                                                                 'country',
                                                                 'phone',
                                                                 'in_country_only',
                                                                 'sales_country',
                                                                 'shipping_countries',
                                                                 'objects',
                                                                 'options',
                                                                 'base_url']},
             'satchmo_store.shop.models.ConfigManager': {'bases': ['django.db.models.Manager'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('get_current',
                                                                      ['site=None'],
                                                                      'Convenience method to get the current shop config')],
                                                         'properties': []},
             'satchmo_store.shop.models.DownloadLink': {'bases': ['django.db.models.Model'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('_attempts_left', [], ''),
                                                                    ('is_valid', [], ''),
                                                                    ('get_absolute_url',
                                                                     [],
                                                                     ''),
                                                                    ('get_full_url', [], ''),
                                                                    ('save',
                                                                     ['force_insert=False',
                                                                      'force_update=False'],
                                                                     '\n       Set the initial time stamp\n        '),
                                                                    ('__unicode__', [], ''),
                                                                    ('_product_name', [], '')],
                                                        'properties': ['downloadable_product',
                                                                       'order',
                                                                       'key',
                                                                       'num_attempts',
                                                                       'time_stamp',
                                                                       'active',
                                                                       'attempts_left',
                                                                       'get_absolute_url',
                                                                       'product_name']},
             'satchmo_store.shop.models.NullCart': {'bases': ['object'],
                                                    'constructor': [],
                                                    'docstring': "Standin for a real cart when we don't have one yet.  More convenient than testing for null all the time.",
                                                    'methods': [('add_item',
                                                                 ['*args', '**kwargs'],
                                                                 ''),
                                                                ('remove_item',
                                                                 ['*args', '**kwargs'],
                                                                 ''),
                                                                ('empty', [], ''),
                                                                ('__str__', [], ''),
                                                                ('__iter__', [], ''),
                                                                ('__len__', [], '')],
                                                    'properties': ['desc',
                                                                   'date_time_created',
                                                                   'customer',
                                                                   'total',
                                                                   'numItems']},
             'satchmo_store.shop.models.NullCartItem': {'bases': ['object'],
                                                        'constructor': ['itemid'],
                                                        'docstring': '',
                                                        'methods': [],
                                                        'properties': ['id',
                                                                       'quantity',
                                                                       'line_total']},
             'satchmo_store.shop.models.NullConfig': {'bases': ['object'],
                                                      'constructor': [],
                                                      'docstring': "Standin for a real config when we don't have one yet.",
                                                      'methods': [('_options', [], ''),
                                                                  ('__str__', [], '')],
                                                      'properties': ['store_name',
                                                                     'store_description',
                                                                     'store_email',
                                                                     'street1',
                                                                     'street2',
                                                                     'city',
                                                                     'state',
                                                                     'postal_code',
                                                                     'phone',
                                                                     'site',
                                                                     'country',
                                                                     'in_country_only',
                                                                     'sales_country',
                                                                     'options']},
             'satchmo_store.shop.models.Order': {'bases': ['django.db.models.Model'],
                                                 'constructor': [],
                                                 'docstring': '\n    Orders contain a copy of all the information at the time the order was\n    placed.\n    ',
                                                 'methods': [('__unicode__', [], ''),
                                                             ('add_status',
                                                              ['status=None', "notes=''"],
                                                              ''),
                                                             ('add_variable',
                                                              ['key', 'value'],
                                                              'Add an OrderVariable, used for misc stuff that is just too small to get its own field'),
                                                             ('_authorized_remaining', [], ''),
                                                             ('get_variable',
                                                              ['key', 'default=None'],
                                                              ''),
                                                             ('copy_addresses',
                                                              [],
                                                              '\n        Copy the addresses so we know what the information was at time of order.\n        '),
                                                             ('remove_all_items',
                                                              [],
                                                              'Delete all items belonging to this order.'),
                                                             ('_balance', [], ''),
                                                             ('balance_forward', [], ''),
                                                             ('_balance_paid', [], ''),
                                                             ('_credit_card',
                                                              [],
                                                              'Return the credit card associated with this payment.'),
                                                             ('_full_bill_street',
                                                              ["delim='\\n'"],
                                                              '\n        Return both billing street entries separated by delim.\n        Note - Use linebreaksbr filter to convert to html in templates.\n        '),
                                                             ('_full_ship_street',
                                                              ["delim='\\n'"],
                                                              '\n        Return both shipping street entries separated by delim.\n        Note - Use linebreaksbr filterto convert to html in templates.\n        '),
                                                             ('_ship_country_name', [], ''),
                                                             ('_bill_country_name', [], ''),
                                                             ('_discounted_sub_total', [], ''),
                                                             ('_get_balance_remaining_url',
                                                              [],
                                                              ''),
                                                             ('_partially_paid', [], ''),
                                                             ('_is_partially_paid', [], ''),
                                                             ('payments_completed', [], ''),
                                                             ('save',
                                                              ['force_insert=False',
                                                               'force_update=False'],
                                                              '\n        Copy addresses from contact. If the order has just been created, set\n        the create_date.\n        '),
                                                             ('invoice', [], ''),
                                                             ('_item_discount',
                                                              [],
                                                              'Get the discount of just the items, less the shipping discount.'),
                                                             ('packingslip', [], ''),
                                                             ('recalculate_total',
                                                              ['save=True'],
                                                              'Calculates sub_total, taxes and total if the order is not already partially paid.'),
                                                             ('force_recalculate_total',
                                                              ['save=True'],
                                                              'Calculates sub_total, taxes and total.'),
                                                             ('shippinglabel', [], ''),
                                                             ('_order_total', [], ''),
                                                             ('order_success',
                                                              [],
                                                              "Run each item's order_success method."),
                                                             ('order_cancel',
                                                              [],
                                                              'Ask if the order can be cancelled. By default, do not cancel shipped, completed and\n        already cancelled orders.'),
                                                             ('_paid_in_full',
                                                              [],
                                                              'True if total has been paid'),
                                                             ('_has_downloads',
                                                              [],
                                                              'Determine if there are any downloadable products on this order'),
                                                             ('_is_downloadable',
                                                              [],
                                                              'Determine if all products on this order are downloadable'),
                                                             ('_is_shippable',
                                                              [],
                                                              'Determine if we will be shipping any items on this order '),
                                                             ('_shipping_sub_total', [], ''),
                                                             ('_shipping_tax', [], ''),
                                                             ('_shipping_with_tax', [], ''),
                                                             ('sub_total_with_tax', [], ''),
                                                             ('update_status',
                                                              ['status'],
                                                              'WARNING: To just change order status, use Order.add_status().\n        This method is called back when OrderStatus is saved and does not create required object.'),
                                                             ('validate',
                                                              ['request'],
                                                              '\n        Return whether the order is valid.\n        Not guaranteed to be side-effect free.\n        ')],
                                                 'properties': ['site',
                                                                'contact',
                                                                'ship_addressee',
                                                                'ship_street1',
                                                                'ship_street2',
                                                                'ship_city',
                                                                'ship_state',
                                                                'ship_postal_code',
                                                                'ship_country',
                                                                'bill_addressee',
                                                                'bill_street1',
                                                                'bill_street2',
                                                                'bill_city',
                                                                'bill_state',
                                                                'bill_postal_code',
                                                                'bill_country',
                                                                'notes',
                                                                'sub_total',
                                                                'total',
                                                                'discount_code',
                                                                'discount',
                                                                'method',
                                                                'shipping_description',
                                                                'shipping_method',
                                                                'shipping_model',
                                                                'shipping_cost',
                                                                'shipping_discount',
                                                                'tax',
                                                                'time_stamp',
                                                                'status',
                                                                'objects',
                                                                'authorized_remaining',
                                                                'balance',
                                                                'balance_forward',
                                                                'balance_paid',
                                                                'credit_card',
                                                                'full_bill_street',
                                                                'full_ship_street',
                                                                'ship_country_name',
                                                                'bill_country_name',
                                                                'discounted_sub_total',
                                                                'get_balance_remaining_url',
                                                                'partially_paid',
                                                                'is_partially_paid',
                                                                'item_discount',
                                                                'order_total',
                                                                'is_cancellable',
                                                                'paid_in_full',
                                                                'has_downloads',
                                                                'is_downloadable',
                                                                'is_shippable',
                                                                'shipping_sub_total',
                                                                'shipping_tax',
                                                                'shipping_with_tax']},
             'satchmo_store.shop.models.OrderAuthorization': {'bases': ['satchmo_store.shop.models.OrderPaymentBase'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [('__unicode__',
                                                                           [],
                                                                           ''),
                                                                          ('remaining', [], ''),
                                                                          ('save',
                                                                           ['force_insert=False',
                                                                            'force_update=False'],
                                                                           '')],
                                                              'properties': ['order',
                                                                             'capture',
                                                                             'complete']},
             'satchmo_store.shop.models.OrderCart': {'bases': ['satchmo_store.shop.models.NullCart'],
                                                     'constructor': ['order'],
                                                     'docstring': 'Allows us to fake a cart if we are reloading an order.',
                                                     'methods': [('_numItems', [], ''),
                                                                 ('_cartitem_set', [], ''),
                                                                 ('_total', [], ''),
                                                                 ('__str__', [], ''),
                                                                 ('__len__', [], '')],
                                                     'properties': ['_order',
                                                                    'numItems',
                                                                    'cartitem_set',
                                                                    'total',
                                                                    'is_shippable']},
             'satchmo_store.shop.models.OrderItem': {'bases': ['django.db.models.Model'],
                                                     'constructor': [],
                                                     'docstring': '\n    A line item on an order.\n    ',
                                                     'methods': [('__unicode__', [], ''),
                                                                 ('_get_category', [], ''),
                                                                 ('_is_shippable', [], ''),
                                                                 ('_has_details',
                                                                  [],
                                                                  'Determine if this specific item has more detail'),
                                                                 ('get_detail_price',
                                                                  [],
                                                                  'Get the delta price based on detail modifications'),
                                                                 ('_sub_total', [], ''),
                                                                 ('_total_with_tax', [], ''),
                                                                 ('_unit_price_with_tax',
                                                                  [],
                                                                  ''),
                                                                 ('_get_description', [], ''),
                                                                 ('_get_line_total', [], ''),
                                                                 ('save',
                                                                  ['force_insert=False',
                                                                   'force_update=False'],
                                                                  ''),
                                                                 ('update_tax', [], '')],
                                                     'properties': ['order',
                                                                    'product',
                                                                    'quantity',
                                                                    'unit_price',
                                                                    'unit_tax',
                                                                    'line_item_price',
                                                                    'tax',
                                                                    'expire_date',
                                                                    'completed',
                                                                    'discount',
                                                                    'category',
                                                                    'is_shippable',
                                                                    'has_details',
                                                                    'sub_total',
                                                                    'total_with_tax',
                                                                    'unit_price_with_tax',
                                                                    'description',
                                                                    'line_total']},
             'satchmo_store.shop.models.OrderItemDetail': {'bases': ['django.db.models.Model'],
                                                           'constructor': [],
                                                           'docstring': '\n    Name, value pair and price delta associated with a specific item in an order\n    ',
                                                           'methods': [('__unicode__', [], '')],
                                                           'properties': ['item',
                                                                          'name',
                                                                          'value',
                                                                          'price_change',
                                                                          'sort_order']},
             'satchmo_store.shop.models.OrderManager': {'bases': ['django.db.models.Manager'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('from_request',
                                                                     ['request'],
                                                                     'Get the order from the session\n\n        Returns:\n        - Order object\n        '),
                                                                    ('remove_partial_order',
                                                                     ['request'],
                                                                     'Delete cart from request if it exists and is incomplete (has no status)')],
                                                        'properties': []},
             'satchmo_store.shop.models.OrderPayment': {'bases': ['satchmo_store.shop.models.OrderPaymentBase'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('__unicode__', [], '')],
                                                        'properties': ['order', 'objects']},
             'satchmo_store.shop.models.OrderPaymentBase': {'bases': ['django.db.models.Model'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [('_credit_card',
                                                                         [],
                                                                         'Return the credit card associated with this payment.'),
                                                                        ('_amount_total',
                                                                         [],
                                                                         ''),
                                                                        ('save',
                                                                         ['force_insert=False',
                                                                          'force_update=False'],
                                                                         '')],
                                                            'properties': ['payment',
                                                                           'amount',
                                                                           'time_stamp',
                                                                           'transaction_id',
                                                                           'details',
                                                                           'reason_code',
                                                                           'credit_card',
                                                                           'amount_total']},
             'satchmo_store.shop.models.OrderPaymentFailure': {'bases': ['satchmo_store.shop.models.OrderPaymentBase'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [],
                                                               'properties': ['order']},
             'satchmo_store.shop.models.OrderPaymentManager': {'bases': ['django.db.models.Manager'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [('create_linked',
                                                                            ['other'],
                                                                            '')],
                                                               'properties': []},
             'satchmo_store.shop.models.OrderPendingPayment': {'bases': ['satchmo_store.shop.models.OrderPaymentBase'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [('__unicode__',
                                                                            [],
                                                                            ''),
                                                                           ('save',
                                                                            ['force_insert=False',
                                                                             'force_update=False'],
                                                                            '')],
                                                               'properties': ['order',
                                                                              'capture']},
             'satchmo_store.shop.models.OrderStatus': {'bases': ['django.db.models.Model'],
                                                       'constructor': [],
                                                       'docstring': '\n    An order will have multiple statuses as it moves its way through processing.\n    ',
                                                       'methods': [('__unicode__', [], ''),
                                                                   ('save',
                                                                    ['force_insert=False',
                                                                     'force_update=False'],
                                                                    '')],
                                                       'properties': ['order',
                                                                      'status',
                                                                      'notes',
                                                                      'time_stamp']},
             'satchmo_store.shop.models.OrderTaxDetail': {'bases': ['django.db.models.Model'],
                                                          'constructor': [],
                                                          'docstring': 'A tax line item',
                                                          'methods': [('__unicode__', [], '')],
                                                          'properties': ['order',
                                                                         'method',
                                                                         'description',
                                                                         'tax']},
             'satchmo_store.shop.models.OrderVariable': {'bases': ['django.db.models.Model'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('__unicode__', [], '')],
                                                         'properties': ['order', 'key', 'value']},
             'satchmo_store.shop.templatetags.satchmo_adminapplist.FilterAdminApplistNode': {'bases': ['django.template.Node'],
                                                                                             'constructor': ['listname',
                                                                                                             'varname'],
                                                                                             'docstring': '',
                                                                                             'methods': [('render',
                                                                                                          ['context'],
                                                                                                          '')],
                                                                                             'properties': ['listname',
                                                                                                            'varname']},
             'satchmo_store.shop.templatetags.satchmo_cart.CartTotalNode': {'bases': ['django.template.Node'],
                                                                            'constructor': ['cart',
                                                                                            'show_currency',
                                                                                            'show_tax',
                                                                                            'show_discount'],
                                                                            'docstring': 'Show the total for the cart',
                                                                            'methods': [('render',
                                                                                         ['context'],
                                                                                         '')],
                                                                            'properties': ['cart',
                                                                                           'raw_cart',
                                                                                           'show_currency',
                                                                                           'raw_currency',
                                                                                           'show_tax',
                                                                                           'raw_tax',
                                                                                           'show_discount',
                                                                                           'raw_show_discount']},
             'satchmo_store.shop.templatetags.satchmo_cart.CartitemTotalNode': {'bases': ['django.template.Node'],
                                                                                'constructor': ['cartitem',
                                                                                                'show_currency',
                                                                                                'show_tax'],
                                                                                'docstring': 'Show the total for the cartitem',
                                                                                'methods': [('render',
                                                                                             ['context'],
                                                                                             '')],
                                                                                'properties': ['cartitem',
                                                                                               'raw_cartitem',
                                                                                               'show_currency',
                                                                                               'raw_currency',
                                                                                               'show_tax',
                                                                                               'raw_tax']},
             'satchmo_store.shop.templatetags.satchmo_category.CategoryListNode': {'bases': ['django.template.Node'],
                                                                                   'constructor': ['slug',
                                                                                                   'var',
                                                                                                   'nodelist'],
                                                                                   'docstring': 'Template Node tag which pushes the category list into the context',
                                                                                   'methods': [('render',
                                                                                                ['context'],
                                                                                                '')],
                                                                                   'properties': ['var',
                                                                                                  'slug',
                                                                                                  'nodelist']},
             'satchmo_store.shop.tests.AdminTest': {'bases': ['django.test.TestCase'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('setUp', [], ''),
                                                                ('tearDown', [], ''),
                                                                ('test_index', [], '')],
                                                    'properties': ['fixtures', 'client']},
             'satchmo_store.shop.tests.CartTest': {'bases': ['django.test.TestCase'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [('tearDown', [], ''),
                                                               ('test_line_cost', [], '')],
                                                   'properties': ['fixtures']},
             'satchmo_store.shop.tests.ConfigTest': {'bases': ['django.test.TestCase'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('tearDown', [], ''),
                                                                 ('test_base_url', [], '')],
                                                     'properties': ['fixtures']},
             'satchmo_store.shop.tests.DiscountAmountTest': {'bases': ['django.test.TestCase'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [('setUp', [], ''),
                                                                         ('tearDown', [], ''),
                                                                         ('testBase',
                                                                          [],
                                                                          'Check base prices'),
                                                                         ('testApplyAmountSimple',
                                                                          [],
                                                                          'Check straight amount discount.'),
                                                                         ('testApplySmallAmountSimple',
                                                                          [],
                                                                          'Check small straight amount discount.'),
                                                                         ('testApplyAmountShip',
                                                                          [],
                                                                          'Check amount discount w/ship.'),
                                                                         ('testApplySmallAmountShip',
                                                                          [],
                                                                          'Check small amount discount w/ship.'),
                                                                         ('testApplyAmountFreeShip',
                                                                          [],
                                                                          'Check amount discount w/free ship.'),
                                                                         ('testApplySmallAmountFreeShip',
                                                                          [],
                                                                          'Check amount discount w/free ship.'),
                                                                         ('testApplyPercentSimple',
                                                                          [],
                                                                          ''),
                                                                         ('testApplySmallPercentSimple',
                                                                          [],
                                                                          ''),
                                                                         ('testApplyPercentShip',
                                                                          [],
                                                                          ''),
                                                                         ('testApplySmallPercentShip',
                                                                          [],
                                                                          ''),
                                                                         ('testApplySmallPercentFreeShip',
                                                                          [],
                                                                          '')],
                                                             'properties': ['fixtures',
                                                                            'US',
                                                                            'site',
                                                                            'order',
                                                                            'small']},
             'satchmo_store.shop.tests.FilterUtilTest': {'bases': ['django.test.TestCase'],
                                                         'constructor': [],
                                                         'docstring': 'Test the templatetags util class',
                                                         'methods': [('tearDown', [], ''),
                                                                     ('test_simple_get_args',
                                                                      [],
                                                                      ''),
                                                                     ('test_extended_get_args',
                                                                      [],
                                                                      ''),
                                                                     ('test_numerical_get_args',
                                                                      [],
                                                                      ''),
                                                                     ('test_keystrip_get_args',
                                                                      [],
                                                                      ''),
                                                                     ('test_stripquotes_get_args',
                                                                      [],
                                                                      '')],
                                                         'properties': []},
             'satchmo_store.shop.tests.OrderTest': {'bases': ['django.test.TestCase'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('setUp', [], ''),
                                                                ('tearDown', [], ''),
                                                                ('testBalanceMethods', [], ''),
                                                                ('testSmallPayment', [], '')],
                                                    'properties': ['fixtures', 'US']},
             'satchmo_store.shop.tests.QuickOrderTest': {'bases': ['django.test.TestCase'],
                                                         'constructor': [],
                                                         'docstring': 'Test quickorder sheet.',
                                                         'methods': [('setUp', [], ''),
                                                                     ('tearDown', [], ''),
                                                                     ('testQuickOrderAdd',
                                                                      [],
                                                                      'Test adding multiple products at once to cart.')],
                                                         'properties': ['fixtures', 'US']},
             'satchmo_store.shop.tests.ShopTest': {'bases': ['django.test.TestCase'],
                                                   'constructor': [],
                                                   'docstring': '',
                                                   'methods': [('setUp', [], ''),
                                                               ('tearDown', [], ''),
                                                               ('test_main_page',
                                                                [],
                                                                '\n        Look at the main page\n        '),
                                                               ('test_contact_form',
                                                                [],
                                                                '\n        Validate the contact form works\n        '),
                                                               ('test_new_account',
                                                                [],
                                                                '\n        Validate account creation process\n        '),
                                                               ('test_cart_adding',
                                                                ['retest=False'],
                                                                '\n        Validate we can add some items to the cart\n        '),
                                                               ('test_cart_adding_errors_nonexistent',
                                                                [],
                                                                '\n        Test proper error reporting when attempting to add items to the cart.\n        '),
                                                               ('test_cart_adding_errors_inactive',
                                                                [],
                                                                ''),
                                                               ('test_cart_adding_errors_invalid_qty',
                                                                [],
                                                                ''),
                                                               ('test_cart_adding_errors_less_zero',
                                                                [],
                                                                ''),
                                                               ('test_cart_adding_errors_out_of_stock',
                                                                [],
                                                                ''),
                                                               ('test_product', [], ''),
                                                               ('test_orphaned_product',
                                                                [],
                                                                '\n        Get the page of a Product that is not in a Category.\n        '),
                                                               ('test_get_price',
                                                                [],
                                                                '\n        Get the price and productname of a ProductVariation.\n        '),
                                                               ('test_cart_removing',
                                                                [],
                                                                '\n        Validate we can remove an item\n        '),
                                                               ('test_checkout',
                                                                [],
                                                                '\n        Run through a full checkout process\n        '),
                                                               ('test_contact_login',
                                                                [],
                                                                "Check that when a user logs in, the user's existing Contact will be\n        used.\n        "),
                                                               ('test_registration_keeps_contact',
                                                                [],
                                                                'Check that if a user creates a Contact and later registers,\n        the existing Contact will be attached to the User.\n        '),
                                                               ('test_contact_email_security',
                                                                [],
                                                                "\n        Validate that we can't create a new contact with an existing contact's email address.\n        Ticket #233\n        "),
                                                               ('test_contact_attaches_to_user',
                                                                [],
                                                                'Check that if a User registers and later creates a Contact, the\n        Contact will be attached to the existing User.\n        '),
                                                               ('test_logout',
                                                                [],
                                                                'The logout view should remove the user and contact id from the\n        session.\n        '),
                                                               ('test_search',
                                                                [],
                                                                '\n        Do some basic searches to make sure it all works as expected\n        '),
                                                               ('test_custom_product',
                                                                [],
                                                                '\n        Verify that the custom product is working as expected.\n        ')],
                                                   'properties': ['fixtures', 'client', 'US']},
             'satchmo_store.shop.tests.SignalTest': {'bases': ['django.test.TestCase'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('setUp', [], ''),
                                                                 ('tearDown', [], ''),
                                                                 ('testCartAddVerifyVeto',
                                                                  [],
                                                                  'Test that vetoes from `signals.satchmo_cart_add_verify` are caught and cause an error.')],
                                                     'properties': ['fixtures', 'US']},
             'satchmo_store.shop.views.contact.ContactForm': {'bases': ['django.forms.Form'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [],
                                                              'properties': ['name',
                                                                             'sender',
                                                                             'subject',
                                                                             'inquiry',
                                                                             'contents']},
             'satchmo_store.shop.views.sitemaps.CategorySitemap': {'bases': ['django.contrib.sitemaps.Sitemap'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [('items',
                                                                                [],
                                                                                '')],
                                                                   'properties': ['changefreq',
                                                                                  'priority']},
             'satchmo_store.shop.views.sitemaps.MainSitemap': {'bases': ['django.contrib.sitemaps.Sitemap'],
                                                               'constructor': [],
                                                               'docstring': '',
                                                               'methods': [('items', [], ''),
                                                                           ('add_url',
                                                                            ['location',
                                                                             'priority=0.5',
                                                                             "changefreq='weekly'"],
                                                                            ''),
                                                                           ('location',
                                                                            ['obj'],
                                                                            ''),
                                                                           ('priority',
                                                                            ['obj'],
                                                                            ''),
                                                                           ('changefreq',
                                                                            ['obj'],
                                                                            '')],
                                                               'properties': ['urls']},
             'satchmo_store.shop.views.sitemaps.ProductSitemap': {'bases': ['django.contrib.sitemaps.Sitemap'],
                                                                  'constructor': [],
                                                                  'docstring': '',
                                                                  'methods': [('items', [], '')],
                                                                  'properties': ['changefreq']},
             'satchmo_utils.admin.AutocompleteAdmin': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                       'constructor': [],
                                                       'docstring': 'Admin class for models using the autocomplete feature.\n\n    There are two additional fields:\n       - related_search_fields: defines fields of managed model that\n         have to be represented by autocomplete input, together with\n         a list of target model fields that have to be searched for\n         input string,\n       - related_string_functions: contains optional functions which\n         take target model instance as only argument and return string\n         representation. By default __unicode__() method of target\n         object is used.\n    ',
                                                       'methods': [('__call__',
                                                                    ['request', 'url'],
                                                                    ''),
                                                                   ('get_urls', [], ''),
                                                                   ('search',
                                                                    ['request'],
                                                                    '\n        Searches in the fields of the given related model and returns the\n        result as a simple string to be used by the jQuery Autocomplete plugin\n        '),
                                                                   ('formfield_for_dbfield',
                                                                    ['db_field', '**kwargs'],
                                                                    '\n        Overrides the default widget for Foreignkey fields if they are\n        specified in the related_search_fields class attribute.\n        ')],
                                                       'properties': ['related_search_fields',
                                                                      'related_string_functions']},
             'satchmo_utils.admin.ForeignKeySearchInput': {'bases': ['django.forms.HiddenInput'],
                                                           'constructor': ['rel',
                                                                           'search_fields',
                                                                           'to_string_function',
                                                                           'attrs=None'],
                                                           'docstring': '\n    A Widget for displaying ForeignKeys in an autocomplete search input \n    instead in a <select> box.\n    ',
                                                           'methods': [('label_for_value',
                                                                        ['value'],
                                                                        ''),
                                                                       ('render',
                                                                        ['name',
                                                                         'value',
                                                                         'attrs=None'],
                                                                        '')],
                                                           'properties': ['to_string_function',
                                                                          'rel',
                                                                          'search_fields']},
             'satchmo_utils.cookies.CookieHandler': {'bases': ['Cookie.SimpleCookie'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('__set',
                                                                  ['key',
                                                                   'real_value',
                                                                   'coded_value'],
                                                                  "Private method for setting a cookie's value"),
                                                                 ('__setitem__',
                                                                  ['key', 'value'],
                                                                  'Dictionary style assignment.'),
                                                                 ('set',
                                                                  ['key',
                                                                   "value=''",
                                                                   'max_age=None',
                                                                   'expires=None',
                                                                   "path='/'",
                                                                   'domain=None',
                                                                   'secure=None'],
                                                                  ''),
                                                                 ('delete',
                                                                  ['key',
                                                                   "path='/'",
                                                                   'domain=None'],
                                                                  '')],
                                                     'properties': []},
             'satchmo_utils.cookies.CookiePostHandlerMiddleware': {'bases': ['object'],
                                                                   'constructor': [],
                                                                   'docstring': '\n    This middleware modifies updates the response will all modified cookies.\n \n    This should be the last middleware you load.\n    ',
                                                                   'methods': [('process_response',
                                                                                ['request',
                                                                                 'response'],
                                                                                '')],
                                                                   'properties': []},
             'satchmo_utils.cookies.CookiePreHandlerMiddleware': {'bases': ['object'],
                                                                  'constructor': [],
                                                                  'docstring': '\n    This middleware modifies request.COOKIES and adds a set and delete method.\n \n    `set` matches django.http.HttpResponse.set_cookie\n    `delete` matches django.http.HttpResponse.delete_cookie\n \n    This should be the first middleware you load.\n    ',
                                                                  'methods': [('process_request',
                                                                               ['request'],
                                                                               '')],
                                                                  'properties': []},
             'satchmo_utils.cookies.StringMorsel': {'bases': ['Cookie.Morsel'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('__str__', [], ''),
                                                                ('__eq__', ['a'], ''),
                                                                ('__ne__', ['a'], ''),
                                                                ('__repr__', [], '')],
                                                    'properties': []},
             'satchmo_utils.fields.CurrencyField': {'bases': ['django.db.models.fields.DecimalField'],
                                                    'constructor': ['*args', '**kwargs'],
                                                    'docstring': '',
                                                    'methods': [('formfield', ['**kwargs'], '')],
                                                    'properties': ['places']},
             'satchmo_utils.numbers.PositiveRoundedDecimalField': {'bases': ['satchmo_utils.numbers.RoundedDecimalField'],
                                                                   'constructor': [],
                                                                   'docstring': '\n    Normalize the field according to cart normalizing rules and force it to be positive.\n    ',
                                                                   'methods': [('clean',
                                                                                ['value'],
                                                                                '')],
                                                                   'properties': []},
             'satchmo_utils.numbers.RoundedDecimalError': {'bases': [],
                                                           'constructor': ["val=''",
                                                                           "id=''",
                                                                           "msg=''"],
                                                           'docstring': '\n     General Purpose Error Handling used to handle error exceptions\n     created in caller.\n     Caller name and module taken from\n     Activestate Recipe 66062: Determining Current Function Name\n        # sys._getframe().f_code.co_name\n        # sys._getframe().f_lineno\n        # sys._getframe().f_code.co_filename\n    ',
                                                           'methods': [('__repr__', [], '')],
                                                           'properties': ['val',
                                                                          'id',
                                                                          'msg',
                                                                          'caller_name',
                                                                          'caller_module',
                                                                          'caller_lineno']},
             'satchmo_utils.numbers.RoundedDecimalField': {'bases': ['django.forms.Field'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [('clean',
                                                                        ['value'],
                                                                        '\n        Normalize the field according to cart normalizing rules.\n        ')],
                                                           'properties': []},
             'satchmo_utils.sslurllib.HTTPSv2Connection': {'bases': ['httplib.HTTPConnection'],
                                                           'constructor': ['host',
                                                                           'port=None',
                                                                           'key_file=None',
                                                                           'cert_file=None',
                                                                           'strict=None'],
                                                           'docstring': 'This class allows communication via SSLv2.',
                                                           'methods': [('connect',
                                                                        [],
                                                                        'Connect to a host on a given (SSL) port.')],
                                                           'properties': ['default_port',
                                                                          'key_file',
                                                                          'cert_file',
                                                                          'sock']},
             'satchmo_utils.sslurllib.HTTPSv2Handler': {'bases': ['urllib2.HTTPSHandler'],
                                                        'constructor': [],
                                                        'docstring': 'Overrides the base urllib2 HTTPSHandler.',
                                                        'methods': [('https_open', ['req'], '')],
                                                        'properties': []},
             'satchmo_utils.tests.TestRoundedDecimals': {'bases': ['django.test.TestCase'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('testRoundingDecimals',
                                                                      [],
                                                                      'Test Partial Unit Rounding Decimal Conversion behavior'),
                                                                     ('testTruncDecimal',
                                                                      [],
                                                                      "Test trunc_decimal's rounding behavior.")],
                                                         'properties': []},
             'satchmo_utils.thumbnail.field.ImageWithThumbnailField': {'bases': ['django.db.models.fields.files.ImageField'],
                                                                       'constructor': ['verbose_name=None',
                                                                                       'name=None',
                                                                                       'width_field=None',
                                                                                       'height_field=None',
                                                                                       'auto_rename=NOTSET',
                                                                                       'name_field=None',
                                                                                       'upload_to=upload_dir',
                                                                                       '**kwargs'],
                                                                       'docstring': ' ImageField with thumbnail support\n\n        auto_rename: if it is set perform auto rename to\n        <class name>-<field name>-<object pk>.<ext>\n        on pre_save.\n    ',
                                                                       'methods': [('_save_rename',
                                                                                    ['instance',
                                                                                     '**kwargs'],
                                                                                    ''),
                                                                                   ('contribute_to_class',
                                                                                    ['cls',
                                                                                     'name'],
                                                                                    '')],
                                                                       'properties': ['auto_rename',
                                                                                      'width_field',
                                                                                      'height_field',
                                                                                      'name_field',
                                                                                      '_renaming']},
             'satchmo_utils.thumbnail.widgets.AdminImageWithThumbnailWidget': {'bases': ['django.forms.FileInput'],
                                                                               'constructor': ['attrs={}'],
                                                                               'docstring': '\n    A FileField Widget that shows its current image as a thumbnail if it has one.\n    ',
                                                                               'methods': [('render',
                                                                                            ['name',
                                                                                             'value',
                                                                                             'attrs=None'],
                                                                                            '')],
                                                                               'properties': []},
             'satchmo_utils.validators.MutuallyExclusiveWithField': {'bases': ['object'],
                                                                     'constructor': ['other_field_name',
                                                                                     "error_message=_('Please enter one and only one of those fields.')"],
                                                                     'docstring': '',
                                                                     'methods': [('__call__',
                                                                                  ['field_data',
                                                                                   'all_data'],
                                                                                  '')],
                                                                     'properties': ['other',
                                                                                    'error_message',
                                                                                    'always_test']},
             'satchmo_utils.validators.ValidateIfFieldsSame': {'bases': ['object'],
                                                               'constructor': ['other_field',
                                                                               "error_message=_('These fields can not be the same.')"],
                                                               'docstring': '',
                                                               'methods': [('__call__',
                                                                            ['field_data',
                                                                             'all_data'],
                                                                            '')],
                                                               'properties': ['other_field',
                                                                              'always_test',
                                                                              'error_message']},
             'satchmo_utils.views.CreditCard': {'bases': ['object'],
                                                'constructor': ['number', 'cardtype'],
                                                'docstring': '',
                                                'methods': [('_verifyMod10',
                                                             ['number'],
                                                             'Check a credit card number for validity using the mod10 algorithm.'),
                                                            ('_stripCardNum',
                                                             ['card'],
                                                             'Return card number with all non-digits stripped.  '),
                                                            ('verifyCardNumber',
                                                             [],
                                                             'Return card type string if legal, None otherwise.\n        Check the card number and return a string representing the card type if\n        it could be a valid card number.\n\n        RETURNS: (String) Credit card type string if legal.(None) if invalid.\n        '),
                                                            ('verifyCardTypeandNumber', [], '')],
                                                'properties': ['card_number', 'card_type']},
             'satchmo_utils.widgets.BaseCurrencyWidget': {'bases': ['django.forms.TextInput'],
                                                          'constructor': ['attrs={}'],
                                                          'docstring': '\n    A Text Input widget that shows the currency amount\n    ',
                                                          'methods': [],
                                                          'properties': []},
             'satchmo_utils.widgets.CurrencyWidget': {'bases': ['satchmo_utils.widgets.BaseCurrencyWidget'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [('render',
                                                                   ['name',
                                                                    'value',
                                                                    'attrs=None'],
                                                                   '')],
                                                      'properties': []},
             'satchmo_utils.widgets.StrippedDecimalWidget': {'bases': ['django.forms.TextInput'],
                                                             'constructor': ['attrs={}'],
                                                             'docstring': '\n    A textinput widget that strips out the trailing zeroes.\n    ',
                                                             'methods': [('render',
                                                                          ['name',
                                                                           'value',
                                                                           'attrs=None'],
                                                                          '')],
                                                             'properties': []},
             'satchmo_utils.widgets.TruncatedCurrencyWidget': {'bases': ['satchmo_utils.widgets.BaseCurrencyWidget'],
                                                               'constructor': [],
                                                               'docstring': '\n    A Text Input widget that shows the currency amount - stripped to two digits by default.\n    ',
                                                               'methods': [('render',
                                                                            ['name',
                                                                             'value',
                                                                             'attrs=None'],
                                                                            '')],
                                                               'properties': []},
             'shipping.config.ShippingModuleNotFound': {'bases': ['Exception'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [],
                                                        'properties': ['key']},
             'shipping.fields.ShippingChoiceCharField': {'bases': ['django.db.models.CharField'],
                                                         'constructor': ["choices='__DYNAMIC__'",
                                                                         '*args',
                                                                         '**kwargs'],
                                                         'docstring': '',
                                                         'methods': [],
                                                         'properties': []},
             'shipping.modules.base.BaseShipper': {'bases': ['object'],
                                                   'constructor': ['cart=None', 'contact=None'],
                                                   'docstring': '',
                                                   'methods': [('calculate',
                                                                ['cart', 'contact'],
                                                                '\n        Perform shipping calculations, separated from __init__ so that the object can be \n        used for keys and labels more easily.\n        ')],
                                                   'properties': ['_calculated',
                                                                  'cart',
                                                                  'contact']},
             'shipping.modules.canadapost.shipper.Shipper': {'bases': ['shipping.modules.base.BaseShipper'],
                                                             'constructor': ['cart=None',
                                                                             'contact=None',
                                                                             'service_type=None'],
                                                             'docstring': '',
                                                             'methods': [('__str__',
                                                                          [],
                                                                          '\n          This is mainly helpful for debugging purposes\n        '),
                                                                         ('__unicode__',
                                                                          [],
                                                                          '\n          As is this.\n        '),
                                                                         ('description',
                                                                          [],
                                                                          '\n          A basic description that will be displayed to the user when \n          selecting their shipping options\n        '),
                                                                         ('cost',
                                                                          [],
                                                                          '\n          Complex calculations can be done here as long as the return \n          value is a decimal figure\n        '),
                                                                         ('method',
                                                                          [],
                                                                          '\n          Describes the actual delivery service (Mail, FedEx, DHL, UPS, etc)\n        '),
                                                                         ('expectedDelivery',
                                                                          [],
                                                                          '\n          Can be a plain string or complex calcuation \n          returning an actual date\n        '),
                                                                         ('valid',
                                                                          ['order=None'],
                                                                          '\n        Can do complex validation about whether or not this\n        option is valid. For example, may check to see if the \n        recipient is in an allowed country or location.\n        '),
                                                                         ('_process_request',
                                                                          ['connection',
                                                                           'request'],
                                                                          '\n          Post the data and return the XML response\n        '),
                                                                         ('calculate',
                                                                          ['cart', 'contact'],
                                                                          '\n          Based on the chosen Canada Post method, we will do our call(s) \n          to Canada Post and see how much it will cost. We will also need \n          to store the results for further parsing and return via the\n          methods above.\n        '),
                                                                         ('verbose_log',
                                                                          ['*args',
                                                                           '**kwargs'],
                                                                          '')],
                                                             'properties': ['_calculated',
                                                                            'cart',
                                                                            'contact',
                                                                            'service_type_code',
                                                                            'service_type_text',
                                                                            'id',
                                                                            'raw',
                                                                            'delivery_days',
                                                                            'packaging',
                                                                            'is_valid',
                                                                            'charges']},
             'shipping.modules.dummy.shipper.Shipper': {'bases': ['shipping.modules.base.BaseShipper'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('__str__',
                                                                     [],
                                                                     '\n        This is mainly helpful for debugging purposes\n        '),
                                                                    ('description',
                                                                     [],
                                                                     '\n        A basic description that will be displayed to the user when selecting their shipping options\n        '),
                                                                    ('cost',
                                                                     [],
                                                                     '\n        Complex calculations can be done here as long as the return value is a decimal figure\n        '),
                                                                    ('method',
                                                                     [],
                                                                     '\n        Describes the actual delivery service (Mail, FedEx, DHL, UPS, etc)\n        '),
                                                                    ('expectedDelivery',
                                                                     [],
                                                                     '\n        Can be a plain string or complex calcuation returning an actual date\n        '),
                                                                    ('valid',
                                                                     ['order=None'],
                                                                     '\n        Can do complex validation about whether or not this option is valid.\n        For example, may check to see if the recipient is in an allowed country\n        or location.\n        ')],
                                                        'properties': ['flatRateFee', 'id']},
             'shipping.modules.fedex.shipper.Shipper': {'bases': ['shipping.modules.base.BaseShipper'],
                                                        'constructor': ['cart=None',
                                                                        'contact=None',
                                                                        'service_type=None'],
                                                        'docstring': '',
                                                        'methods': [('__str__',
                                                                     [],
                                                                     '\n          This is mainly helpful for debugging purposes\n        '),
                                                                    ('__unicode__',
                                                                     [],
                                                                     '\n          As is this.\n        '),
                                                                    ('description',
                                                                     [],
                                                                     '\n          A basic description that will be displayed to the user when \n          selecting their shipping options\n        '),
                                                                    ('cost',
                                                                     [],
                                                                     '\n          Complex calculations can be done here as long as the return \n          value is a decimal figure\n        '),
                                                                    ('method',
                                                                     [],
                                                                     '\n          Describes the actual delivery service (Mail, FedEx, DHL, UPS, etc)\n        '),
                                                                    ('expectedDelivery',
                                                                     [],
                                                                     '\n          Can be a plain string or complex calcuation \n          returning an actual date\n        '),
                                                                    ('valid',
                                                                     ['order=None'],
                                                                     '\n        Can do complex validation about whether or not this\n        option is valid. For example, may check to see if the \n        recipient is in an allowed country or location.\n        '),
                                                                    ('_check_for_error',
                                                                     ['response'],
                                                                     "\n          Check XML response, see if it indicates an error.\n          Expects 'response' to already have been run through\n          minidom.parseString()\n        "),
                                                                    ('_process_request',
                                                                     ['connection', 'request'],
                                                                     '\n          Post the data and return the XML response\n        '),
                                                                    ('calculate',
                                                                     ['cart', 'contact'],
                                                                     '\n          Based on the chosen Fedex method, we will do our call(s) \n          to FedEx and see how much it will cost. We will also need \n          to store the results for further parsing and return via the\n          methods above.\n        ')],
                                                        'properties': ['_calculated',
                                                                       'cart',
                                                                       'contact',
                                                                       'raw_results',
                                                                       'service_type_code',
                                                                       'service_type_text',
                                                                       'id',
                                                                       'raw_response',
                                                                       'delivery_days',
                                                                       'packaging',
                                                                       'is_valid',
                                                                       'charges']},
             'shipping.modules.flat.shipper.Shipper': {'bases': ['shipping.modules.base.BaseShipper'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [('__str__',
                                                                    [],
                                                                    '\n        This is mainly helpful for debugging purposes\n        '),
                                                                   ('description',
                                                                    [],
                                                                    '\n        A basic description that will be displayed to the user when selecting their shipping options\n        '),
                                                                   ('cost',
                                                                    [],
                                                                    '\n        Complex calculations can be done here as long as the return value is a dollar figure\n        '),
                                                                   ('method',
                                                                    [],
                                                                    '\n        Describes the actual delivery service (Mail, FedEx, DHL, UPS, etc)\n        '),
                                                                   ('expectedDelivery',
                                                                    [],
                                                                    '\n        Can be a plain string or complex calcuation returning an actual date\n        '),
                                                                   ('valid',
                                                                    ['order=None'],
                                                                    '\n        Can do complex validation about whether or not this option is valid.\n        For example, may check to see if the recipient is in an allowed country\n        or location.\n        ')],
                                                       'properties': ['id']},
             'shipping.modules.no.shipper.Shipper': {'bases': ['shipping.modules.base.BaseShipper'],
                                                     'constructor': [],
                                                     'docstring': '',
                                                     'methods': [('__str__',
                                                                  [],
                                                                  '\n        This is mainly helpful for debugging purposes\n        '),
                                                                 ('description',
                                                                  [],
                                                                  '\n        A basic description that will be displayed to the user when selecting their shipping options\n        '),
                                                                 ('cost',
                                                                  [],
                                                                  '\n        Complex calculations can be done here as long as the return value is a dollar figure\n        '),
                                                                 ('method',
                                                                  [],
                                                                  '\n        Describes the actual delivery service (Mail, FedEx, DHL, UPS, etc)\n        '),
                                                                 ('expectedDelivery',
                                                                  [],
                                                                  '\n        Can be a plain string or complex calcuation returning an actual date\n        '),
                                                                 ('valid',
                                                                  ['order=None'],
                                                                  '\n        Can do complex validation about whether or not this option is valid.\n        For example, may check to see if the recipient is in an allowed country\n        or location.\n        ')],
                                                     'properties': ['id']},
             'shipping.modules.per.shipper.Shipper': {'bases': ['shipping.modules.base.BaseShipper'],
                                                      'constructor': [],
                                                      'docstring': '',
                                                      'methods': [('__str__',
                                                                   [],
                                                                   '\n        This is mainly helpful for debugging purposes\n        '),
                                                                  ('description',
                                                                   [],
                                                                   '\n        A basic description that will be displayed to the user when selecting their shipping options\n        '),
                                                                  ('cost',
                                                                   [],
                                                                   '\n        Complex calculations can be done here as long as the return value is a dollar figure\n        '),
                                                                  ('method',
                                                                   [],
                                                                   '\n        Describes the actual delivery service (Mail, FedEx, DHL, UPS, etc)\n        '),
                                                                  ('expectedDelivery',
                                                                   [],
                                                                   '\n        Can be a plain string or complex calcuation returning an actual date\n        '),
                                                                  ('valid',
                                                                   ['order=None'],
                                                                   '\n        Can do complex validation about whether or not this option is valid.\n        For example, may check to see if the recipient is in an allowed country\n        or location.\n        ')],
                                                      'properties': ['id']},
             'shipping.modules.productshipping.admin.CarrierOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                                       'constructor': [],
                                                                       'docstring': '',
                                                                       'methods': [],
                                                                       'properties': ['ordering',
                                                                                      'inlines']},
             'shipping.modules.productshipping.admin.CarrierTranslation_Inline': {'bases': ['django.contrib.admin.TabularInline'],
                                                                                  'constructor': [],
                                                                                  'docstring': '',
                                                                                  'methods': [],
                                                                                  'properties': ['model',
                                                                                                 'ordering',
                                                                                                 'extra']},
             'shipping.modules.productshipping.admin.ProductShippingPriceInline': {'bases': ['django.contrib.admin.TabularInline'],
                                                                                   'constructor': [],
                                                                                   'docstring': '',
                                                                                   'methods': [],
                                                                                   'properties': ['model']},
             'shipping.modules.productshipping.models.Carrier': {'bases': ['django.db.models.Model'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [('_find_translation',
                                                                              ['language_code=None'],
                                                                              ''),
                                                                             ('delivery',
                                                                              [],
                                                                              'Get the delivery, looking up by language code, falling back intelligently.\n        '),
                                                                             ('description',
                                                                              [],
                                                                              'Get the description, looking up by language code, falling back intelligently.\n        '),
                                                                             ('method',
                                                                              [],
                                                                              'Get the description, looking up by language code, falling back intelligently.\n        '),
                                                                             ('name',
                                                                              [],
                                                                              'Get the name, looking up by language code, falling back intelligently.\n        '),
                                                                             ('price',
                                                                              ['product'],
                                                                              'Get a price for this product.'),
                                                                             ('__unicode__',
                                                                              [],
                                                                              '')],
                                                                 'properties': ['key',
                                                                                'ordering',
                                                                                'active',
                                                                                'delivery',
                                                                                'description',
                                                                                'method',
                                                                                'name']},
             'shipping.modules.productshipping.models.CarrierTranslation': {'bases': ['django.db.models.Model'],
                                                                            'constructor': [],
                                                                            'docstring': '',
                                                                            'methods': [],
                                                                            'properties': ['carrier',
                                                                                           'languagecode',
                                                                                           'name',
                                                                                           'description',
                                                                                           'method',
                                                                                           'delivery']},
             'shipping.modules.productshipping.models.ProductShippingPrice': {'bases': ['django.db.models.Model'],
                                                                              'constructor': [],
                                                                              'docstring': '',
                                                                              'methods': [('__unicode__',
                                                                                           [],
                                                                                           '')],
                                                                              'properties': ['product',
                                                                                             'carrier',
                                                                                             'price']},
             'shipping.modules.productshipping.models.ProductShippingPriceException': {'bases': ['Exception'],
                                                                                       'constructor': ['reason'],
                                                                                       'docstring': '',
                                                                                       'methods': [],
                                                                                       'properties': ['reason']},
             'shipping.modules.productshipping.models.Shipper': {'bases': ['shipping.modules.base.BaseShipper'],
                                                                 'constructor': ['carrier'],
                                                                 'docstring': '',
                                                                 'methods': [('__str__',
                                                                              [],
                                                                              '\n        This is mainly helpful for debugging purposes\n        '),
                                                                             ('description',
                                                                              [],
                                                                              '\n        A basic description that will be displayed to the user when selecting their shipping options\n        '),
                                                                             ('cost',
                                                                              [],
                                                                              '\n        Complex calculations can be done here as long as the return value is a dollar figure\n        '),
                                                                             ('method',
                                                                              [],
                                                                              '\n        Describes the actual delivery service (Mail, FedEx, DHL, UPS, etc)\n        '),
                                                                             ('expectedDelivery',
                                                                              [],
                                                                              '\n        Can be a plain string or complex calcuation returning an actual date\n        '),
                                                                             ('valid',
                                                                              ['order=None'],
                                                                              '\n        Can do complex validation about whether or not this option is valid.\n        For example, may check to see if the recipient is in an allowed country\n        or location.\n        ')],
                                                                 'properties': ['id', 'carrier']},
             'shipping.modules.productshipping.tests.ProductShippingPricingTest': {'bases': ['django.test.TestCase'],
                                                                                   'constructor': [],
                                                                                   'docstring': '',
                                                                                   'methods': [('setUp',
                                                                                                [],
                                                                                                ''),
                                                                                               ('testBase',
                                                                                                [],
                                                                                                ''),
                                                                                               ('test2Prices',
                                                                                                [],
                                                                                                ''),
                                                                                               ('testVariantPrices',
                                                                                                [],
                                                                                                'price for shipping a variant is the same as the master, except when it is explicitly set')],
                                                                                   'properties': ['fixtures',
                                                                                                  'carrier',
                                                                                                  'product']},
             'shipping.modules.productshipping.tests.ProductShippingSimpleTest': {'bases': ['django.test.TestCase'],
                                                                                  'constructor': [],
                                                                                  'docstring': '',
                                                                                  'methods': [('testCreate',
                                                                                               [],
                                                                                               '')],
                                                                                  'properties': ['fixtures']},
             'shipping.modules.tiered.admin.CarrierOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [],
                                                              'properties': ['ordering',
                                                                             'inlines']},
             'shipping.modules.tiered.admin.CarrierTranslation_Inline': {'bases': ['django.contrib.admin.TabularInline'],
                                                                         'constructor': [],
                                                                         'docstring': '',
                                                                         'methods': [],
                                                                         'properties': ['model',
                                                                                        'ordering',
                                                                                        'extra']},
             'shipping.modules.tiered.admin.ShippingTier_Inline': {'bases': ['django.contrib.admin.TabularInline'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [],
                                                                   'properties': ['model',
                                                                                  'extra',
                                                                                  'ordering']},
             'shipping.modules.tiered.models.Carrier': {'bases': ['django.db.models.Model'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [('_find_translation',
                                                                     ['language_code=None'],
                                                                     ''),
                                                                    ('delivery',
                                                                     [],
                                                                     'Get the delivery, looking up by language code, falling back intelligently.\n        '),
                                                                    ('description',
                                                                     [],
                                                                     'Get the description, looking up by language code, falling back intelligently.\n        '),
                                                                    ('method',
                                                                     [],
                                                                     'Get the description, looking up by language code, falling back intelligently.\n        '),
                                                                    ('name',
                                                                     [],
                                                                     'Get the name, looking up by language code, falling back intelligently.\n        '),
                                                                    ('price',
                                                                     ['total'],
                                                                     'Get a price for this total.'),
                                                                    ('__unicode__', [], '')],
                                                        'properties': ['key',
                                                                       'ordering',
                                                                       'active',
                                                                       'delivery',
                                                                       'description',
                                                                       'method',
                                                                       'name']},
             'shipping.modules.tiered.models.CarrierTranslation': {'bases': ['django.db.models.Model'],
                                                                   'constructor': [],
                                                                   'docstring': '',
                                                                   'methods': [],
                                                                   'properties': ['carrier',
                                                                                  'languagecode',
                                                                                  'name',
                                                                                  'description',
                                                                                  'method',
                                                                                  'delivery']},
             'shipping.modules.tiered.models.Shipper': {'bases': ['shipping.modules.base.BaseShipper'],
                                                        'constructor': ['carrier'],
                                                        'docstring': '',
                                                        'methods': [('__str__',
                                                                     [],
                                                                     '\n        This is mainly helpful for debugging purposes\n        '),
                                                                    ('description',
                                                                     [],
                                                                     '\n        A basic description that will be displayed to the user when selecting their shipping options\n        '),
                                                                    ('cost',
                                                                     [],
                                                                     '\n        Complex calculations can be done here as long as the return value is a dollar figure\n        '),
                                                                    ('method',
                                                                     [],
                                                                     '\n        Describes the actual delivery service (Mail, FedEx, DHL, UPS, etc)\n        '),
                                                                    ('expectedDelivery',
                                                                     [],
                                                                     '\n        Can be a plain string or complex calcuation returning an actual date\n        '),
                                                                    ('valid',
                                                                     ['order=None'],
                                                                     '\n        Can do complex validation about whether or not this option is valid.\n        For example, may check to see if the recipient is in an allowed country\n        or location.\n        ')],
                                                        'properties': ['id', 'carrier']},
             'shipping.modules.tiered.models.ShippingTier': {'bases': ['django.db.models.Model'],
                                                             'constructor': [],
                                                             'docstring': '',
                                                             'methods': [('__unicode__',
                                                                          [],
                                                                          '')],
                                                             'properties': ['carrier',
                                                                            'min_total',
                                                                            'price',
                                                                            'expires']},
             'shipping.modules.tiered.models.TieredPriceException': {'bases': ['Exception'],
                                                                     'constructor': ['reason'],
                                                                     'docstring': '',
                                                                     'methods': [],
                                                                     'properties': ['reason']},
             'shipping.modules.tiered.tests.TieredCarrierExpiringTest': {'bases': ['django.test.TestCase'],
                                                                         'constructor': [],
                                                                         'docstring': '',
                                                                         'methods': [('setUp',
                                                                                      [],
                                                                                      ''),
                                                                                     ('testExpired',
                                                                                      [],
                                                                                      ''),
                                                                                     ('testNotExpired',
                                                                                      [],
                                                                                      '')],
                                                                         'properties': ['fixtures',
                                                                                        'carrier']},
             'shipping.modules.tiered.tests.TieredCarrierPricingTest': {'bases': ['django.test.TestCase'],
                                                                        'constructor': [],
                                                                        'docstring': '',
                                                                        'methods': [('setUp',
                                                                                     [],
                                                                                     ''),
                                                                                    ('testBase',
                                                                                     [],
                                                                                     ''),
                                                                                    ('test2Prices',
                                                                                     [],
                                                                                     ''),
                                                                                    ('test4Prices',
                                                                                     [],
                                                                                     '')],
                                                                        'properties': ['fixtures',
                                                                                       'carrier']},
             'shipping.modules.tiered.tests.TieredCarrierSimpleTest': {'bases': ['django.test.TestCase'],
                                                                       'constructor': [],
                                                                       'docstring': '',
                                                                       'methods': [('testCreate',
                                                                                    [],
                                                                                    '')],
                                                                       'properties': ['fixtures']},
             'shipping.modules.tieredquantity.admin.CarrierOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                                      'constructor': [],
                                                                      'docstring': '',
                                                                      'methods': [],
                                                                      'properties': ['ordering',
                                                                                     'inlines']},
             'shipping.modules.tieredquantity.admin.CarrierTranslation_Inline': {'bases': ['django.contrib.admin.TabularInline'],
                                                                                 'constructor': [],
                                                                                 'docstring': '',
                                                                                 'methods': [],
                                                                                 'properties': ['model',
                                                                                                'extra']},
             'shipping.modules.tieredquantity.admin.QuantityTier_Inline': {'bases': ['django.contrib.admin.TabularInline'],
                                                                           'constructor': [],
                                                                           'docstring': '',
                                                                           'methods': [],
                                                                           'properties': ['model',
                                                                                          'extra',
                                                                                          'ordering']},
             'shipping.modules.tieredquantity.models.Carrier': {'bases': ['django.db.models.Model'],
                                                                'constructor': [],
                                                                'docstring': '',
                                                                'methods': [('_find_translation',
                                                                             ['language_code=None'],
                                                                             ''),
                                                                            ('delivery',
                                                                             [],
                                                                             'Get the delivery, looking up by language code, falling back intelligently.\n        '),
                                                                            ('description',
                                                                             [],
                                                                             'Get the description, looking up by language code, falling back intelligently.\n        '),
                                                                            ('method',
                                                                             [],
                                                                             'Get the description, looking up by language code, falling back intelligently.\n        '),
                                                                            ('name',
                                                                             [],
                                                                             'Get the name, looking up by language code, falling back intelligently.\n        '),
                                                                            ('price',
                                                                             ['qty'],
                                                                             'Get a price for this qty.'),
                                                                            ('__unicode__',
                                                                             [],
                                                                             '')],
                                                                'properties': ['key',
                                                                               'ordering',
                                                                               'active',
                                                                               'delivery',
                                                                               'description',
                                                                               'method',
                                                                               'name']},
             'shipping.modules.tieredquantity.models.CarrierTranslation': {'bases': ['django.db.models.Model'],
                                                                           'constructor': [],
                                                                           'docstring': '',
                                                                           'methods': [],
                                                                           'properties': ['carrier',
                                                                                          'languagecode',
                                                                                          'name',
                                                                                          'description',
                                                                                          'method',
                                                                                          'delivery']},
             'shipping.modules.tieredquantity.models.QuantityTier': {'bases': ['django.db.models.Model'],
                                                                     'constructor': [],
                                                                     'docstring': '',
                                                                     'methods': [('calculate_price',
                                                                                  ['qty'],
                                                                                  ''),
                                                                                 ('__unicode__',
                                                                                  [],
                                                                                  '')],
                                                                     'properties': ['carrier',
                                                                                    'quantity',
                                                                                    'handling',
                                                                                    'price',
                                                                                    'expires']},
             'shipping.modules.tieredquantity.models.Shipper': {'bases': ['shipping.modules.base.BaseShipper'],
                                                                'constructor': ['carrier'],
                                                                'docstring': '',
                                                                'methods': [('__str__',
                                                                             [],
                                                                             '\n        This is mainly helpful for debugging purposes\n        '),
                                                                            ('description',
                                                                             [],
                                                                             '\n        A basic description that will be displayed to the user when selecting their shipping options\n        '),
                                                                            ('cost',
                                                                             [],
                                                                             '\n        Complex calculations can be done here as long as the return value is a dollar figure\n        '),
                                                                            ('method',
                                                                             [],
                                                                             '\n        Describes the actual delivery service (Mail, FedEx, DHL, UPS, etc)\n        '),
                                                                            ('expectedDelivery',
                                                                             [],
                                                                             '\n        Can be a plain string or complex calcuation returning an actual date\n        '),
                                                                            ('valid',
                                                                             ['order=None'],
                                                                             '\n        Check to see if this order can be shipped using this method\n        ')],
                                                                'properties': ['id', 'carrier']},
             'shipping.modules.tieredquantity.models.TieredPriceException': {'bases': ['Exception'],
                                                                             'constructor': ['reason'],
                                                                             'docstring': '',
                                                                             'methods': [],
                                                                             'properties': ['reason']},
             'shipping.modules.tieredquantity.tests.TieredCarrierExpiringTest': {'bases': ['django.test.TestCase'],
                                                                                 'constructor': [],
                                                                                 'docstring': '',
                                                                                 'methods': [('setUp',
                                                                                              [],
                                                                                              ''),
                                                                                             ('testExpired',
                                                                                              [],
                                                                                              ''),
                                                                                             ('testNotExpired',
                                                                                              [],
                                                                                              '')],
                                                                                 'properties': ['fixtures',
                                                                                                'carrier']},
             'shipping.modules.tieredquantity.tests.TieredCarrierPricingTest': {'bases': ['django.test.TestCase'],
                                                                                'constructor': [],
                                                                                'docstring': '',
                                                                                'methods': [('setUp',
                                                                                             [],
                                                                                             ''),
                                                                                            ('testBase',
                                                                                             [],
                                                                                             ''),
                                                                                            ('test2Prices',
                                                                                             [],
                                                                                             '')],
                                                                                'properties': ['fixtures',
                                                                                               'carrier']},
             'shipping.modules.tieredquantity.tests.TieredCarrierSimpleTest': {'bases': ['django.test.TestCase'],
                                                                               'constructor': [],
                                                                               'docstring': '',
                                                                               'methods': [('testCreate',
                                                                                            [],
                                                                                            '')],
                                                                               'properties': ['fixtures']},
             'shipping.modules.tieredweight.admin.CarrierOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                                    'constructor': [],
                                                                    'docstring': '',
                                                                    'methods': [],
                                                                    'properties': ['fieldsets',
                                                                                   'list_display',
                                                                                   'form']},
             'shipping.modules.tieredweight.admin.WeightTierInline': {'bases': ['django.contrib.admin.TabularInline'],
                                                                      'constructor': [],
                                                                      'docstring': '',
                                                                      'methods': [],
                                                                      'properties': ['model']},
             'shipping.modules.tieredweight.admin.ZoneOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [],
                                                                 'properties': ['list_filter',
                                                                                'list_display',
                                                                                'filter_horizontal',
                                                                                'inlines',
                                                                                'form']},
             'shipping.modules.tieredweight.admin.ZoneTranslationInline': {'bases': ['django.contrib.admin.TabularInline'],
                                                                           'constructor': [],
                                                                           'docstring': '',
                                                                           'methods': [],
                                                                           'properties': ['model']},
             'shipping.modules.tieredweight.forms.CarrierAdminForm': {'bases': ['django.forms.ModelForm'],
                                                                      'constructor': ['*args',
                                                                                      '**kwargs'],
                                                                      'docstring': '',
                                                                      'methods': [],
                                                                      'properties': []},
             'shipping.modules.tieredweight.forms.ZoneAdminForm': {'bases': ['django.forms.ModelForm'],
                                                                   'constructor': ['*args',
                                                                                   '**kwargs'],
                                                                   'docstring': '',
                                                                   'methods': [],
                                                                   'properties': []},
             'shipping.modules.tieredweight.models.Carrier': {'bases': ['django.db.models.Model'],
                                                              'constructor': [],
                                                              'docstring': '',
                                                              'methods': [('__unicode__',
                                                                           [],
                                                                           ''),
                                                                          ('get_zone',
                                                                           ['country'],
                                                                           '')],
                                                              'properties': ['name',
                                                                             'ordering',
                                                                             'active',
                                                                             'default_zone']},
             'shipping.modules.tieredweight.models.Shipper': {'bases': ['shipping.modules.base.BaseShipper'],
                                                              'constructor': ['carrier'],
                                                              'docstring': '',
                                                              'methods': [('calculate',
                                                                           ['cart', 'contact'],
                                                                           '\n        Perform shipping calculations\n        '),
                                                                          ('__str__',
                                                                           [],
                                                                           '\n        This is mainly helpful for debugging purposes\n        '),
                                                                          ('cost',
                                                                           [],
                                                                           '\n        Calulates the shipping for the order\n        '),
                                                                          ('description',
                                                                           [],
                                                                           '\n        A basic description that will be displayed to the user when selecting their shipping options\n        '),
                                                                          ('method',
                                                                           [],
                                                                           '\n        Describes the actual delivery service (Mail, FedEx, DHL, UPS, etc)\n        '),
                                                                          ('expectedDelivery',
                                                                           [],
                                                                           '\n        Can be a plain string or complex calculation returning an actual date\n        '),
                                                                          ('valid',
                                                                           ['order=None'],
                                                                           '\n        Check if shipping is valid for country and set zone accordingly. Fallback \n        to default zone if set\n        ')],
                                                              'properties': ['id',
                                                                             '_carrier',
                                                                             '_cost',
                                                                             '_weight',
                                                                             '_zone']},
             'shipping.modules.tieredweight.models.TieredWeightException': {'bases': ['Exception'],
                                                                            'constructor': [],
                                                                            'docstring': '',
                                                                            'methods': [],
                                                                            'properties': []},
             'shipping.modules.tieredweight.models.WeightTier': {'bases': ['django.db.models.Model'],
                                                                 'constructor': [],
                                                                 'docstring': '',
                                                                 'methods': [('__unicode__',
                                                                              [],
                                                                              ''),
                                                                             ('cost', [], '')],
                                                                 'properties': ['zone',
                                                                                'min_weight',
                                                                                'handling',
                                                                                'price',
                                                                                'expires',
                                                                                'cost']},
             'shipping.modules.tieredweight.models.Zone': {'bases': ['django.db.models.Model'],
                                                           'constructor': [],
                                                           'docstring': '',
                                                           'methods': [('__unicode__', [], ''),
                                                                       ('_find_translation',
                                                                        ['language_code=None'],
                                                                        ''),
                                                                       ('delivery',
                                                                        [],
                                                                        '\n        Get the delivery, looking up by language code, falling back gracefully\n        '),
                                                                       ('description',
                                                                        [],
                                                                        '\n        Get the description, looking up by language code, falling back gracefully\n        '),
                                                                       ('method',
                                                                        [],
                                                                        '\n        Get the description, looking up by language code, falling back gracefully\n        '),
                                                                       ('cost',
                                                                        ['weight'],
                                                                        '\n        Get a price for this weight\n        ')],
                                                           'properties': ['carrier',
                                                                          'name',
                                                                          'countries',
                                                                          'handling',
                                                                          'delivery',
                                                                          'description',
                                                                          'method']},
             'shipping.modules.tieredweight.models.ZoneTranslation': {'bases': ['django.db.models.Model'],
                                                                      'constructor': [],
                                                                      'docstring': '',
                                                                      'methods': [('__unicode__',
                                                                                   [],
                                                                                   '')],
                                                                      'properties': ['zone',
                                                                                     'lang_code',
                                                                                     'description',
                                                                                     'method',
                                                                                     'delivery']},
             'shipping.modules.tieredweight.tests.TieredWeightCountryTest': {'bases': ['django.test.TestCase'],
                                                                             'constructor': [],
                                                                             'docstring': '',
                                                                             'methods': [('setUp',
                                                                                          [],
                                                                                          ''),
                                                                                         ('testDefault',
                                                                                          [],
                                                                                          ''),
                                                                                         ('testCountry',
                                                                                          [],
                                                                                          '')],
                                                                             'properties': ['country1',
                                                                                            'country2',
                                                                                            'carrier',
                                                                                            'zone1',
                                                                                            'zone2']},
             'shipping.modules.tieredweight.tests.TieredWeightExpiringTest': {'bases': ['django.test.TestCase'],
                                                                              'constructor': [],
                                                                              'docstring': '',
                                                                              'methods': [('setUp',
                                                                                           [],
                                                                                           ''),
                                                                                          ('testExpired',
                                                                                           [],
                                                                                           ''),
                                                                                          ('testNotExpired',
                                                                                           [],
                                                                                           '')],
                                                                              'properties': ['carrier',
                                                                                             'zone']},
             'shipping.modules.tieredweight.tests.TieredWeightTest': {'bases': ['django.test.TestCase'],
                                                                      'constructor': [],
                                                                      'docstring': '',
                                                                      'methods': [('setUp',
                                                                                   [],
                                                                                   ''),
                                                                                  ('testBase',
                                                                                   [],
                                                                                   ''),
                                                                                  ('testTwoPrices',
                                                                                   [],
                                                                                   '')],
                                                                      'properties': ['carrier',
                                                                                     'zone']},
             'shipping.modules.ups.shipper.Shipper': {'bases': ['shipping.modules.base.BaseShipper'],
                                                      'constructor': ['cart=None',
                                                                      'contact=None',
                                                                      'service_type=None'],
                                                      'docstring': '',
                                                      'methods': [('__str__',
                                                                   [],
                                                                   '\n        This is mainly helpful for debugging purposes\n        '),
                                                                  ('description',
                                                                   [],
                                                                   '\n        A basic description that will be displayed to the user when selecting their shipping options\n        '),
                                                                  ('cost',
                                                                   [],
                                                                   '\n        Complex calculations can be done here as long as the return value is a decimal figure\n        '),
                                                                  ('method',
                                                                   [],
                                                                   '\n        Describes the actual delivery service (Mail, FedEx, DHL, UPS, etc)\n        '),
                                                                  ('expectedDelivery',
                                                                   [],
                                                                   '\n        Can be a plain string or complex calcuation returning an actual date\n        '),
                                                                  ('valid',
                                                                   ['order=None'],
                                                                   '\n        Can do complex validation about whether or not this option is valid.\n        For example, may check to see if the recipient is in an allowed country\n        or location.\n        '),
                                                                  ('_process_request',
                                                                   ['connection', 'request'],
                                                                   '\n        Post the data and return the XML response\n        '),
                                                                  ('calculate',
                                                                   ['cart', 'contact'],
                                                                   '\n        Based on the chosen UPS method, we will do our call to UPS and see how much it will\n        cost.\n        We will also need to store the results for further parsing and return via the\n        methods above\n        '),
                                                                  ('verbose_log',
                                                                   ['*args', '**kwargs'],
                                                                   '')],
                                                      'properties': ['_calculated',
                                                                     'cart',
                                                                     'contact',
                                                                     'service_type_code',
                                                                     'service_type_text',
                                                                     'id',
                                                                     'raw',
                                                                     'delivery_days',
                                                                     'is_valid',
                                                                     'charges']},
             'shipping.modules.usps.shipper.Shipper': {'bases': ['shipping.modules.base.BaseShipper'],
                                                       'constructor': ['cart=None',
                                                                       'contact=None',
                                                                       'service_type=None'],
                                                       'docstring': '',
                                                       'methods': [('__str__',
                                                                    [],
                                                                    '\n        This is mainly helpful for debugging purposes\n        '),
                                                                   ('description',
                                                                    [],
                                                                    '\n        A basic description that will be displayed to the user when selecting their shipping options\n        '),
                                                                   ('cost',
                                                                    [],
                                                                    '\n        Complex calculations can be done here as long as the return value is a decimal figure\n        '),
                                                                   ('method',
                                                                    [],
                                                                    '\n        Describes the actual delivery service (Mail, FedEx, DHL, UPS, etc)\n        '),
                                                                   ('expectedDelivery',
                                                                    [],
                                                                    '\n        Can be a plain string or complex calcuation returning an actual date\n        '),
                                                                   ('valid',
                                                                    ['order=None'],
                                                                    '\n        Can do complex validation about whether or not this option is valid.\n        For example, may check to see if the recipient is in an allowed country\n        or location.\n        '),
                                                                   ('_process_request',
                                                                    ['connection',
                                                                     'request',
                                                                     'api=None'],
                                                                    '\n        Post the data and return the XML response\n        '),
                                                                   ('render_template',
                                                                    ['template',
                                                                     'cart=None',
                                                                     'contact=None'],
                                                                    ''),
                                                                   ('calculate',
                                                                    ['cart', 'contact'],
                                                                    '\n        Based on the chosen USPS method, we will do our call to USPS and see how\n        much it will cost. We will also need to store the results for further \n        parsing and return via the methods above\n        '),
                                                                   ('verbose_log',
                                                                    ['*args', '**kwargs'],
                                                                    '')],
                                                       'properties': ['_calculated',
                                                                      'cart',
                                                                      'contact',
                                                                      'service_type_code',
                                                                      'service_type_text',
                                                                      'id',
                                                                      'raw',
                                                                      'exact_date',
                                                                      'charges',
                                                                      'api',
                                                                      'is_intl',
                                                                      'delivery_days',
                                                                      'is_valid']},
             'shipping.tests.ShippingBaseTest': {'bases': ['django.test.TestCase'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [('setUp', [], ''),
                                                             ('tearDown', [], ''),
                                                             ('test_downloadable_zero_shipping',
                                                              [],
                                                              ''),
                                                             ('test_simple_shipping', [], '')],
                                                 'properties': ['fixtures',
                                                                'site',
                                                                'product1',
                                                                'cart1',
                                                                'cartitem1']},
             'tax.modules.area.admin.TaxRateForm': {'bases': ['django.forms.models.ModelForm'],
                                                    'constructor': [],
                                                    'docstring': '',
                                                    'methods': [('clean', [], '')],
                                                    'properties': []},
             'tax.modules.area.admin.TaxRateOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                       'constructor': [],
                                                       'docstring': '',
                                                       'methods': [],
                                                       'properties': ['list_display', 'form']},
             'tax.modules.area.models.TaxRate': {'bases': ['django.db.models.Model'],
                                                 'constructor': [],
                                                 'docstring': '\n    Actual percentage tax based on area and product class\n    ',
                                                 'methods': [('_country', [], ''),
                                                             ('_display_percentage', [], ''),
                                                             ('__unicode__', [], '')],
                                                 'properties': ['taxClass',
                                                                'taxZone',
                                                                'taxCountry',
                                                                'percentage',
                                                                'country',
                                                                'display_percentage']},
             'tax.modules.area.processor.Processor': {'bases': ['object'],
                                                      'constructor': ['order=None', 'user=None'],
                                                      'docstring': '',
                                                      'methods': [('_get_location', [], ''),
                                                                  ('get_percent',
                                                                   ["taxclass='Default'",
                                                                    'area=None',
                                                                    'country=None'],
                                                                   ''),
                                                                  ('get_rate',
                                                                   ['taxclass=None',
                                                                    'area=None',
                                                                    'country=None',
                                                                    'get_object=False',
                                                                    '**kwargs'],
                                                                   ''),
                                                                  ('by_price',
                                                                   ['taxclass', 'price'],
                                                                   ''),
                                                                  ('by_product',
                                                                   ['product',
                                                                    'quantity=Decimal(1)'],
                                                                   'Get the tax for a given product'),
                                                                  ('by_orderitem',
                                                                   ['orderitem'],
                                                                   ''),
                                                                  ('shipping',
                                                                   ['subtotal=None'],
                                                                   ''),
                                                                  ('process',
                                                                   ['order=None'],
                                                                   '\n        Calculate the tax and return it.\n        \n        Probably need to make a breakout.\n        ')],
                                                      'properties': ['method', 'order', 'user']},
             'tax.modules.no.processor.Processor': {'bases': ['object'],
                                                    'constructor': ['order=None', 'user=None'],
                                                    'docstring': '',
                                                    'methods': [('by_product',
                                                                 ['product',
                                                                  'quantity=Decimal(1)'],
                                                                 ''),
                                                                ('by_orderitem',
                                                                 ['orderitem'],
                                                                 ''),
                                                                ('by_price',
                                                                 ['taxclass', 'price'],
                                                                 ''),
                                                                ('shipping',
                                                                 ['product', 'user'],
                                                                 ''),
                                                                ('process',
                                                                 ['order=None'],
                                                                 '\n        Calculate the tax and return it\n        '),
                                                                ('get_percent',
                                                                 ['*args', '**kwargs'],
                                                                 ''),
                                                                ('get_rate',
                                                                 ['*args', '**kwargs'],
                                                                 '')],
                                                    'properties': ['method']},
             'tax.modules.percent.processor.Processor': {'bases': ['object'],
                                                         'constructor': ['order=None',
                                                                         'user=None'],
                                                         'docstring': '',
                                                         'methods': [('by_orderitem',
                                                                      ['orderitem'],
                                                                      ''),
                                                                     ('by_price',
                                                                      ['taxclass', 'price'],
                                                                      ''),
                                                                     ('by_product',
                                                                      ['product',
                                                                       'quantity=Decimal(1)'],
                                                                      ''),
                                                                     ('get_percent',
                                                                      ['*args', '**kwargs'],
                                                                      ''),
                                                                     ('get_rate',
                                                                      ['*args', '**kwargs'],
                                                                      ''),
                                                                     ('shipping',
                                                                      ['subtotal=None'],
                                                                      ''),
                                                                     ('process',
                                                                      ['order=None'],
                                                                      '\n        Calculate the tax and return it\n        ')],
                                                         'properties': ['method',
                                                                        'order',
                                                                        'user']},
             'tax.modules.us_sst.admin.TaxBoundryForm': {'bases': ['django.forms.models.ModelForm'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('clean', [], '')],
                                                         'properties': []},
             'tax.modules.us_sst.admin.TaxBoundryOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                            'constructor': [],
                                                            'docstring': '',
                                                            'methods': [],
                                                            'properties': ['fieldsets',
                                                                           'list_display']},
             'tax.modules.us_sst.admin.TaxRateOptions': {'bases': ['django.contrib.admin.ModelAdmin'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [],
                                                         'properties': ['list_display']},
             'tax.modules.us_sst.management.commands.sst_import_boundry.Command': {'bases': ['django.core.management.base.BaseCommand'],
                                                                                   'constructor': [],
                                                                                   'docstring': 'Manage command to import one of the CSV files from the SST website.\n\n    To update: Simple re-run on the newer CSV file.\n    Any unchanged entries will be left alone, and any changed ones will get\n    their end dates set properly and the new rows inserted. You will need to do\n    this quartly or as-needed by your tax jurisdictions.',
                                                                                   'methods': [('handle',
                                                                                                ['*args',
                                                                                                 '**options'],
                                                                                                '')],
                                                                                   'properties': []},
             'tax.modules.us_sst.management.commands.sst_import_rate.Command': {'bases': ['django.core.management.base.BaseCommand'],
                                                                                'constructor': [],
                                                                                'docstring': 'Manage command to import one of the CSV files from the SST website.\n\n    To update: Simple re-run on the newer CSV file.\n    Any unchanged entries will be left alone, and any changed ones will get\n    their end dates set properly and the new rows inserted. You will need to do\n    this quartly or as-needed by your tax jurisdictions.',
                                                                                'methods': [('handle',
                                                                                             ['*args',
                                                                                              '**options'],
                                                                                             '')],
                                                                                'properties': []},
             'tax.modules.us_sst.models.TaxBoundry': {'bases': ['django.db.models.Model'],
                                                      'constructor': [],
                                                      'docstring': '\n    Records for tax boundries in the default SST format as defined at:\n    http://www.streamlinedsalestax.org/Technology/RatesandBoundariesClean082605.pdf\n    ',
                                                      'methods': [('get_zip_range', [], ''),
                                                                  ('rates', ['date=None'], ''),
                                                                  ('get_percentage',
                                                                   ['date=None'],
                                                                   '\n        Emulate being a tax rate by returning a total percentage to tax the customer.\n        '),
                                                                  ('__unicode__', [], ''),
                                                                  ('lookup',
                                                                   ['zip',
                                                                    'ext=None',
                                                                    'date=None'],
                                                                   'Handy function to take a zip code and return the appropriate rates\n        for it.')],
                                                      'properties': ['recordType',
                                                                     'startDate',
                                                                     'endDate',
                                                                     'lowAddress',
                                                                     'highAddress',
                                                                     'oddEven',
                                                                     'streetPreDirection',
                                                                     'streetName',
                                                                     'streetSuffix',
                                                                     'streetPostDirection',
                                                                     'addressSecondaryAbbr',
                                                                     'addressSecondaryLow',
                                                                     'addressSecondaryHigh',
                                                                     'addressSecondaryOddEven',
                                                                     'cityName',
                                                                     'zipCode',
                                                                     'plus4',
                                                                     'zipCodeLow',
                                                                     'zipExtensionLow',
                                                                     'zipCodeHigh',
                                                                     'zipExtensionHigh',
                                                                     'serCode',
                                                                     'fipsStateCode',
                                                                     'fipsStateIndicator',
                                                                     'fipsCountyCode',
                                                                     'fipsPlaceCode',
                                                                     'fipsPlaceType',
                                                                     'special_1_code',
                                                                     'special_1_type',
                                                                     'special_2_code',
                                                                     'special_2_type',
                                                                     'special_3_code',
                                                                     'special_3_type',
                                                                     'special_4_code',
                                                                     'special_4_type',
                                                                     'special_5_code',
                                                                     'special_5_type',
                                                                     'special_6_code',
                                                                     'special_6_type',
                                                                     'special_7_code',
                                                                     'special_7_type',
                                                                     'special_8_code',
                                                                     'special_8_type',
                                                                     'special_9_code',
                                                                     'special_9_type',
                                                                     'special_10_code',
                                                                     'special_10_type',
                                                                     'special_11_code',
                                                                     'special_11_type',
                                                                     'special_12_code',
                                                                     'special_12_type',
                                                                     'special_13_code',
                                                                     'special_13_type',
                                                                     'special_14_code',
                                                                     'special_14_type',
                                                                     'special_15_code',
                                                                     'special_15_type',
                                                                     'special_16_code',
                                                                     'special_16_type',
                                                                     'special_17_code',
                                                                     'special_17_type',
                                                                     'special_18_code',
                                                                     'special_18_type',
                                                                     'special_19_code',
                                                                     'special_19_type',
                                                                     'special_20_code',
                                                                     'special_20_type',
                                                                     'date',
                                                                     'useIntrastate',
                                                                     'useFood',
                                                                     'zip_range',
                                                                     'percentage']},
             'tax.modules.us_sst.models.TaxRate': {'bases': ['django.db.models.Model'],
                                                   'constructor': [],
                                                   'docstring': '\n    Records for tax rates in the default SST format as defined at:\n    http://www.streamlinedsalestax.org/Technology/RatesandBoundariesClean082605.pdf\n    ',
                                                   'methods': [('__unicode__', [], ''),
                                                               ('rate',
                                                                ['intrastate=False',
                                                                 'food=False'],
                                                                '')],
                                                   'properties': ['state',
                                                                  'jurisdictionType',
                                                                  'jurisdictionFipsCode',
                                                                  'generalRateIntrastate',
                                                                  'generalRateInterstate',
                                                                  'foodRateIntrastate',
                                                                  'foodRateInterstate',
                                                                  'startDate',
                                                                  'endDate']},
             'tax.modules.us_sst.models.Taxable': {'bases': ['django.db.models.Model'],
                                                   'constructor': [],
                                                   'docstring': "\n    Map that says what items are taxable in a jurisdiction.\n\n    To use properly, assign products to a meaningful TaxClass, such as 'Shipping',\n    'Food', 'Default'. Then create rules for the jurisdictions where you are\n    required to collect tax. If for example, you are taxing objects in two states\n    and 'Food' is taxable in one and not the other, but shipping is the other\n    way around, you would need to create the following entries:\n\n    food = TaxClass(...)\n    default = TaxClass(...)\n    shipping = TaxClass(...)\n\n    one_state = AdminArea(...)\n    two_state = AdminArea(...)\n    usa = Country(...)\n\n    Taxable(taxClass=default,  isTaxable=True,  taxZone=one_state, taxCountry=usa)\n    Taxable(taxClass=food,     isTaxable=False, useFood=True, taxZone=one_state, taxCountry=usa)\n    Taxable(taxClass=shipping, isTaxable=True,  taxZone=one_state, taxCountry=usa)\n    Taxable(taxClass=default,  isTaxable=True,  taxZone=two_state, taxCountry=usa)\n    Taxable(taxClass=food,     isTaxable=True,  useFood=True, taxZone=two_state, taxCountry=usa)\n    Taxable(taxClass=shipping, isTaxable=False, taxZone=two_state, taxCountry=usa)\n\n    Laws vary drastically form state to state, so please make sure to make needed\n    TaxClasses for all objects that vary in taxing jurisdictions to which you\n    must submit.\n\n    If you do not at least create a 'Default' entry for a state, then you will\n    not be collecting any taxes for that state. Only create entires for states\n    where you are obligated to collect and report taxes.\n\n    SST defines food rates and interstate vs. intrastate rates. You may override\n    these, otherwise taxes will be charged at the non-food, intrastate rate by default.\n\n    WARNING: If a product is taxable in ANY jurisdiction, it must be set taxable\n    in the product. You disable it per-jurisdiction by disabling it here. You\n    cannot enable it here if it is disabled on the product itself.\n    ",
                                                   'methods': [('_country', [], ''),
                                                               ('__unicode__', [], '')],
                                                   'properties': ['taxClass',
                                                                  'taxZone',
                                                                  'taxCountry',
                                                                  'isTaxable',
                                                                  'useIntrastate',
                                                                  'useFood',
                                                                  'country']},
             'tax.modules.us_sst.tax.Processor': {'bases': ['object'],
                                                  'constructor': ['order=None', 'user=None'],
                                                  'docstring': '',
                                                  'methods': [('_get_location', [], ''),
                                                              ('get_percent',
                                                               ["taxclass='Default'",
                                                                'area=None',
                                                                'country=None'],
                                                               ''),
                                                              ('get_boundry',
                                                               ['taxable_class',
                                                                'location',
                                                                'date=None'],
                                                               "\n        Location is a dict of:\n            'area', 'country': objects\n            'street1', 'street2', 'city', 'state', 'postal_code': strings\n        "),
                                                              ('get_rate',
                                                               ['taxclass=None',
                                                                'area=None',
                                                                'country=None',
                                                                'get_object=False',
                                                                '**kwargs'],
                                                               ''),
                                                              ('by_price',
                                                               ['taxclass', 'price'],
                                                               ''),
                                                              ('by_product',
                                                               ['product',
                                                                'quantity=Decimal(1)'],
                                                               'Get the tax for a given product'),
                                                              ('by_orderitem',
                                                               ['orderitem'],
                                                               ''),
                                                              ('process',
                                                               ['order=None'],
                                                               '\n        Calculate the tax and return it.\n\n        Probably need to make a breakout.\n        ')],
                                                  'properties': ['method', 'order', 'user']},
             'tax.templatetags.satchmo_tax.CartTaxedTotalNode': {'bases': ['django.template.Node'],
                                                                 'constructor': ['cart',
                                                                                 'currency'],
                                                                 'docstring': '',
                                                                 'methods': [('render',
                                                                              ['context'],
                                                                              '')],
                                                                 'properties': ['cart',
                                                                                'currency']},
             'tax.templatetags.satchmo_tax.CartitemLineTaxedTotalNode': {'bases': ['django.template.Node'],
                                                                         'constructor': ['cartitem',
                                                                                         'currency'],
                                                                         'docstring': '',
                                                                         'methods': [('render',
                                                                                      ['context'],
                                                                                      '')],
                                                                         'properties': ['cartitem',
                                                                                        'currency']},
             'tax.templatetags.satchmo_tax.TaxRateNode': {'bases': ['django.template.Node'],
                                                          'constructor': ['taxclass',
                                                                          'order',
                                                                          'digits'],
                                                          'docstring': 'Retrieve the tax rate for a category',
                                                          'methods': [('render',
                                                                       ['context'],
                                                                       '')],
                                                          'properties': ['taxclass',
                                                                         'order',
                                                                         'digits']},
             'tax.templatetags.satchmo_tax.TaxedPriceNode': {'bases': ['django.template.Node'],
                                                             'constructor': ['price',
                                                                             'currency',
                                                                             'taxclass'],
                                                             'docstring': 'Returns the taxed price for an amount.\n    ',
                                                             'methods': [('render',
                                                                          ['context'],
                                                                          '')],
                                                             'properties': ['price',
                                                                            'taxclass',
                                                                            'currency']},
             'tax.tests.TaxTest': {'bases': ['django.test.TestCase'],
                                   'constructor': [],
                                   'docstring': '',
                                   'methods': [('tearDown', [], ''),
                                               ('testAreaCountries',
                                                [],
                                                'Test Area tax module'),
                                               ('testDuplicateAdminAreas',
                                                [],
                                                'Test the situation where we have multiple adminareas with the same name'),
                                               ('testPercent',
                                                [],
                                                'Test percent tax without shipping'),
                                               ('testPercentShipping',
                                                [],
                                                'Test percent tax with shipping'),
                                               ('testFractionalPercentShipping',
                                                [],
                                                'Test proper handling of taxes when using a fractional percent tax.  This can cause\n        situations where the total is xx.xxxxx, the payment processor charges xx.xx, \n        leaving 00.00xxxx remaining.')],
                                   'properties': ['fixtures']}},
 'CONSTANTS': ['keyedcache.log',
               'keyedcache.CACHED_KEYS',
               'keyedcache.CACHE_CALLS',
               'keyedcache.CACHE_HITS',
               'keyedcache.KEY_DELIM',
               'keyedcache.REQUEST_CACHE',
               'keyedcache.CACHE_PREFIX',
               'keyedcache.CACHE_PREFIX',
               'keyedcache._CACHE_ENABLED',
               'keyedcache.models.log',
               'keyedcache.tests.CACHE_HIT',
               'keyedcache.tests.cachetest',
               'keyedcache.threaded.log',
               'keyedcache.urls.urlpatterns',
               'keyedcache.views.log',
               'keyedcache.views.YN',
               'keyedcache.views.stats_page',
               'keyedcache.views.view_page',
               'keyedcache.views.delete_page',
               'l10n.config.LANGUAGE_GROUP',
               'l10n.config.CURRENCY',
               'l10n.config.ALLOW_TRANSLATIONS',
               'l10n.config.LANGUAGE_ALLOW_TRANSLATIONS',
               'l10n.config.LANGUAGES_AVAILABLE',
               'l10n.mixins.__docformat__',
               'l10n.mixins.log',
               'l10n.models.CONTINENTS',
               'l10n.models.AREAS',
               'l10n.urls.urlpatterns',
               'l10n.utils.log',
               'make-messages.pythonize_re',
               'posplit.__version__',
               'posplit.USAGE',
               'l10n.validators.capostcode.CA_POSTCODE_RE',
               'l10n.validators.ukpostcode.POSTAL_ZONES',
               'l10n.validators.ukpostcode.POSTAL_ZONES_ONE_CHAR',
               'l10n.validators.ukpostcode.zone',
               'l10n.validators.ukpostcode.POSTAL_ZONES_TWO_CHARS',
               'l10n.validators.ukpostcode.zone',
               'l10n.validators.ukpostcode.THIRD_POS_CHARS',
               'l10n.validators.ukpostcode.FOURTH_POS_CHARS',
               'l10n.validators.ukpostcode.INCODE_CHARS',
               'l10n.validators.ukpostcode.OUTCODE_PATTERN',
               'l10n.validators.ukpostcode.INCODE_PATTERN',
               'l10n.validators.ukpostcode.POSTCODE_PATTERN',
               'l10n.validators.ukpostcode.STANDALONE_OUTCODE_PATTERN',
               'l10n.validators.ukpostcode.POSTCODE_REGEX',
               'l10n.validators.ukpostcode.STANDALONE_OUTCODE_REGEX',
               'l10n.validators.uspostcode.US_POSTCODE_RE',
               'livesettings.forms.log',
               'livesettings.functions.log',
               'livesettings.functions._NOTSET',
               'livesettings.models.log',
               'livesettings.models.__all__',
               'livesettings.models._safe_get_siteid',
               'livesettings.overrides.__all__',
               'livesettings.overrides._safe_get_siteid',
               'livesettings.signals.configuration_value_changed',
               'livesettings.tests.log',
               'livesettings.urls.urlpatterns',
               'livesettings.values.__all__',
               'livesettings.values._WARN',
               'livesettings.values.log',
               'livesettings.values.NOTSET',
               'livesettings.values.BASE_GROUP',
               'livesettings.views.log',
               'livesettings.views.group_settings',
               'livesettings.views.export_as_python',
               'livesettings.templatetags.config_tags.log',
               'livesettings.templatetags.config_tags.register',
               'payment.config._',
               'payment.config.log',
               'payment.config.PAYMENT_GROUP',
               'payment.config.CRON_KEY',
               'payment.config.ALLOW_URL_CRON',
               'payment.config.PAYMENT_LIVE',
               'payment.config.ORDER_EMAIL',
               'payment.config.ORDER_EMAIL_EXTRA',
               'payment.config._default_modules',
               'payment.config.module',
               'payment.config.extra_payment',
               'payment.config.extra',
               'payment.decorators.__docformat__',
               'payment.forms.log',
               'payment.forms.MONTHS',
               'payment.forms.month',
               'payment.listeners.log',
               'payment.models.log',
               'payment.signals.confirm_sanity_check',
               'payment.signals.payment_choices',
               'payment.signals.payment_methods_query',
               'payment.tests.alphabet',
               'payment.urls.log',
               'payment.urls.config',
               'payment.urls.urlpatterns',
               'payment.utils.log',
               'payment.modules.base.log',
               'payment.modules.base.NOTSET',
               'payment.modules.authorizenet.config.gettext',
               'payment.modules.authorizenet.config._strings',
               'payment.modules.authorizenet.config.PAYMENT_MODULES',
               'payment.modules.authorizenet.config.PAYMENT_GROUP',
               'payment.modules.authorizenet.config.ARB_ENABLED',
               'payment.modules.authorizenet.processor.settings_module',
               'payment.modules.authorizenet.processor.settingsl',
               'payment.modules.authorizenet.processor.settings',
               'payment.modules.authorizenet.processor.sampleOrder',
               'payment.modules.authorizenet.processor.authorize_settings',
               'payment.modules.authorizenet.processor.processor',
               'payment.modules.authorizenet.processor.results',
               'payment.modules.authorizenet.urls.config',
               'payment.modules.authorizenet.urls.urlpatterns',
               'payment.modules.authorizenet.views.pay_ship_info',
               'payment.modules.authorizenet.views.confirm_info',
               'payment.modules.autosuccess.config.PAYMENT_MODULES',
               'payment.modules.autosuccess.config.PAYMENT_GROUP',
               'payment.modules.autosuccess.urls.urlpatterns',
               'payment.modules.autosuccess.views.log',
               'payment.modules.autosuccess.views.one_step',
               'payment.modules.cod.config.gettext',
               'payment.modules.cod.config.PAYMENT_MODULES',
               'payment.modules.cod.config.PAYMENT_GROUP',
               'payment.modules.cod.urls.config',
               'payment.modules.cod.urls.urlpatterns',
               'payment.modules.cod.views.cod',
               'payment.modules.cod.views.pay_ship_info',
               'payment.modules.cod.views.confirm_info',
               'payment.modules.cybersource.config.gettext',
               'payment.modules.cybersource.config._strings',
               'payment.modules.cybersource.config.PAYMENT_MODULES',
               'payment.modules.cybersource.config.PAYMENT_GROUP',
               'payment.modules.cybersource.processor.CYBERSOURCE_RESPONSES',
               'payment.modules.cybersource.processor.settings_module',
               'payment.modules.cybersource.processor.settingsl',
               'payment.modules.cybersource.processor.settings',
               'payment.modules.cybersource.processor.sampleOrder',
               'payment.modules.cybersource.processor.cybersource_settings',
               'payment.modules.cybersource.processor.processor',
               'payment.modules.cybersource.processor.results',
               'payment.modules.cybersource.urls.config',
               'payment.modules.cybersource.urls.urlpatterns',
               'payment.modules.cybersource.views.pay_ship_info',
               'payment.modules.cybersource.views.confirm_info',
               'payment.modules.dummy.config.gettext',
               'payment.modules.dummy.config.PAYMENT_MODULES',
               'payment.modules.dummy.config.PAYMENT_GROUP',
               'payment.modules.dummy.urls.config',
               'payment.modules.dummy.urls.urlpatterns',
               'payment.modules.dummy.views.dummy',
               'payment.modules.dummy.views.pay_ship_info',
               'payment.modules.dummy.views.confirm_info',
               'payment.modules.giftcertificate.config.PAYMENT_MODULES',
               'payment.modules.giftcertificate.config.PRODUCTS',
               'payment.modules.giftcertificate.config.PAYMENT_GROUP',
               'payment.modules.giftcertificate.models.GIFTCODE_KEY',
               'payment.modules.giftcertificate.models.log',
               'payment.modules.giftcertificate.tests.log',
               'payment.modules.giftcertificate.tests.alphabet',
               'payment.modules.giftcertificate.urls.config',
               'payment.modules.giftcertificate.urls.urlpatterns',
               'payment.modules.giftcertificate.views.log',
               'payment.modules.giftcertificate.views.gc',
               'payment.modules.giftcertificate.templatetags.satchmo_giftcertificate.register',
               'payment.modules.google.CHECKOUT_BUTTON_SIZES',
               'payment.modules.google.config.gettext',
               'payment.modules.google.config.PAYMENT_MODULES',
               'payment.modules.google.config.PAYMENT_GROUP',
               'payment.modules.google.urls.config',
               'payment.modules.google.urls.urlpatterns',
               'payment.modules.google.views.log',
               'payment.modules.paypal.config.PAYMENT_MODULES',
               'payment.modules.paypal.config.PAYMENT_GROUP',
               'payment.modules.paypal.urls.config',
               'payment.modules.paypal.urls.urlpatterns',
               'payment.modules.paypal.views.log',
               'payment.modules.paypal.views.pay_ship_info',
               'payment.modules.paypal.views.confirm_info',
               'payment.modules.protx.config.gettext',
               'payment.modules.protx.config._strings',
               'payment.modules.protx.config.REQUIRES_ISSUE_NUMBER',
               'payment.modules.protx.config.PAYMENT_MODULES',
               'payment.modules.protx.config.PAYMENT_GROUP',
               'payment.modules.protx.forms.log',
               'payment.modules.protx.processor.PROTOCOL',
               'payment.modules.protx.processor.PROTX_DEFAULT_URLS',
               'payment.modules.protx.processor.FORM',
               'payment.modules.protx.urls.config',
               'payment.modules.protx.urls.urlpatterns',
               'payment.modules.protx.views.log',
               'payment.modules.purchaseorder.config.log',
               'payment.modules.purchaseorder.config.PAYMENT_MODULES',
               'payment.modules.purchaseorder.config.PAYMENT_GROUP',
               'payment.modules.purchaseorder.urls.config',
               'payment.modules.purchaseorder.urls.urlpatterns',
               'payment.modules.purchaseorder.views.log',
               'payment.modules.purchaseorder.views.settings',
               'payment.modules.sermepa.config.PAYMENT_MODULES',
               'payment.modules.sermepa.config.PAYMENT_GROUP',
               'payment.modules.sermepa.urls.config',
               'payment.modules.sermepa.urls.urlpatterns',
               'payment.modules.sermepa.views.log',
               'payment.modules.sermepa.views.pay_ship_info',
               'payment.modules.sermepa.views.confirm_info',
               'payment.modules.trustcommerce.config.gettext',
               'payment.modules.trustcommerce.config._strings',
               'payment.modules.trustcommerce.config.PAYMENT_MODULES',
               'payment.modules.trustcommerce.config.PAYMENT_GROUP',
               'payment.modules.trustcommerce.processor.sampleOrder',
               'payment.modules.trustcommerce.processor.trustcommerce_settings',
               'payment.modules.trustcommerce.processor.processor',
               'payment.modules.trustcommerce.processor.results',
               'payment.modules.trustcommerce.urls.config',
               'payment.modules.trustcommerce.urls.urlpatterns',
               'payment.templatetags.satchmo_checkout.register',
               'payment.templatetags.satchmo_googlecheckout.register',
               'payment.views.balance.log',
               'payment.views.checkout.success',
               'payment.views.confirm.log',
               'payment.views.confirm.credit_confirm_info',
               'payment.views.contact.log',
               'payment.views.contact.contact_info_view',
               'payment.views.cron.log',
               'payment.views.payship.log',
               'payment.views.payship.selection',
               'product.config.PRODUCT_GROUP',
               'product.config.PRODUCT_TYPES',
               'product.config.extra_product',
               'product.config.extra',
               'product.forms.log',
               'product.listeners.log',
               'product.models.log',
               'product.models.dimension_units',
               'product.models.weight_units',
               'product.models.DISCOUNT_SHIPPING_CHOICES',
               'product.models.SHIP_CLASS_CHOICES',
               'product.models.UNSET',
               'product.queries.log',
               'product.signals.discount_validate',
               'product.signals.index_prerender',
               'product.signals.satchmo_price_query',
               'product.signals.subtype_order_success',
               'product.utils.log',
               'product.templatetags.satchmo_discounts.register',
               'product.templatetags.satchmo_product.register',
               'product.templatetags.satchmo_product_admin.register',
               'product.urls.catbase',
               'product.urls.prodbase',
               'product.urls.urlpatterns',
               'product.urls.base.adminpatterns',
               'product.urls.category.urlpatterns',
               'product.urls.products.urlpatterns',
               'product.views.log',
               'product.views.NOTSET',
               'product.views.adminviews.log',
               'product.views.adminviews.edit_inventory',
               'product.views.adminviews.export_products',
               'product.views.adminviews.import_products',
               'product.views.adminviews.variation_manager',
               'product.views.filters.log',
               'satchmo_ext.brand.config.BRAND_SLUG',
               'satchmo_ext.brand.models.log',
               'satchmo_ext.brand.urls.log',
               'satchmo_ext.brand.urls.urlpatterns',
               'satchmo_ext.brand.urls.brandbase',
               'satchmo_ext.brand.urls.brandpatterns',
               'satchmo_ext.brand.views.log',
               'satchmo_ext.brand.templatetags.satchmo_brands.register',
               'satchmo_ext.contrib.cartqty_discounts.log',
               'satchmo_ext.newsletter.log',
               'satchmo_ext.newsletter.config.NEWSLETTER_GROUP',
               'satchmo_ext.newsletter.config.NEWSLETTER_ACTIVE',
               'satchmo_ext.newsletter.config.extra_payment',
               'satchmo_ext.newsletter.config.extra',
               'satchmo_ext.newsletter.forms._NOTSET',
               'satchmo_ext.newsletter.listeners.log',
               'satchmo_ext.newsletter.mailman.log',
               'satchmo_ext.newsletter.models.log',
               'satchmo_ext.newsletter.models._NOTSET',
               'satchmo_ext.newsletter.signals.newsletter_subscription_updated',
               'satchmo_ext.newsletter.simple.log',
               'satchmo_ext.newsletter.tests.log',
               'satchmo_ext.newsletter.urls.log',
               'satchmo_ext.newsletter.urls.urlpatterns',
               'satchmo_ext.newsletter.urls.newsbase',
               'satchmo_ext.newsletter.urls.newspatterns',
               'satchmo_ext.product_feeds.tests.domain',
               'satchmo_ext.product_feeds.urls.log',
               'satchmo_ext.product_feeds.urls.urlpatterns',
               'satchmo_ext.product_feeds.urls.feedpatterns',
               'satchmo_ext.product_feeds.templatetags.satchmo_feed.mark_safe',
               'satchmo_ext.product_feeds.templatetags.satchmo_feed.register',
               'satchmo_ext.product_feeds.templatetags.satchmo_feed.GOOGLE_TAGS',
               'satchmo_ext.productratings.config.ENABLE_AKISMET',
               'satchmo_ext.productratings.config.AKISMET',
               'satchmo_ext.productratings.listeners.log',
               'satchmo_ext.productratings.queries.log',
               'satchmo_ext.productratings.urls.log',
               'satchmo_ext.productratings.urls.productpatterns',
               'satchmo_ext.productratings.urls.commentpatterns',
               'satchmo_ext.productratings.utils.log',
               'satchmo_ext.productratings.templatetags.satchmo_ratings.log',
               'satchmo_ext.productratings.templatetags.satchmo_ratings.register',
               'satchmo_ext.recentlist.__AUTHOR__',
               'satchmo_ext.recentlist.middleware.log',
               'satchmo_ext.recentlist.middleware.producturl',
               'satchmo_ext.recentlist.middleware.producturl',
               'satchmo_ext.recentlist.middleware.urlre',
               'satchmo_ext.recentlist.middleware.urlre',
               'satchmo_ext.recentlist.templatetags.satchmo_recentlist.register',
               'satchmo_ext.satchmo_toolbar.listeners.log',
               'satchmo_ext.tieredpricing.admin.ix',
               'satchmo_ext.tieredpricing.models.log',
               'satchmo_ext.upsell.models.log',
               'satchmo_ext.upsell.models.UPSELL_CHOICES',
               'satchmo_ext.upsell.views.log',
               'satchmo_ext.upsell.templatetags.satchmo_upsell.register',
               'satchmo_ext.wishlist.listeners.log',
               'satchmo_ext.wishlist.tests.domain',
               'satchmo_ext.wishlist.urls.log',
               'satchmo_ext.wishlist.urls.urlpatterns',
               'satchmo_ext.wishlist.urls.wishbase',
               'satchmo_ext.wishlist.urls.wishpatterns',
               'satchmo_ext.wishlist.views.log',
               'satchmo_store.VERSION',
               'satchmo_store.str_version',
               'satchmo_store.str_version',
               'satchmo_store.__version__',
               'satchmo_store.accounts.email-auth.email_re',
               'satchmo_store.accounts.forms.log',
               'satchmo_store.accounts.mail.log',
               'satchmo_store.accounts.signals.satchmo_registration',
               'satchmo_store.accounts.signals.satchmo_registration_verified',
               'satchmo_store.accounts.urls.verify',
               'satchmo_store.accounts.urls.password_reset_dict',
               'satchmo_store.accounts.views.log',
               'satchmo_store.accounts.views.YESNO',
               'satchmo_store.accounts.views.emaillogin',
               'satchmo_store.contact.CUSTOMER_ID',
               'satchmo_store.contact.config.ACCOUNT_VERIFICATION',
               'satchmo_store.contact.forms.log',
               'satchmo_store.contact.forms.selection',
               'satchmo_store.contact.listeners.log',
               'satchmo_store.contact.models.log',
               'satchmo_store.contact.models.PHONE_CHOICES',
               'satchmo_store.contact.signals.satchmo_contact_location_changed',
               'satchmo_store.contact.signals.satchmo_contact_view',
               'satchmo_store.contact.signals.validate_postcode',
               'satchmo_store.contact.urls.urlpatterns',
               'satchmo_store.contact.views.log',
               'satchmo_store.contact.views.view',
               'satchmo_store.contact.views.update',
               'satchmo_store.contact.supplier.models.SUPPLIERORDER_STATUS',
               'satchmo_store.contact.templatetags.satchmo_contact.register',
               'satchmo_store.shop.log',
               'satchmo_store.shop.config.SHOP_GROUP',
               'satchmo_store.shop.config.default_icon_url',
               'satchmo_store.shop.config.LOGO_URI',
               'satchmo_store.shop.config.ENFORCE_STATE',
               'satchmo_store.shop.config.GOOGLE_GROUP',
               'satchmo_store.shop.config.GOOGLE_ANALYTICS',
               'satchmo_store.shop.config.GOOGLE_USE_URCHIN',
               'satchmo_store.shop.config.GOOGLE_ANALYTICS_CODE',
               'satchmo_store.shop.config.GOOGLE_ADWORDS',
               'satchmo_store.shop.config.GOOGLE_ADWORDS_ID',
               'satchmo_store.shop.context_processors.log',
               'satchmo_store.shop.forms.log',
               'satchmo_store.shop.listeners.log',
               'satchmo_store.shop.models.log',
               'satchmo_store.shop.models.ORDER_CHOICES',
               'satchmo_store.shop.models.ORDER_STATUS',
               'satchmo_store.shop.notification.log',
               'satchmo_store.shop.satchmo_settings.satchmo_settings_defaults',
               'satchmo_store.shop.signals.order_success',
               'satchmo_store.shop.signals.order_cancel_query',
               'satchmo_store.shop.signals.order_cancelled',
               'satchmo_store.shop.signals.satchmo_cart_add_complete',
               'satchmo_store.shop.signals.satchmo_cart_add_verify',
               'satchmo_store.shop.signals.satchmo_cart_changed',
               'satchmo_store.shop.signals.satchmo_cartitem_price_query',
               'satchmo_store.shop.signals.satchmo_cart_details_query',
               'satchmo_store.shop.signals.satchmo_order_status_changed',
               'satchmo_store.shop.signals.satchmo_post_copy_item_to_order',
               'satchmo_store.shop.signals.satchmo_context',
               'satchmo_store.shop.signals.cart_add_view',
               'satchmo_store.shop.signals.satchmo_shipping_price_query',
               'satchmo_store.shop.SSLMiddleware.__license__',
               'satchmo_store.shop.SSLMiddleware.__copyright__',
               'satchmo_store.shop.SSLMiddleware.__author__',
               'satchmo_store.shop.SSLMiddleware.HTTPS_PATHS',
               'satchmo_store.shop.SSLMiddleware.SSL',
               'satchmo_store.shop.SSLMiddleware.SSLPORT',
               'satchmo_store.shop.tests.domain',
               'satchmo_store.shop.tests.prefix',
               'satchmo_store.shop.tests.prefix',
               'satchmo_store.shop.urls.urlpatterns',
               'satchmo_store.shop.templatetags.messaging_tags.register',
               'satchmo_store.shop.templatetags.satchmo_adminapplist.register',
               'satchmo_store.shop.templatetags.satchmo_adminorder_tags.register',
               'satchmo_store.shop.templatetags.satchmo_cart.log',
               'satchmo_store.shop.templatetags.satchmo_cart.register',
               'satchmo_store.shop.templatetags.satchmo_cart.cartitem_total',
               'satchmo_store.shop.templatetags.satchmo_cart.cart_total',
               'satchmo_store.shop.templatetags.satchmo_category.log',
               'satchmo_store.shop.templatetags.satchmo_category.register',
               'satchmo_store.shop.templatetags.satchmo_currency.log',
               'satchmo_store.shop.templatetags.satchmo_currency.register',
               'satchmo_store.shop.templatetags.satchmo_google.register',
               'satchmo_store.shop.templatetags.satchmo_order.register',
               'satchmo_store.shop.templatetags.satchmo_price.register',
               'satchmo_store.shop.templatetags.satchmo_util.log',
               'satchmo_store.shop.templatetags.satchmo_util.register',
               'satchmo_store.shop.views.cart.log',
               'satchmo_store.shop.views.cart.NOTSET',
               'satchmo_store.shop.views.cart.display',
               'satchmo_store.shop.views.comments.log',
               'satchmo_store.shop.views.contact.log',
               'satchmo_store.shop.views.contact.email_choices',
               'satchmo_store.shop.views.download.SHA1_RE',
               'satchmo_store.shop.views.orders.order_history',
               'satchmo_store.shop.views.orders.order_tracking',
               'satchmo_store.shop.views.sitemaps.sitemaps',
               'satchmo_store.shop.views.smart.log',
               'satchmo_store.urls.shop_base',
               'satchmo_store.urls.shopregex',
               'satchmo_store.urls.shoppatterns',
               'satchmo_store.urls.urlpatterns',
               'satchmo_store.urls.base.log',
               'satchmo_store.urls.base.urlpatterns',
               'satchmo_store.urls.default.log',
               'satchmo_store.urls.default.urlpatterns',
               'satchmo_store.urls.default.adminpatterns',
               'satchmo_store.urls.default.urlpatterns',
               'satchmo_store.urls.default.baseurlregex',
               'satchmo_utils.log',
               'satchmo_utils._MODULES',
               'satchmo_utils._LETTERS',
               'satchmo_utils.dynamic.log',
               'satchmo_utils.fields.log',
               'satchmo_utils.numbers.log',
               'satchmo_utils.sslurllib.log',
               'satchmo_utils.sslurllib.runningPython26',
               'satchmo_utils.sslurllib.runningPython26',
               'satchmo_utils.sslurllib._sane',
               'satchmo_utils.sslurllib._sane',
               'satchmo_utils.sslurllib.__all__',
               'satchmo_utils.sslurllib.v2handler',
               'satchmo_utils.sslurllib.opener',
               'satchmo_utils.unique_id._is_alnum_re',
               'satchmo_utils.unique_id._ID_MIN_LENGTH',
               'satchmo_utils.unique_id._ID_MAX_LENGTH',
               'satchmo_utils.views.ccInfo',
               'satchmo_utils.widgets.log',
               'satchmo_utils.templatetags.normalize_decimal.__author__',
               'satchmo_utils.templatetags.normalize_decimal.__date__',
               'satchmo_utils.templatetags.normalize_decimal.mark_safe',
               'satchmo_utils.templatetags.normalize_decimal.log',
               'satchmo_utils.templatetags.normalize_decimal.register',
               'satchmo_utils.thumbnail.config.THUMB_GROUP',
               'satchmo_utils.thumbnail.field.log',
               'satchmo_utils.thumbnail.field.NOTSET',
               'satchmo_utils.thumbnail.text._REMOVELIST',
               'satchmo_utils.thumbnail.text._RE_REMOVE',
               'satchmo_utils.thumbnail.text._RE_UNNEEDED',
               'satchmo_utils.thumbnail.text._BR_CLEANUP',
               'satchmo_utils.thumbnail.utils.log',
               'satchmo_utils.thumbnail.utils.image_cache',
               'satchmo_utils.thumbnail.utils._FILE_CACHE_TIMEOUT',
               'satchmo_utils.thumbnail.utils._THUMBNAIL_GLOB',
               'satchmo_utils.thumbnail.templatetags.satchmo_thumbnail.register',
               'shipping.config.SHIPPING_GROUP',
               'shipping.config.SHIPPING_ACTIVE',
               'shipping.config._default_modules',
               'shipping.config.module',
               'shipping.config.extra_shipping',
               'shipping.config.extra',
               'shipping.signals.shipping_data_query',
               'shipping.signals.shipping_choices_query',
               'shipping.urls.adminpatterns',
               'shipping.views.displayDoc',
               'shipping.modules.canadapost.config.SHIP_MODULES',
               'shipping.modules.canadapost.config.SHIPPING_GROUP',
               'shipping.modules.canadapost.shipper.log',
               'shipping.modules.fedex.config.SHIP_MODULES',
               'shipping.modules.fedex.config.SHIPPING_GROUP',
               'shipping.modules.fedex.shipper.log',
               'shipping.modules.flat.config.SHIP_MODULES',
               'shipping.modules.flat.config.SHIPPING_GROUP',
               'shipping.modules.flat.shipper._',
               'shipping.modules.per.config.SHIP_MODULES',
               'shipping.modules.per.config.SHIPPING_GROUP',
               'shipping.modules.per.shipper._',
               'shipping.modules.productshipping.config.log',
               'shipping.modules.productshipping.models.log',
               'shipping.modules.productshipping.templatetags.product_shipping_tags.register',
               'shipping.modules.tiered.config.log',
               'shipping.modules.tiered.models.log',
               'shipping.modules.tiered.templatetags.tiered_tags.register',
               'shipping.modules.tieredquantity.models.log',
               'shipping.modules.tieredweight.config.log',
               'shipping.modules.tieredweight.models.log',
               'shipping.modules.ups.config.SHIP_MODULES',
               'shipping.modules.ups.config.SHIPPING_GROUP',
               'shipping.modules.ups.shipper.log',
               'shipping.modules.usps.config.SHIP_MODULES',
               'shipping.modules.usps.config.SHIPPING_GROUP',
               'shipping.modules.usps.shipper.CODES',
               'shipping.modules.usps.shipper.ESTIMATES',
               'shipping.modules.usps.shipper.APIS',
               'shipping.modules.usps.shipper.log',
               'tax.config.TAX_GROUP',
               'tax.config.TAX_MODULE',
               'tax.config.DEFAULT_VIEW_TAX',
               'tax.config.PRODUCTS_TAXABLE_BY_DEFAULT',
               'tax.config.extra_tax',
               'tax.config.extra',
               'tax.tests.log',
               'tax.utils.TWOPLACES',
               'tax.modules.area.config.TAX_GROUP',
               'tax.modules.area.processor.log',
               'tax.modules.percent.config.TAX_GROUP',
               'tax.modules.us_sst.admin.ADDRESS_FIELDS',
               'tax.modules.us_sst.admin.ZIP_FIELDS',
               'tax.modules.us_sst.admin.RATE_FIELDS',
               'tax.modules.us_sst.config.TAX_MODULE',
               'tax.modules.us_sst.config.TAX_GROUP',
               'tax.modules.us_sst.models.JURISDICTION_CHOICES',
               'tax.modules.us_sst.models.TAX_BOUNDRY_CHOICES',
               'tax.modules.us_sst.models.ODD_EVEN_CHOICES',
               'tax.modules.us_sst.tax.log',
               'tax.modules.us_sst.management.commands.sst_import_boundry.CSV_MAP',
               'tax.modules.us_sst.management.commands.sst_import_boundry.DELETE_FIELDS',
               'tax.templatetags.satchmo_tax.log',
               'tax.templatetags.satchmo_tax.register'],
 'FUNCTIONS': [('keyedcache.cache_delete', ['*keys', '**kwargs'], ''),
               ('keyedcache.cache_delete_function', ['func'], ''),
               ('keyedcache.cache_enabled', [], ''),
               ('keyedcache.cache_enable', ['state=True'], ''),
               ('keyedcache._cache_flush_all', [], ''),
               ('keyedcache.cache_function',
                ['length=settings.CACHE_TIMEOUT'],
                "\n    A variant of the snippet posted by Jeff Wheeler at\n    http://www.djangosnippets.org/snippets/109/\n\n    Caches a function, using the function and its arguments as the key, and the return\n    value as the value saved. It passes all arguments on to the function, as\n    it should.\n\n    The decorator itself takes a length argument, which is the number of\n    seconds the cache will keep the result around.\n\n    It will put a temp value in the cache while the function is\n    processing. This should not matter in most cases, but if the app is using\n    threads, you won't be able to get the previous value, and will need to\n    wait until the function finishes. If this is not desired behavior, you can\n    remove the first two lines after the ``else``.\n    "),
               ('keyedcache.cache_get', ['*keys', '**kwargs'], ''),
               ('keyedcache.cache_set', ['*keys', '**kwargs'], 'Set an object into the cache.'),
               ('keyedcache._hash_or_string', ['key'], ''),
               ('keyedcache.cache_contains', ['*keys', '**kwargs'], ''),
               ('keyedcache.cache_key',
                ['*keys', '**pairs'],
                "Smart key maker, returns the object itself if a key, else a list \n    delimited by ':', automatically hashing any non-scalar objects."),
               ('keyedcache.md5_hash', ['obj'], ''),
               ('keyedcache.is_memcached_backend', [], ''),
               ('keyedcache.cache_require', [], "Error if keyedcache isn't running."),
               ('keyedcache.cache_clear_request',
                ['uid'],
                'Clears all locally cached elements with that uid'),
               ('keyedcache.cache_use_request_caching', [], ''),
               ('keyedcache.cache_get_request_uid', [], ''),
               ('keyedcache.cache_set_request', ['key', 'val', 'uid=None'], ''),
               ('keyedcache.models.find_by_id',
                ['cls', 'groupkey', 'objectid', 'raises=False'],
                'A helper function to look up an object by id'),
               ('keyedcache.models.find_by_key',
                ['cls', 'groupkey', 'key', 'raises=False'],
                'A helper function to look up an object by key'),
               ('keyedcache.models.find_by_slug',
                ['cls', 'groupkey', 'slug', 'raises=False'],
                'A helper function to look up an object by slug'),
               ('keyedcache.tests.cachetest', ['a', 'b', 'c'], ''),
               ('keyedcache.threaded.set_request_uid',
                ['sender', '*args', '**kwargs'],
                'Puts a unique id into the thread'),
               ('keyedcache.threaded.clear_request_uid',
                ['sender', '*args', '**kwargs'],
                'Removes the thread cache for this request'),
               ('keyedcache.threaded.start_listening', [], ''),
               ('keyedcache.views.stats_page', ['request'], ''),
               ('keyedcache.views.view_page', ['request'], ''),
               ('keyedcache.views.delete_page', ['request'], ''),
               ('l10n.utils.get_locale_conv', ['loc=None', 'tried=[]', 'possibles=[]'], ''),
               ('l10n.utils._group', ['s', 'conv', 'monetary=False'], ''),
               ('l10n.utils.format',
                ['percent',
                 'value',
                 'loc_conv',
                 'grouping=False',
                 'monetary=False',
                 '*additional'],
                "Returns the locale-aware substitution of a %? specifier\n    (percent).\n\n    additional is for format strings which contain one or more\n    '*' modifiers."),
               ('l10n.utils.moneyfmt',
                ['val',
                 'curr=None',
                 'places=-1',
                 'grouping=True',
                 "wrapcents=''",
                 'current_locale=None'],
                'Formats val according to the currency settings in the current locale.\n    Ported-and-modified from Python 2.5\n    '),
               ('make-messages.make_messages', [], ''),
               ('posplit.posplit', ['fname', 'rules'], ''),
               ('posplit.make_sections', ['fname'], ''),
               ('posplit.main', ['args'], ''),
               ('l10n.validators.aupostcode.validate',
                ['postcode'],
                '\n    Validates Australian postal codes.\n    '),
               ('l10n.validators.capostcode.validate', ['postcode'], ''),
               ('l10n.validators.ukpostcode.parse_uk_postcode',
                ['postcode', 'strict=True', 'incode_mandatory=True'],
                ''),
               ('l10n.validators.uspostcode.validate', ['postcode'], ''),
               ('livesettings.functions.config_exists',
                ['group', 'key'],
                'Test to see if a setting has been registered'),
               ('livesettings.functions.config_get',
                ['group', 'key'],
                'Get a configuration setting'),
               ('livesettings.functions.config_get_group', ['group'], ''),
               ('livesettings.functions.config_collect_values',
                ['group', 'groupkey', 'key', 'unique=True', 'skip_missing=True'],
                "Look up (group, groupkey) from config, then take the values returned and\n    use them as groups for a second-stage lookup.\n    \n    For example:\n    \n    config_collect_values(PAYMENT, MODULES, CREDITCHOICES)\n    \n    Stage 1: ['PAYMENT_GOOGLE', 'PAYMENT_AUTHORIZENET']\n    Stage 2: config_value('PAYMENT_GOOGLE', 'CREDITCHOICES')\n           + config_value('PAYMENT_AUTHORIZENET', 'CREDITCHOICES')\n    Stage 3: (if unique is true) remove dupes\n    "),
               ('livesettings.functions.config_register',
                ['value'],
                'Register a value or values.\n\n    Parameters:\n        -A Value\n    '),
               ('livesettings.functions.config_register_list', ['*args'], ''),
               ('livesettings.functions.config_value',
                ['group', 'key', 'default=_NOTSET'],
                'Get a value from the configuration system'),
               ('livesettings.functions.config_value_safe',
                ['group', 'key', 'default_value'],
                'Get a config value with a default fallback, safe for use during SyncDB.'),
               ('livesettings.functions.config_choice_values',
                ['group', 'key', 'skip_missing=True', 'translate=False'],
                'Get pairs of key, label from the setting.'),
               ('livesettings.functions.config_add_choice',
                ['group', 'key', 'choice'],
                'Add a choice to a value'),
               ('livesettings.models._safe_get_siteid', ['site'], ''),
               ('livesettings.models.find_setting',
                ['group', 'key', 'site=None'],
                'Get a setting or longsetting by group and key, cache and return it.'),
               ('livesettings.overrides._safe_get_siteid', ['site'], ''),
               ('livesettings.overrides.get_overrides',
                ['siteid=-1'],
                'Check to see if livesettings is allowed to use the database.  If not, then\n    it will only use the values in the dictionary, LIVESETTINGS_OPTIONS[SITEID][\'SETTINGS\'],\n    this allows \'lockdown\' of a live site.\n\n    The LIVESETTINGS dict must be formatted as follows::\n\n    LIVESETTINGS_OPTIONS = {\n            1 : {\n                    \'DB\' : [True/False],\n                    SETTINGS = {\n                        \'GROUPKEY\' : {\'KEY\', val, \'KEY2\', val},\n                        \'GROUPKEY2\' : {\'KEY\', val, \'KEY2\', val},\n                    }\n                }\n            }\n\n    In the settings dict above, the "val" entries must exactly match the format \n    stored in the database for a setting.  Do not use a literal True or an integer,\n    it needs to be the string representation of them.\n\n    Returns a tuple (DB_ALLOWED, SETTINGS)\n    '),
               ('livesettings.views.group_settings',
                ['request', 'group', "template='livesettings/group_settings.html'"],
                ''),
               ('livesettings.views.site_settings', ['request'], ''),
               ('livesettings.views.export_as_python',
                ['request'],
                'Export site settings as a dictionary of dictionaries'),
               ('livesettings.templatetags.config_tags.force_space',
                ['value', 'chars=40'],
                'Forces spaces every `chars` in value'),
               ('livesettings.templatetags.config_tags.break_at',
                ['value', 'chars=40'],
                "Force spaces into long lines which don't have spaces"),
               ('livesettings.templatetags.config_tags.config_boolean',
                ['option'],
                'Looks up the configuration option, returning true or false.'),
               ('livesettings.templatetags.config_tags.admin_site_views',
                ['view'],
                'Returns a formatted list of sites, rendering for view, if any'),
               ('payment.config.active_modules',
                [],
                'Get a list of activated payment modules, in the form of\n    [(key), (config group),...]\n    '),
               ('payment.config.credit_choices',
                ['settings=None', 'include_module_if_no_choices=False'],
                ''),
               ('payment.config.labelled_payment_choices', [], ''),
               ('payment.config.payment_live', ['settings'], ''),
               ('payment.decorators.cart_has_minimum_order',
                ["template='product/minimum_order.html'", "min_order='PAYMENT.MINIMUM_ORDER'"],
                "\n    Decorator for checkout views that ensures the active cart meets the minimum order\n    requirements.  If not, then it shows the user the minimum order required.\n    \n    Params:\n    - template: defaults to satchmo/product/minimum_order.html\n    - min_order: If this is a string, it wil be used to look up the value from Satchmo's configuration\n      system, if it is a decimal, it will be used directly as the minimum required.\n    "),
               ('payment.forms._get_cheapest_shipping',
                ['shipping_dict'],
                'Use the shipping_dict as returned by _get_shipping_choices\n    to figure the cheapest shipping option.'),
               ('payment.forms._get_shipping_choices',
                ['request',
                 'paymentmodule',
                 'cart',
                 'contact',
                 'default_view_tax=False',
                 'order=None'],
                'Iterate through legal shipping modules, building the list for display to the user.\n    \n    Returns the shipping choices list, along with a dictionary of shipping choices, useful\n    for building javascript that operates on shipping choices.\n    '),
               ('payment.forms._find_sale', ['cart'], ''),
               ('payment.listeners.form_terms_listener',
                ['sender', 'form=None', '**kwargs'],
                "Adds a 'do you accept the terms and conditions' checkbox to the form"),
               ('payment.listeners.shipping_hide_if_one',
                ['sender', 'form=None', '**kwargs'],
                'Makes the widget for shipping hidden if there is only one choice.'),
               ('payment.listeners.capture_on_ship_listener',
                ['sender', "oldstatus=''", "newstatus=''", 'order=None', '**kwargs'],
                "Listen for a transition to 'shipped', and capture authorizations."),
               ('payment.models._decrypt_code',
                ['code'],
                'Decrypt code encrypted by _encrypt_code'),
               ('payment.models._encrypt_code',
                ['code'],
                'Quick encrypter for CC codes or code fragments'),
               ('payment.tests.make_test_order',
                ['country', 'state', 'site=None', 'orderitems=None'],
                ''),
               ('payment.urls.make_urlpatterns', [], ''),
               ('payment.utils.capture_authorizations',
                ['order'],
                'Capture all outstanding authorizations on this order'),
               ('payment.utils.get_or_create_order',
                ['request', 'working_cart', 'contact', 'data'],
                'Get the existing order from the session, else create using \n    the working_cart, contact and data'),
               ('payment.utils.get_processor_by_key', ['key'], ''),
               ('payment.utils.pay_ship_save',
                ['new_order', 'cart', 'contact', 'shipping', 'discount', 'update=False'],
                '\n    Save the order details, first removing all items if this is an update.\n    '),
               ('payment.utils.update_orderitem_details',
                ['new_order_item', 'item'],
                'Update orderitem details, if any.\n    '),
               ('payment.utils.update_orderitem_for_subscription',
                ['new_order_item', 'item'],
                'Update orderitem subscription details, if any.\n    '),
               ('payment.utils.update_orderitems',
                ['new_order', 'cart', 'update=False'],
                'Update the order with all cart items, first removing all items if this\n    is an update.\n    '),
               ('payment.modules.authorizenet.views.pay_ship_info', ['request'], ''),
               ('payment.modules.authorizenet.views.confirm_info', ['request'], ''),
               ('payment.modules.autosuccess.views.one_step', ['request'], ''),
               ('payment.modules.cod.views.pay_ship_info', ['request'], ''),
               ('payment.modules.cod.views.confirm_info', ['request'], ''),
               ('payment.modules.cybersource.views.pay_ship_info', ['request'], ''),
               ('payment.modules.cybersource.views.confirm_info', ['request'], ''),
               ('payment.modules.dummy.views.pay_ship_info', ['request'], ''),
               ('payment.modules.dummy.views.confirm_info', ['request'], ''),
               ('payment.modules.giftcertificate.tests.make_test_order',
                ['country', 'state'],
                ''),
               ('payment.modules.giftcertificate.utils.generate_certificate_code',
                [],
                "Creates a code, formatted according to the shop owner's preference as set in the config system."),
               ('payment.modules.giftcertificate.utils.generate_code',
                ['charset', 'format'],
                'Creates the actual code.  Split out for ease of testing.'),
               ('payment.modules.giftcertificate.views.giftcert_pay_ship_process_form',
                ['request', 'contact', 'working_cart', 'payment_module'],
                ''),
               ('payment.modules.giftcertificate.views.pay_ship_info', ['request'], ''),
               ('payment.modules.giftcertificate.views.confirm_info',
                ['request', "template='shop/checkout/giftcertificate/confirm.html'"],
                ''),
               ('payment.modules.giftcertificate.views.check_balance', ['request'], ''),
               ('payment.modules.giftcertificate.templatetags.satchmo_giftcertificate.giftcertificate_order_summary',
                ['order'],
                'Output a formatted block giving attached gift certifificate details.'),
               ('payment.modules.google.auth.auth_required',
                ['request'],
                '\n    Sends an authentication required response\n    '),
               ('payment.modules.google.auth.get_cred', [], ''),
               ('payment.modules.google.auth.get_url', [], '\n    Returns the urls needed\n    '),
               ('payment.modules.google.auth.do_auth', ['request'], ''),
               ('payment.modules.google.notifications.find_order',
                ['data'],
                '\n    Helper function to find order using a google id\n    '),
               ('payment.modules.google.notifications.notify_neworder',
                ['request', 'data'],
                '\n    Called when google reports a new order.\n    \n    Looks up the order from the private data and sets the status.\n    Empties the cart.\n    '),
               ('payment.modules.google.notifications.do_charged',
                ['request', 'data'],
                '\n    Called when google sends a charged status update\n    Note that the charged amount comes in a seperate call\n    '),
               ('payment.modules.google.notifications.do_shipped',
                ['request', 'data'],
                '\n    Called when you use the google checkout console to mark order has been shipped\n    '),
               ('payment.modules.google.notifications.notify_statechanged',
                ['request', 'data'],
                '\n    This is called when there has been a change in the order state\n    '),
               ('payment.modules.google.notifications.notify_chargeamount',
                ['request', 'data'],
                '\n    This gets called when google sends a charge amount\n    '),
               ('payment.modules.google.views.pay_ship_info', ['request'], ''),
               ('payment.modules.google.views.confirm_info', ['request'], ''),
               ('payment.modules.google.views.notification',
                ['request'],
                '\n    View to receive notifications from google about order status\n    '),
               ('payment.modules.google.views.success',
                ['request'],
                '\n    The order has been succesfully processed.  This can be used to generate a receipt or some other confirmation\n    '),
               ('payment.modules.paypal.views.pay_ship_info', ['request'], ''),
               ('payment.modules.paypal.views.confirm_info', ['request'], ''),
               ('payment.modules.paypal.views.ipn',
                ['request'],
                'PayPal IPN (Instant Payment Notification)\n    Cornfirms that payment has been completed and marks invoice as paid.\n    Adapted from IPN cgi script provided at http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/456361'),
               ('payment.modules.paypal.views.confirm_ipn_data', ['data', 'PP_URL'], ''),
               ('payment.modules.protx.views.pay_ship_info', ['request'], ''),
               ('payment.modules.protx.views.confirm_info',
                ['request', "template='shop/checkout/protx/confirm.html'", 'extra_context={}'],
                ''),
               ('payment.modules.protx.views.confirm_secure3d',
                ['request',
                 "secure3d_template='shop/checkout/secure3d_form.html'",
                 "confirm_template='shop/checkout/confirm.html'",
                 'extra_context={}'],
                'Handles confirming an order and processing the charges when secured by secure3d.\n \n    '),
               ('payment.modules.protx.views.secure3d_form_handler',
                ['controller'],
                'At the confirmation step, protx may ask for a secure3d authentication.  This method\n    catches that, and if so, sends to that step, otherwise the form as normal'),
               ('payment.modules.purchaseorder.views.pay_ship_info', ['request'], ''),
               ('payment.modules.purchaseorder.views.confirm_info', ['request'], ''),
               ('payment.modules.purchaseorder.views.purchaseorder_process_form',
                ['request', 'contact', 'working_cart', 'payment_module'],
                ''),
               ('payment.modules.sermepa.views.pay_ship_info', ['request'], ''),
               ('payment.modules.sermepa.views._resolve_local_url',
                ['payment_module', 'cfgval', 'ssl=False'],
                ''),
               ('payment.modules.sermepa.views.confirm_info', ['request'], ''),
               ('payment.modules.sermepa.views.notify_callback', ['request'], ''),
               ('payment.modules.trustcommerce.views.pay_ship_info', ['request'], ''),
               ('payment.modules.trustcommerce.views.confirm_info', ['request'], ''),
               ('payment.templatetags.satchmo_checkout.payment_label',
                ['value'],
                'convert a payment key into its translated text'),
               ('payment.templatetags.satchmo_checkout.order_payment_summary',
                ['order', 'paylink=False'],
                'Output a formatted block giving attached payment details.'),
               ('payment.templatetags.satchmo_checkout.status_label',
                ['value'],
                'convert a order status into its translated text'),
               ('payment.templatetags.satchmo_googlecheckout._truefalse',
                ['val', "t='1'", "f='0'"],
                ''),
               ('payment.templatetags.satchmo_googlecheckout.checkout_image_url',
                ['merchid', 'imgsize', 'locale', 'transparent=False', 'disabled=False'],
                ''),
               ('payment.templatetags.satchmo_googlecheckout.google_checkout_image_url',
                ['parser', 'token'],
                "\n    Render the url for a google checkout image.\n\n    Sample usage::\n\n      {% google_checkout_image_url [imagesize] ['transparent'] ['disabled'] %}\n\n    "),
               ('payment.views.balance.balance_remaining_order',
                ['request', 'order_id=None'],
                'Load the order into the session, so we can charge the remaining amount'),
               ('payment.views.balance.balance_remaining',
                ['request'],
                'Allow the user to pay the remaining balance.'),
               ('payment.views.balance.charge_remaining',
                ['request', 'orderitem_id'],
                'Given an orderitem_id, this returns a confirmation form.'),
               ('payment.views.balance.charge_remaining_post', ['request'], ''),
               ('payment.views.checkout.success',
                ['request'],
                '\n    The order has been succesfully processed.  This can be used to generate a receipt or some other confirmation\n    '),
               ('payment.views.checkout.failure', ['request'], ''),
               ('payment.views.confirm.credit_confirm_info',
                ['request', 'payment_module', 'template=None'],
                'A view which shows and requires credit card selection.  \n    This is the simplest confirmation flow, with no overrides.'),
               ('payment.views.confirm.confirm_free_order',
                ['request', "key='FREE'", 'template=None'],
                ''),
               ('payment.views.contact.authentication_required',
                ['request', "template='shop/checkout/authentication_required.html'"],
                ''),
               ('payment.views.contact.contact_info',
                ['request', '**kwargs'],
                'View which collects demographic information from customer.'),
               ('payment.views.cron.cron_rebill',
                ['request=None'],
                'Rebill customers with expiring recurring subscription products\n    This can either be run via a url with GET key authentication or\n    directly from a shell script.\n    '),
               ('payment.views.payship.pay_ship_info_verify',
                ['request', 'payment_module'],
                'Verify customer and cart.\n    Returns:\n    True, contact, cart on success\n    False, destination of failure\n    '),
               ('payment.views.payship.credit_pay_ship_process_form',
                ['request',
                 'contact',
                 'working_cart',
                 'payment_module',
                 'allow_skip=True',
                 '*args',
                 '**kwargs'],
                'Handle the form information.\n    Returns:\n        (True, destination) on success\n        (False, form) on failure\n    '),
               ('payment.views.payship.simple_pay_ship_process_form',
                ['request', 'contact', 'working_cart', 'payment_module', 'allow_skip=True'],
                ''),
               ('payment.views.payship.pay_ship_render_form',
                ['request', 'form', 'template', 'payment_module', 'cart'],
                ''),
               ('payment.views.payship.base_pay_ship_info',
                ['request', 'payment_module', 'form_handler', 'template'],
                ''),
               ('payment.views.payship.credit_pay_ship_info',
                ['request', 'payment_module', "template='shop/checkout/pay_ship.html'"],
                'A pay_ship view which uses a credit card.'),
               ('payment.views.payship.simple_pay_ship_info',
                ['request', 'payment_module', 'template'],
                "A pay_ship view which doesn't require a credit card."),
               ('product.forms.export_choices', [], ''),
               ('product.forms._get_optiondict', [], ''),
               ('product.forms._get_options_for_key', ['key', 'optiondict'], ''),
               ('product.listeners.default_product_search_listener',
                ['sender',
                 'request=None',
                 'category=None',
                 'keywords=[]',
                 'results={}',
                 '**kwargs'],
                "Performs the base satchmo search.  This is easily overridden by unregistering the listener and creating your own.\n    However, it usually won't have to be overridden, since it just adds data to the results dict.  If you are simply\n    adding more results, then leave this listener registered and add more objects in your search listener.\n    "),
               ('product.listeners.priceband_search_listener',
                ['sender',
                 'request=None',
                 'category=None',
                 'keywords=[]',
                 'results={}',
                 '**kwargs'],
                'Filter search results by price bands.\n    \n    If a "priceband" parameter is available, it will be parsed as follows:\n        lowval-highval\n        if there is no "-", then it will be parsed as lowval or higher\n    '),
               ('product.listeners.discount_used_listener',
                ['sender', 'order=None', '**kwargs'],
                'If an order has a discount, increment numUses on it.\n    \n    satchmo_store.shop.signals.order_success listener set up in shop.listeners.\n    '),
               ('product.models.default_dimension_unit', [], ''),
               ('product.models.default_weight_unit', [], ''),
               ('product.models.get_all_options',
                ['obj', 'ids_only=False'],
                "\n    Returns all possible combinations of options for this products OptionGroups as a List of Lists.\n    Ex:\n    For OptionGroups Color and Size with Options (Blue, Green) and (Large, Small) you'll get\n    [['Blue', 'Small'], ['Blue', 'Large'], ['Green', 'Small'], ['Green', 'Large']]\n    Note: the actual values will be instances of Option instead of strings\n    "),
               ('product.models._protected_dir', ['instance', 'filename'], ''),
               ('product.models.lookup_translation',
                ['obj', 'attr', 'language_code=None', 'version=-1'],
                "Get a translated attribute by language.\n\n    If specific language isn't found, returns the attribute from the base object.\n    "),
               ('product.models.get_product_quantity_adjustments',
                ['product', 'qty=1', 'parent=None'],
                'Gets a list of adjustments for the price found for a product/qty'),
               ('product.models.get_product_quantity_price',
                ['product', 'qty=Decimal(1)', 'delta=Decimal(0.00)', 'parent=None'],
                '\n    Returns price as a Decimal else None.\n    First checks the product, if none, then checks the parent.\n    '),
               ('product.models.make_option_unique_id', ['groupid', 'value'], ''),
               ('product.models.round_cents', ['work'], ''),
               ('product.models.sorted_tuple', ['lst'], ''),
               ('product.models.split_option_unique_id',
                ['uid'],
                'reverse of make_option_unique_id'),
               ('product.queries.bestsellers',
                ['count'],
                'Look up the bestselling products and return in a list'),
               ('product.tests.five_off', ['sender', 'adjustment=None', '**kwargs'], ''),
               ('product.utils.calc_discounted_by_percentage', ['price', 'percentage'], ''),
               ('product.utils.find_auto_discounts', ['product'], ''),
               ('product.utils.find_best_auto_discount', ['product'], ''),
               ('product.utils.productvariation_details',
                ['product', 'include_tax', 'user', 'create=False'],
                'Build the product variation details, for conversion to javascript.\n\n    Returns variation detail dictionary built like so:\n    details = {\n        "OPTION_KEY" : {\n            "SLUG": "Variation Slug",\n            "PRICE" : {"qty" : "$price", [...]},\n            "SALE" : {"qty" : "$price", [...]},\n            "TAXED" : "$taxed price",   # omitted if no taxed price requested\n            "QTY" : 1\n        },\n        [...]\n    }\n    '),
               ('product.utils.rebuild_pricing', [], ''),
               ('product.utils.serialize_options',
                ['product', 'selected_options=()'],
                "\n    Return a list of optiongroups and options for display to the customer.\n    Only returns options that are actually used by members of this product.\n\n    Return Value:\n    [\n    {\n    name: 'group name',\n    id: 'group id',\n    items: [{\n        name: 'opt name',\n        value: 'opt value',\n        price_change: 'opt price',\n        selected: False,\n        },{..}]\n    },\n    {..}\n    ]\n\n    Note: This doesn't handle the case where you have multiple options and\n    some combinations aren't available. For example, you have option_groups\n    color and size, and you have a yellow/large, a yellow/small, and a\n    white/small, but you have no white/large - the customer will still see\n    the options white and large.\n    "),
               ('product.utils._sort_options', ['lst'], ''),
               ('product.templatetags.satchmo_discounts.sale_price',
                ['product'],
                'Returns the sale price, including tax if that is the default.'),
               ('product.templatetags.satchmo_discounts.untaxed_sale_price',
                ['product'],
                'Returns the product unit price with the best auto discount applied.'),
               ('product.templatetags.satchmo_discounts.taxed_sale_price',
                ['product'],
                'Returns the product unit price with the best auto discount applied and taxes included.'),
               ('product.templatetags.satchmo_discounts.discount_cart_total',
                ['cart', 'discount'],
                'Returns the discounted total for this cart, with tax if that is the default.'),
               ('product.templatetags.satchmo_discounts.untaxed_discount_cart_total',
                ['cart', 'discount'],
                'Returns the discounted total for this cart'),
               ('product.templatetags.satchmo_discounts.taxed_discount_cart_total',
                ['cart', 'discount'],
                'Returns the discounted total for this cart with taxes included'),
               ('product.templatetags.satchmo_discounts.discount_line_total',
                ['cartitem', 'discount'],
                'Returns the discounted line total for this cart item, including tax if that is the default.'),
               ('product.templatetags.satchmo_discounts.untaxed_discount_line_total',
                ['cartitem', 'discount'],
                'Returns the discounted line total for this cart item'),
               ('product.templatetags.satchmo_discounts.taxed_discount_line_total',
                ['cartitem', 'discount'],
                'Returns the discounted line total for this cart item with taxes included.'),
               ('product.templatetags.satchmo_discounts.discount_price',
                ['product', 'discount'],
                'Returns the product price with the discount applied, including tax if that is the default.\n    \n    Ex: product|discount_price:sale\n    '),
               ('product.templatetags.satchmo_discounts.untaxed_discount_price',
                ['product', 'discount'],
                'Returns the product price with the discount applied.\n    \n    Ex: product|discount_price:sale\n    '),
               ('product.templatetags.satchmo_discounts.taxed_discount_price',
                ['product', 'discount'],
                'Returns the product price with the discount applied, and taxes included.\n    \n    Ex: product|discount_price:sale\n    '),
               ('product.templatetags.satchmo_discounts.discount_ratio',
                ['discount'],
                'Returns the discount as a ratio, making sure that the percent is under 1'),
               ('product.templatetags.satchmo_discounts.discount_saved',
                ['product', 'discount'],
                'Returns the amount saved by the discount, including tax if that is the default.'),
               ('product.templatetags.satchmo_discounts.untaxed_discount_saved',
                ['product', 'discount'],
                'Returns the amount saved by the discount'),
               ('product.templatetags.satchmo_discounts.taxed_discount_saved',
                ['product', 'discount'],
                'Returns the amount saved by the discount, after applying taxes.'),
               ('product.templatetags.satchmo_product.best_selling_products_list',
                ['count'],
                'Get a list of best selling products'),
               ('product.templatetags.satchmo_product.recent_products_list',
                ['count'],
                'Get a list of recent products'),
               ('product.templatetags.satchmo_product.is_producttype',
                ['product', 'ptype'],
                'Returns True if product is ptype'),
               ('product.templatetags.satchmo_product.product_count',
                ['category', "args=''"],
                'Get a count of products for the base object.\n    \n    If `category` is None, then count everything.\n    If it is a `Category` object then count everything in the category and subcategories.\n    '),
               ('product.templatetags.satchmo_product.product_images',
                ['product', "args=''"],
                ''),
               ('product.templatetags.satchmo_product.smart_attr',
                ['product', 'key'],
                "\n    Run the smart_attr function on the spec'd product\n    "),
               ('product.templatetags.satchmo_product.product_sort_by_price',
                ['products'],
                '\n    Sort a product list by unit price\n    \n    Example::\n        \n        {% for product in products|product_sort_by_price %} \n    '),
               ('product.templatetags.satchmo_product_admin.js_make_select_readonly',
                ['select'],
                ''),
               ('product.templatetags.satchmo_product_admin.edit_subtypes', ['product'], ''),
               ('product.templatetags.satchmo_product_admin.list_variations',
                ['configurableproduct'],
                ''),
               ('product.views.find_product_template',
                ['product', 'producttypes=None'],
                'Searches for the correct override template given a product.'),
               ('product.views.optionids_from_post',
                ['configurableproduct', 'POST'],
                'Reads through the POST dictionary and tries to match keys to possible `OptionGroup` ids\n    from the passed `ConfigurableProduct`'),
               ('product.views.category_index',
                ['request', "template='product/category_index.html'", 'root_only=True'],
                'Display all categories.\n    \n    Parameters:\n    - root_only: If true, then only show root categories.\n    '),
               ('product.views.category_view',
                ['request', 'slug', "parent_slugs=''", "template='product/category.html'"],
                'Display the category, its child categories, and its products.\n\n    Parameters:\n     - slug: slug of category\n     - parent_slugs: ignored    \n    '),
               ('product.views.display_featured',
                ['num_to_display=NOTSET', 'random_display=NOTSET'],
                '\n    Used by the index generic view to choose how the featured products are displayed.\n    Items can be displayed randomly or all in order\n    '),
               ('product.views.get_configurable_product_options',
                ['request', 'id'],
                'Used by admin views'),
               ('product.views.get_product',
                ['request',
                 'product_slug=None',
                 'selected_options=()',
                 'default_view_tax=NOTSET'],
                'Basic product view'),
               ('product.views.get_price',
                ['request', 'product_slug'],
                'Get base price for a product, returning the answer encoded as JSON.'),
               ('product.views.get_price_detail',
                ['request', 'product_slug'],
                'Get all price details for a product, returning the response encoded as JSON.'),
               ('product.views.adminviews.edit_inventory',
                ['request'],
                'A quick inventory price, qty update form'),
               ('product.views.adminviews.export_products',
                ['request', "template='product/admin/product_export_form.html'"],
                'A product export tool'),
               ('product.views.adminviews.import_products',
                ['request', 'maxsize=10000000'],
                ' \n    Imports product from an uploaded file.\n    '),
               ('product.views.adminviews.variation_list', ['request'], ''),
               ('product.views.adminviews.variation_manager', ['request', "product_id=''"], ''),
               ('product.views.filters.display_bestsellers',
                ['request', 'count=0', "template='product/best_sellers.html'"],
                'Display a list of the products which have sold the most'),
               ('product.views.filters.display_recent',
                ['request', 'page=0', 'count=0', "template='product/recently_added.html'"],
                'Display a list of recently added products.'),
               ('satchmo_ext.brand.urls.add_brand_urls',
                ['sender', 'patterns=()', "section=''", '**kwargs'],
                ''),
               ('satchmo_ext.brand.views.brand_list', ['request'], ''),
               ('satchmo_ext.brand.views.brand_page', ['request', 'brandname'], ''),
               ('satchmo_ext.brand.views.brand_category_page',
                ['request', 'brandname', 'catname'],
                ''),
               ('satchmo_ext.brand.templatetags.satchmo_brands.do_brandlistnode',
                ['parser', 'token'],
                'Push the brand list into the context using the given variable name.\n\n    Sample usage::\n\n        {% brand_list as var %}\n        \n    '),
               ('satchmo_ext.contrib.cartqty_discounts.lineitem_cartqty_price',
                ['cartitem=None', '**kwargs'],
                ''),
               ('satchmo_ext.newsletter.get_newsletter_module', [], ''),
               ('satchmo_ext.newsletter.is_subscribed', ['contact'], ''),
               ('satchmo_ext.newsletter.update_subscription',
                ['contact', 'subscribed', 'attributes={}'],
                ''),
               ('satchmo_ext.newsletter.update_subscription_listener',
                ['contact=None', 'subscribed=False', '**kwargs'],
                ''),
               ('satchmo_ext.newsletter.populate_form_initialdata_listener',
                ['contact=None', 'initial={}', '**kwargs'],
                ''),
               ('satchmo_ext.newsletter.view_user_data_listener',
                ['contact=None', 'contact_dict=None', '**kwargs'],
                ''),
               ('satchmo_ext.newsletter.ignore.is_subscribed', ['contact'], ''),
               ('satchmo_ext.newsletter.ignore.update_contact', ['*args', '**kwargs'], ''),
               ('satchmo_ext.newsletter.listeners.contact_form_listener',
                ['sender', 'object=None', 'formdata=None', 'form=None', '**kwargs'],
                ''),
               ('satchmo_ext.newsletter.listeners.start_listening', [], ''),
               ('satchmo_ext.newsletter.mailman.is_subscribed', ['contact'], ''),
               ('satchmo_ext.newsletter.mailman.update_contact',
                ['contact', 'subscribe', 'attributes={}'],
                ''),
               ('satchmo_ext.newsletter.mailman.mailman_add',
                ['contact', 'listname=None', 'send_welcome_msg=None', 'admin_notify=None'],
                'Add a Satchmo contact to a mailman mailing list.\n\n    Parameters:\n        - `Contact`: A Satchmo Contact\n        - `listname`: the Mailman listname, defaulting to whatever you have set in settings.NEWSLETTER_NAME\n        - `send_welcome_msg`: True or False, defaulting to the list default\n        - `admin_notify`: True of False, defaulting to the list default\n    '),
               ('satchmo_ext.newsletter.mailman.mailman_remove',
                ['contact', 'listname=None', 'userack=None', 'admin_notify=None'],
                'Remove a Satchmo contact from a Mailman mailing list\n\n    Parameters:\n        - `contact`: A Satchmo contact\n        - `listname`: the Mailman listname, defaulting to whatever you have set in settings.NEWSLETTER_NAME\n        - `userack`: True or False, whether to notify the user, defaulting to the list default\n        - `admin_notify`: True or False, defaulting to the list default\n    '),
               ('satchmo_ext.newsletter.mailman._get_maillist', ['listname'], ''),
               ('satchmo_ext.newsletter.models.get_contact_or_fake',
                ['full_name', 'email'],
                "Get a `Contact` by email or if it doesn't exist, then a `NullContact`"),
               ('satchmo_ext.newsletter.simple.is_subscribed', ['contact'], ''),
               ('satchmo_ext.newsletter.simple.update_contact',
                ['contact', 'subscribe', 'attributes={}'],
                ''),
               ('satchmo_ext.newsletter.urls.add_newsletter_urls',
                ['sender', 'patterns=()', '**kwargs'],
                ''),
               ('satchmo_ext.newsletter.views.add_subscription',
                ['request',
                 "template='newsletter/subscribe_form.html'",
                 "result_template='newsletter/update_results.html'",
                 'form=NewsletterForm'],
                'Add a subscription and return the results in the requested template.'),
               ('satchmo_ext.newsletter.views.remove_subscription',
                ['request',
                 "template='newsletter/unsubscribe_form.html'",
                 "result_template='newsletter/update_results.html'",
                 'form=NewsletterForm'],
                'Remove a subscription and return the results in the requested template.'),
               ('satchmo_ext.newsletter.views.update_subscription',
                ['request',
                 "template='newsletter/update_form.html'",
                 "result_template='newsletter/update_results.html'",
                 'form=NewsletterForm'],
                'Add a subscription and return the results in the requested template.'),
               ('satchmo_ext.newsletter.views._update',
                ['request', 'state', 'template', 'result_template', 'form=NewsletterForm'],
                'Add a subscription and return the results in the requested template.'),
               ('satchmo_ext.product_feeds.urls.add_feed_urls',
                ['sender', 'patterns=()', '**kwargs'],
                ''),
               ('satchmo_ext.product_feeds.views.admin_product_feed',
                ['request',
                 'category=None',
                 "template='product_feeds/product_feed.csv'",
                 "mimetype='text/csv'"],
                'Admin authenticated feed - same as product feed but for different types of feeds.\n    '),
               ('satchmo_ext.product_feeds.views.product_feed',
                ['request',
                 'category=None',
                 "template='product_feeds/googlebase_atom.xml'",
                 "mimetype='application/atom+xml'"],
                'Build a feed of all active products.\n    '),
               ('satchmo_ext.product_feeds.templatetags.satchmo_feed.rfc3339_date', ['date'], ''),
               ('satchmo_ext.product_feeds.templatetags.satchmo_feed.atom_tag_uri',
                ['url', 'date=None'],
                ''),
               ('satchmo_ext.product_feeds.templatetags.satchmo_feed.feed_safe_name',
                ['name'],
                ''),
               ('satchmo_ext.product_feeds.templatetags.satchmo_feed.make_googlebase_option',
                ['opt', 'custom'],
                'Convert an option into a tag.  First look to see if it is a predefined tag, \n    if it is, good, use it.  Otherwise make a custom tag.'),
               ('satchmo_ext.product_feeds.templatetags.satchmo_feed.make_googlebase_attribute',
                ['att', 'custom'],
                'Convert an attribute into a tag.  First look to see if it is a predefined tag, \n       if it is, good, use it.  Otherwise make a custom tag.'),
               ('satchmo_ext.product_feeds.templatetags.satchmo_feed.make_googlebase_tag',
                ['key', 'val', 'custom'],
                'Convert a key/val pair into a tag.  First look to see if it is a predefined tag, \n    if it is, good, use it.  Otherwise make a custom tag.'),
               ('satchmo_ext.product_feeds.templatetags.satchmo_feed.stripspaces', ['s'], ''),
               ('satchmo_ext.productratings.listeners.save_rating',
                ['comment=None', 'request=None', '**kwargs'],
                'Create a rating and save with the comment'),
               ('satchmo_ext.productratings.listeners.one_rating_per_product',
                ['comment=None', 'request=None', '**kwargs'],
                ''),
               ('satchmo_ext.productratings.listeners.check_with_akismet',
                ['comment=None', 'request=None', '**kwargs'],
                ''),
               ('satchmo_ext.productratings.queries.highest_rated',
                ['count=0', 'site=None'],
                'Get the most highly rated products'),
               ('satchmo_ext.productratings.queries._int_or_long', ['v'], ''),
               ('satchmo_ext.productratings.urls.add_product_urls',
                ['sender', 'patterns=()', "section=''", '**kwargs'],
                ''),
               ('satchmo_ext.productratings.urls.add_comment_urls',
                ['sender', 'patterns=()', '**kwargs'],
                ''),
               ('satchmo_ext.productratings.utils.average',
                ['ratings'],
                ' Average a list of numbers, return None if it fails '),
               ('satchmo_ext.productratings.utils.get_product_rating',
                ['product', 'site=None'],
                'Get the average product rating'),
               ('satchmo_ext.productratings.utils.get_product_rating_string',
                ['product', 'site=None'],
                'Get the average product rating as a string, for use in templates'),
               ('satchmo_ext.productratings.views.display_bestratings',
                ['request', 'count=0', "template='product/best_ratings.html'"],
                'Display a list of the products with the best ratings in comments'),
               ('satchmo_ext.productratings.templatetags.satchmo_ratings.product_rating_form',
                ['request', 'product', 'form'],
                'Output our product comment form with the proper redirect in it.'),
               ('satchmo_ext.productratings.templatetags.satchmo_ratings.product_ratings',
                ['context'],
                '\n    Display the ratings for a specific product.\n    '),
               ('satchmo_ext.productratings.templatetags.satchmo_ratings.product_rating_average_string',
                ['product'],
                'Get the average product rating as a string, for use in templates'),
               ('satchmo_ext.productratings.templatetags.satchmo_ratings.product_rating_average',
                ['product'],
                'Get the average product rating as a number'),
               ('satchmo_ext.recentlist.context_processors.recent_products',
                ['request'],
                'Puts the recently-viewed products in the page variables'),
               ('satchmo_ext.recentlist.templatetags.satchmo_recentlist.recentlyviewed',
                ['recent', "slug=''"],
                'Build a list of recent products, skipping the current one if given.'),
               ('satchmo_ext.satchmo_toolbar.listeners.add_toolbar_context',
                ['sender', 'context={}', '**kwargs'],
                ''),
               ('satchmo_ext.satchmo_toolbar.listeners.start_listening', [], ''),
               ('satchmo_ext.tieredpricing.models.tiered_price_listener',
                ['signal', 'adjustment=None', '**kwargs'],
                'Listens for satchmo_price_query signals, and returns a tiered price instead of the\n    default price.  \n\n    Requires threaded_multihost.ThreadLocalMiddleware to be installed so\n    that it can determine the current user.'),
               ('satchmo_ext.upsell.views.cart_add_listener',
                ['cart=None', 'product=None', 'form=None', 'request=None', '**kwargs'],
                'Post-processes the form, handling upsell formfields.\n    \n    fields (potentially) in the form:\n        upsell_count: controls how many upsell formblocks to look for.\n        for ix in range(0,upsell_count):\n            upsell_include_ix: true if this one is to be included\n            upsell_qty_ix: quantity\n            upsell_slug_ix: product slug        \n    '),
               ('satchmo_ext.upsell.views._add_upsell', ['form', 'cart', 'i'], ''),
               ('satchmo_ext.upsell.templatetags.satchmo_upsell.product_upsell',
                ['product'],
                '\n    Display the list of products that are upsell candidates for currently viewed product.\n    '),
               ('satchmo_ext.wishlist.listeners.wishlist_cart_add_listener',
                ['sender', 'request=None', 'method={}', '**kwargs'],
                'Listens for cart_add_view signal and checks to see if it is a wishlist add request.\n    If so, returns the wishlist add view method.\n    '),
               ('satchmo_ext.wishlist.tests.get_step1_post_data', ['US'], ''),
               ('satchmo_ext.wishlist.urls.add_wishlist_urls',
                ['sender', 'patterns=()', '**kwargs'],
                ''),
               ('satchmo_ext.wishlist.views.wishlist_view', ['request', "message=''"], ''),
               ('satchmo_ext.wishlist.views.wishlist_add',
                ['request'],
                'Add an item to the wishlist.'),
               ('satchmo_ext.wishlist.views.wishlist_add_ajax',
                ['request', "template='shop/json.html'"],
                ''),
               ('satchmo_ext.wishlist.views.wishlist_move_to_cart', ['request'], ''),
               ('satchmo_ext.wishlist.views.wishlist_remove', ['request'], ''),
               ('satchmo_ext.wishlist.views.wishlist_remove_ajax',
                ['request', "template='shop/json.html'"],
                ''),
               ('satchmo_ext.wishlist.views._wish_from_post', ['request'], ''),
               ('satchmo_ext.wishlist.views._wishlist_remove', ['request'], ''),
               ('satchmo_ext.wishlist.views._remove_wishes_on_order',
                ['order=None', '**kwargs'],
                ''),
               ('satchmo_ext.wishlist.views._wishlist_requires_login', ['request'], ''),
               ('satchmo_store.get_version', [], 'Returns the version as a human-format string.'),
               ('satchmo_store.accounts.mail.send_welcome_email',
                ['email', 'first_name', 'last_name'],
                'Send a store new account welcome mail to `email`.'),
               ('satchmo_store.accounts.views.emaillogin',
                ['request',
                 "template_name='registration/login.html'",
                 'auth_form=EmailAuthenticationForm',
                 'redirect_field_name=REDIRECT_FIELD_NAME'],
                'Displays the login form and handles the login action. Altered to use the EmailAuthenticationForm'),
               ('satchmo_store.accounts.views._login',
                ['request', 'redirect_to'],
                '"Altered version of the default login, intended to be called by `combined_login`.\n\n    Returns tuple:\n    - success\n    - redirect (success) or form (on failure)\n    '),
               ('satchmo_store.accounts.views.register_handle_address_form',
                ['request', 'redirect=None'],
                '\n    Handle all registration logic.  This is broken out from "register" to allow easy overriding/hooks\n    such as a combined login/register page.\n    \n    This handler allows a login or a full registration including address.\n\n    Returns:\n    - Success flag\n    - HTTPResponseRedirect (success) or form (fail)\n    - A dictionary with extra context fields\n    '),
               ('satchmo_store.accounts.views.register_handle_form',
                ['request', 'redirect=None'],
                '\n    Handle all registration logic.  This is broken out from "register" to allow easy overriding/hooks\n    such as a combined login/register page.\n    \n    This method only presents a typical login or register form, not a full address form \n    (see register_handle_address_form for that one.)\n\n    Returns:\n    - Success flag\n    - HTTPResponseRedirect (success) or form (fail)\n    '),
               ('satchmo_store.accounts.views.activate',
                ['request', 'activation_key'],
                "\n    Activates a user's account, if their key is valid and hasn't\n    expired.\n    "),
               ('satchmo_store.accounts.views.login_signup',
                ['request',
                 "template_name='contact/login_signup.html'",
                 'registration_handler=register_handle_form'],
                'Display/handle a combined login and create account form'),
               ('satchmo_store.accounts.views.login_signup_address',
                ['request', "template_name='contact/login_signup_address.html'"],
                '\n    View which allows a user to login or else fill out a full address form.\n    '),
               ('satchmo_store.accounts.views.register',
                ['request', 'redirect=None', "template='registration/registration_form.html'"],
                '\n    Allows a new user to register an account.\n    '),
               ('satchmo_store.contact.listeners.au_postcode_validator',
                ['sender', 'postcode=None', 'country=None', '**kwargs'],
                ''),
               ('satchmo_store.contact.listeners.ca_postcode_validator',
                ['sender', 'postcode=None', 'country=None', '**kwargs'],
                ''),
               ('satchmo_store.contact.listeners.uk_postcode_validator',
                ['sender', 'postcode=None', 'country=None', '**kwargs'],
                'Validates UK postcodes'),
               ('satchmo_store.contact.listeners.us_postcode_validator',
                ['sender', 'postcode=None', 'country=None', '**kwargs'],
                ''),
               ('satchmo_store.contact.views.view', ['request'], 'View contact info.'),
               ('satchmo_store.contact.views.update', ['request'], 'Update contact info'),
               ('satchmo_store.contact.templatetags.satchmo_contact.addressblock',
                ['address'],
                'Output an address as a HTML formatted text block'),
               ('satchmo_store.contact.templatetags.satchmo_contact.contact_for_user',
                ['user'],
                ''),
               ('satchmo_store.shop.context_processors.settings', ['request'], ''),
               ('satchmo_store.shop.listeners.only_one_item_in_cart',
                ['sender', 'cart=None', 'cartitem=None', '**kwargs'],
                ''),
               ('satchmo_store.shop.listeners.create_download_link',
                ['product=None', 'order=None', 'subtype=None', '**kwargs'],
                'Creates a download link for a Downloadable Product on order success.'),
               ('satchmo_store.shop.listeners.decrease_inventory_on_sale',
                ['sender', 'order=None', '**kwargs'],
                'Track inventory and total sold.'),
               ('satchmo_store.shop.listeners.ship_downloadable_order',
                ['order=None', '**kwargs'],
                ''),
               ('satchmo_store.shop.listeners.recalc_total_on_contact_change',
                ['contact=None', '**kwargs'],
                'If the contact has changed, recalculate the order total to ensure all current triggers are hit.'),
               ('satchmo_store.shop.listeners.remove_order_on_cart_update',
                ['request=None', 'cart=None', '**kwargs'],
                'Remove partially completed order when the cart is updated'),
               ('satchmo_store.shop.listeners.veto_out_of_stock',
                ['sender', 'cartitem=None', 'added_quantity=0', '**kwargs'],
                'Listener which vetoes adding products to the cart which are out of stock.'),
               ('satchmo_store.shop.listeners.start_default_listening',
                [],
                'Add required default listeners'),
               ('satchmo_store.shop.notification.order_success_listener',
                ['order=None', '**kwargs'],
                'Listen for order_success signal, and send confirmations'),
               ('satchmo_store.shop.notification.notify_on_ship_listener',
                ['sender', "oldstatus=''", "newstatus=''", 'order=None', '**kwargs'],
                "Listen for a transition to 'shipped', and notify customer."),
               ('satchmo_store.shop.notification.send_order_confirmation',
                ['order', "template='shop/email/order_complete.txt'"],
                'Send an order confirmation mail to the customer.\n    '),
               ('satchmo_store.shop.notification.send_order_notice',
                ['order', "template='shop/email/order_placed_notice.txt'"],
                'Send an order confirmation mail to the owner.\n    '),
               ('satchmo_store.shop.notification.send_ship_notice',
                ['order', "template='shop/email/order_shipped.txt'"],
                'Send an order shipped mail to the customer.\n    '),
               ('satchmo_store.shop.satchmo_settings.add_setting_defaults',
                ['newdefaults'],
                '\n    This method can be used by other applications to define their\n    default values.\n    \n    newdefaults has to be a dictionary containing name -> value of\n    the settings.\n    '),
               ('satchmo_store.shop.satchmo_settings.set_satchmo_setting', ['name', 'value'], ''),
               ('satchmo_store.shop.satchmo_settings.get_satchmo_setting',
                ['name', 'default_value=None'],
                ''),
               ('satchmo_store.shop.tests.get_step1_post_data', ['US'], ''),
               ('satchmo_store.shop.tests.make_order_payment',
                ['order', 'paytype=None', 'amount=None'],
                ''),
               ('satchmo_store.shop.tests.make_test_order',
                ['country',
                 'state',
                 'include_non_taxed=False',
                 'site=None',
                 'price=None',
                 'quantity=5'],
                ''),
               ('satchmo_store.shop.tests.vetoAllListener',
                ['sender', 'vetoes={}', '**kwargs'],
                ''),
               ('satchmo_store.shop.utils.is_multihost_enabled', [], ''),
               ('satchmo_store.shop.management.commands.delete_all_dbs.module_to_dict',
                ['module', "omittable=lambda k: k.startswith('_')"],
                'Converts a module namespace to a Python dictionary. Used by get_settings_diff.'),
               ('satchmo_store.shop.templatetags.messaging_tags.show_messages', ['context'], ''),
               ('satchmo_store.shop.templatetags.satchmo_adminapplist.rsplit',
                ['s', 'delim', 'maxsplit'],
                ''),
               ('satchmo_store.shop.templatetags.satchmo_adminapplist.rsplit',
                ['s', 'delim', 'maxsplit'],
                "Return a list of the words of the string s, scanning s\n\tfrom the end. To all intents and purposes, the resulting\n\tlist of words is the same as returned by split(), except\n\twhen the optional third argument maxsplit is explicitly\n\tspecified and nonzero. When maxsplit is nonzero, at most\n\tmaxsplit number of splits - the rightmost ones - occur,\n\tand the remainder of the string is returned as the first\n\telement of the list (thus, the list will have at most\n\tmaxsplit+1 elements). New in version 2.4.\n\t>>> rsplit('foo.bar.baz', '.', 0)\n\t['foo.bar.baz']\n\t>>> rsplit('foo.bar.baz', '.', 1)\n\t['foo.bar', 'baz']\n\t>>> rsplit('foo.bar.baz', '.', 2)\n\t['foo', 'bar', 'baz']\n\t>>> rsplit('foo.bar.baz', '.', 99)\n\t['foo', 'bar', 'baz']\n\t"),
               ('satchmo_store.shop.templatetags.satchmo_adminapplist.filter_admin_app_list',
                ['parser', 'token'],
                'Filters the list of installed apps returned by\n       django.contrib.admin.templatetags.adminapplist,\n       excluding apps installed by satchmo.\n    '),
               ('satchmo_store.shop.templatetags.satchmo_adminorder_tags.customorder_management',
                ['order'],
                ''),
               ('satchmo_store.shop.templatetags.satchmo_adminorder_tags.inprocess_order_list',
                [],
                'Returns a formatted list of in-process orders'),
               ('satchmo_store.shop.templatetags.satchmo_adminorder_tags.orders_at_status',
                ['status'],
                ''),
               ('satchmo_store.shop.templatetags.satchmo_adminorder_tags.orderpayment_list',
                ['order'],
                ''),
               ('satchmo_store.shop.templatetags.satchmo_adminorder_tags.pending_order_list',
                [],
                'Returns a formatted list of pending orders'),
               ('satchmo_store.shop.templatetags.satchmo_cart.cartitem_custom_details',
                ['cartitem'],
                ''),
               ('satchmo_store.shop.templatetags.satchmo_cart.cartitem_subscription_details',
                ['cartitem'],
                ''),
               ('satchmo_store.shop.templatetags.satchmo_cart.cartitem_total',
                ['parser', 'token'],
                'Returns the line total for the cartitem, possibly with tax added.  If currency evaluates true,\n    then return the total formatted through moneyfmt.\n\n    Example::\n\n        {% cartitem_total cartitem [show_tax] [currency] %}\n    '),
               ('satchmo_store.shop.templatetags.satchmo_cart.cart_total',
                ['parser', 'token'],
                'Returns the total for the cart, possibly with tax added.  If currency evaluates true,\n    then return the total formatted through moneyfmt.\n\n    Example::\n\n        {% cart_total cart [show_tax] [currency] [discounted] %}\n    '),
               ('satchmo_store.shop.templatetags.satchmo_category.recurse_for_children',
                ['current_node', 'parent_node', 'active_cat', 'show_empty=True'],
                ''),
               ('satchmo_store.shop.templatetags.satchmo_category.category_tree',
                ['id=None'],
                '\n    Creates an unnumbered list of the categories.  \n    \n    Example::\n    \n        <ul>\n            <li>Books\n                <ul>\n                <li>Science Fiction\n                    <ul>\n                    <li>Space stories</li>\n                    <li>Robot stories</li>\n                    </ul>\n                </li>\n                <li>Non-fiction</li>\n                </ul>\n        </ul>\n    '),
               ('satchmo_store.shop.templatetags.satchmo_category.do_categorylistnode',
                ['parser', 'token'],
                'Push the category list into the context using the given variable name.\n\n    Sample usage::\n\n        {% category_list slug as var %}\n        or\n        {% category_list as var %}\n        \n\n    '),
               ('satchmo_store.shop.templatetags.satchmo_category.product_category_siblings',
                ['product', "args=''"],
                ''),
               ('satchmo_store.shop.templatetags.satchmo_currency.currency',
                ['value', "args=''"],
                "Convert a value to a money formatted string.\n\n    places:  required number of places after the decimal point\n    curr:    optional currency symbol before the sign (may be blank)\n    wrapcents:tag to wrap the part after the decimal point\n\n    Usage:\n        val|currency\n        val|currency:'places=2'\n        val|currency:'places=2:wrapcents=sup'\n    "),
               ('satchmo_store.shop.templatetags.satchmo_google.show_tracker',
                ['secure=False'],
                '\n    Output the google tracker code.\n    '),
               ('satchmo_store.shop.templatetags.satchmo_google.show_receipt',
                ['context'],
                '\n    Output our receipt in the format that Google Analytics needs.\n    '),
               ('satchmo_store.shop.templatetags.satchmo_google.google_track_signup',
                ['context'],
                '\n    Output a a new user signup in the format that Google Analytics needs.\n    '),
               ('satchmo_store.shop.templatetags.satchmo_google.google_adwords_sale',
                ['context'],
                '\n    Output our receipt in the format that Google Adwords needs.\n    '),
               ('satchmo_store.shop.templatetags.satchmo_google.google_adwords_signup',
                ['context'],
                '\n    Output signup info in the format that Google adwords needs.\n    '),
               ('satchmo_store.shop.templatetags.satchmo_order.order_details',
                ['context', 'order', 'default_view_tax=False'],
                'Output a formatted block giving order details.'),
               ('satchmo_store.shop.templatetags.satchmo_order.order_tracking_details',
                ['order', 'paylink=False', 'default_view_tax=False'],
                'Output a formatted block giving order tracking details.'),
               ('satchmo_store.shop.templatetags.satchmo_order.order_variable',
                ['order', 'args'],
                "\n    Get a variable from an order\n\n    Sample usage::\n\n      {{ order|order_variable:'variable' }}\n\n    "),
               ('satchmo_store.shop.templatetags.satchmo_price.option_price',
                ['option_item'],
                '\n    Returns the price as (+$1.00)\n    or (-$1.00) depending on the sign of the price change\n    The currency symbol is set in the settings.py file\n    '),
               ('satchmo_store.shop.templatetags.satchmo_price.option_total_price',
                ['product', 'option_item'],
                '\n    Returns the price as (+$1.00)\n    or (-$1.00) depending on the sign of the price change\n    The currency symbol is set in the settings.py file\n    '),
               ('satchmo_store.shop.templatetags.satchmo_util.debug_mode',
                ['value'],
                'Return true if site is in debug mode'),
               ('satchmo_store.shop.templatetags.satchmo_util.template_range',
                ['value'],
                'Return a range 1..value'),
               ('satchmo_store.shop.templatetags.satchmo_util.in_list',
                ['value', 'val=None'],
                'returns "true" if the value is in the list'),
               ('satchmo_store.shop.templatetags.satchmo_util.as_json',
                ['value'],
                'Return the value as a json encoded object'),
               ('satchmo_store.shop.templatetags.satchmo_util.blackbird_logging',
                ['context'],
                ''),
               ('satchmo_store.shop.templatetags.satchmo_util.truncate_decimal',
                ['val', 'places=2'],
                ''),
               ('satchmo_store.shop.templatetags.satchmo_util.tag_attr', ['obj', 'arg1'], ''),
               ('satchmo_store.shop.templatetags.satchmo_util.shuffle',
                ['l'],
                '\n    Returns the shuffled list.\n    '),
               ('satchmo_store.shop.templatetags.satchmo_util.remove_tags',
                ['value'],
                "\n    Returns the text with all tags removed\n    This can fail if give invalid input. This is only intended to be used on safe HTML markup. It should not be used to \n    clean unsafe input data.\n    For example, this will fail.\n    \n    Example::\n    \n        >> remove_tags('<<> <test></test>')\n            '<test></test>'\n    "),
               ('satchmo_store.shop.templatetags.satchmo_util.lookup',
                ['value', 'key'],
                '\n    Return a dictionary lookup of key in value\n    '),
               ('satchmo_store.shop.templatetags.satchmo_util.is_mod', ['value', "args=''"], ''),
               ('satchmo_store.shop.templatetags.satchmo_util.more_than',
                ['value', "args=''"],
                ''),
               ('satchmo_store.shop.templatetags.satchmo_util.satchmo_category_search_form',
                ['category=None'],
                '\n    Display the form for customer to specify category to search.\n    '),
               ('satchmo_store.shop.templatetags.satchmo_util.satchmo_language_selection_form',
                ['context'],
                '\n    Display the set language form, if enabled in shop settings.\n    '),
               ('satchmo_store.shop.templatetags.satchmo_util.satchmo_search_form',
                [],
                '\n    Display the search form.\n    '),
               ('satchmo_store.shop.templatetags.satchmo_util.pounds',
                ['weight'],
                '\n    Finds the weight of a cart item, taking into consideration the quantity in\n    the order.\n    '),
               ('satchmo_store.shop.templatetags.satchmo_util.ounces', ['weight'], ''),
               ('satchmo_store.shop.views.cart.decimal_too_big',
                ['quantity'],
                "\n    Helper to make sure the decimal number isn't too big to process.\n    This does not validate whether or not the decimal is valid just that a \n    Decimal is too large.\n    "),
               ('satchmo_store.shop.views.cart._set_quantity',
                ['request', 'force_delete=False'],
                "Set the quantity for a specific cartitem.\n    Checks to make sure the item is actually in the user's cart.\n    "),
               ('satchmo_store.shop.views.cart.display',
                ['request', 'cart=None', "error_message=''", 'default_view_tax=NOTSET'],
                'Display the items in the cart.'),
               ('satchmo_store.shop.views.cart.add',
                ['request', 'id=0', "redirect_to='satchmo_cart'"],
                'Add an item to the cart.'),
               ('satchmo_store.shop.views.cart.add_ajax',
                ['request', 'id=0', "template='shop/json.html'"],
                ''),
               ('satchmo_store.shop.views.cart.add_multiple',
                ['request',
                 "redirect_to='satchmo_cart'",
                 'products=None',
                 "template='shop/multiple_product_form.html'"],
                'Add multiple items to the cart.\n    '),
               ('satchmo_store.shop.views.cart.agree_terms', ['request'], 'Agree to terms'),
               ('satchmo_store.shop.views.cart.remove',
                ['request'],
                'Remove an item from the cart.'),
               ('satchmo_store.shop.views.cart.remove_ajax',
                ['request', "template='shop/json.html'"],
                'Remove an item from the cart. Returning JSON formatted results.'),
               ('satchmo_store.shop.views.cart.set_quantity',
                ['request'],
                'Set the quantity for a cart item.\n\n    Intended to be called via the cart itself, returning to the cart after done.\n    '),
               ('satchmo_store.shop.views.cart.set_quantity_ajax',
                ['request', "template='shop/json.html'"],
                'Set the quantity for a cart item, returning results formatted for handling by script.\n    '),
               ('satchmo_store.shop.views.cart.product_from_post',
                ['productslug', 'formdata'],
                ''),
               ('satchmo_store.shop.views.cart._product_error',
                ['request', 'product', 'msg'],
                ''),
               ('satchmo_store.shop.views.comments.post_rating',
                ['request', "url='/ratings/posted/'", 'maxcomments=1'],
                'Wrap django.contrib.comments.views.comments.post_comment, so that we can control where the user\n    is returned after submit, also add the ability to control the maximum number of ratings per user \n    per product.\n    '),
               ('satchmo_store.shop.views.contact.form', ['request'], ''),
               ('satchmo_store.shop.views.download._validate_key',
                ['download_key'],
                '\n    Helper function to make sure the key is valid and all the other constraints on\n    the download are still valid.\n    Returns a tuple (False,"Error Message", None) or (True, None, dl_product)\n    '),
               ('satchmo_store.shop.views.download.process',
                ['request', 'download_key'],
                '\n    Validate that the key is good, then set a session variable.\n    Redirect to the download view.\n    \n    We use this two step process so that we can easily display meaningful feedback\n    to the user.   \n    '),
               ('satchmo_store.shop.views.download.send_file',
                ['request', 'download_key'],
                '\n    After the appropriate session variable has been set, we commence the download.\n    The key is maintained in the url but the session variable is used to control the\n    download in order to maintain security.\n    \n    For this to work, your server must support the X-Sendfile header\n    Lighttpd and Apache should both work with the headers used below.\n    For apache, will need mod_xsendfile\n    For lighttpd, allow-x-send-file must be enabled\n    \n    Also, you must ensure that the directory where the file is stored is protected\n    from users.  \n    \n    In lighttpd.conf:\n    $HTTP["url"] =~ "^/static/protected/" {\n    url.access-deny = ("")\n    }\n    \n    In Nginx:\n    location /protected/{\n             internal;\n             root /usr/local/www/website/static;\n        }\n    \n    '),
               ('satchmo_store.shop.views.home.home',
                ['request', "template='shop/index.html'"],
                ''),
               ('satchmo_store.shop.views.orders.order_history', ['request'], ''),
               ('satchmo_store.shop.views.orders.order_tracking', ['request', 'order_id'], ''),
               ('satchmo_store.shop.views.search.search_view',
                ['request', "template='shop/search.html'"],
                'Perform a search based on keywords and categories in the form submission'),
               ('satchmo_store.shop.views.sitemaps.satchmo_main', [], ''),
               ('satchmo_store.shop.views.smart.smart_add',
                ['request'],
                'Redirect the request to cart_add (default) or whatever gets returned by\n    the cart_add_view signal.'),
               ('satchmo_utils.add_month',
                ['date', 'n=1'],
                'add n+1 months to date then subtract 1 day\n    to get eom, last day of target month'),
               ('satchmo_utils.app_enabled',
                ['appname'],
                'Check the app list to see if a named app is installed.'),
               ('satchmo_utils.can_loop_over', ['maybe'], 'Test value to see if it is list like'),
               ('satchmo_utils.cross_list',
                ['sequences'],
                '\n    Code taken from the Python cookbook v.2 (19.9 - Looping through the cross-product of multiple iterators)\n    This is used to create all the variations associated with an product\n    '),
               ('satchmo_utils.current_media_url',
                ['request'],
                'Return the media_url, taking into account SSL.'),
               ('satchmo_utils.is_scalar',
                ['maybe'],
                'Test to see value is a string, an int, or some other scalar type'),
               ('satchmo_utils.flatten_list',
                ['sequence', 'scalarp=is_scalar', 'result=None'],
                'flatten out a list by putting sublist entries in the main list'),
               ('satchmo_utils.flatten',
                ['sequence', 'scalarp=is_scalar'],
                'flatten out a list by putting sublist entries in the main list'),
               ('satchmo_utils.get_flat_list',
                ['sequence'],
                'flatten out a list and return the flat list'),
               ('satchmo_utils.is_list_or_tuple', ['maybe'], ''),
               ('satchmo_utils.is_string_like',
                ['maybe'],
                'Test value to see if it acts like a string'),
               ('satchmo_utils.load_module', ['module'], 'Load a named python module.'),
               ('satchmo_utils.load_once', ['key', 'module'], ''),
               ('satchmo_utils.normalize_dir', ['dir_name'], ''),
               ('satchmo_utils.random_string',
                ['length', 'variable=False', 'charset=_LETTERS'],
                ''),
               ('satchmo_utils.request_is_secure', ['request'], ''),
               ('satchmo_utils.url_join',
                ['*args'],
                "Join any arbitrary strings into a forward-slash delimited string.\n    Do not strip leading / from first element, nor trailing / from last element.\n\n    This function can take lists as arguments, flattening them appropriately.\n\n    example:\n    url_join('one','two',['three','four'],'five') => 'one/two/three/four/five'\n    "),
               ('satchmo_utils.dynamic.lookup_template',
                ['settings', 'template'],
                'Return a template name, which may have been overridden in the settings.'),
               ('satchmo_utils.dynamic.lookup_url',
                ['settings', 'name', 'include_server=False', 'ssl=False'],
                'Look up a named URL for the payment module.\n\n    Tries a specific-to-general lookup fallback, returning\n    the first positive hit.\n\n    First look for a dictionary named "URL_OVERRIDES" on the settings object.\n    Next try prepending the module name to the name\n    Last just look up the name\n    '),
               ('satchmo_utils.json.json_encode',
                ['data'],
                "\n    The main issues with django's default json serializer is that properties that\n    had been added to a object dynamically are being ignored (and it also has \n    problems with some models).\n    "),
               ('satchmo_utils.numbers.round_decimal',
                ["val='0'", 'places=None', "roundfactor='0'", 'normalize=True'],
                '\n    PARTIAL UNIT ROUNDING DECIMAL\n    Converts a valid float, integer, or string to a decimal number with a specified\n    number of decimal places, performs "partial unit rounding", and decimal normalization.\n\n    METHOD ARGUEMENTS:\n    `val` The value to be converted and optionally formated to decimal.\n    `places` The decimal precision is defined by integer "places" and\n        must be <= the precision defined in the decimal.Decimal context.\n    `roundfactor` (partial unit rounding factor) If purf is between -1 and 1, purf rounds up\n        (positive purf value) or down (negative purf value) in factional "purf" increments.\n    `normalize` If normalize is True (any value other than False), then rightmost zeros are truncated.\n    '),
               ('satchmo_utils.numbers.trunc_decimal',
                ['val', 'places'],
                'Legacy compatibility, rounds the way the old satchmo 0.8.1 used to round.'),
               ('satchmo_utils.unique_id._id_generator',
                ['first_name', 'last_name', 'email'],
                ''),
               ('satchmo_utils.unique_id.generate_id',
                ["first_name=''", "last_name=''", "email=''"],
                ''),
               ('satchmo_utils.unique_id.slugify',
                ['s',
                 'entities=True',
                 'decimal=True',
                 'hexadecimal=True',
                 'instance=None',
                 "slug_field='slug'",
                 'filter_dict=None'],
                ''),
               ('satchmo_utils.urlhelper.delete_named_urlpattern',
                ['urlpatterns', 'name'],
                'Delete the named urlpattern.\n    '),
               ('satchmo_utils.urlhelper.remove_duplicate_urls',
                ['urls', 'names'],
                'Remove any URLs whose names are already in use.'),
               ('satchmo_utils.urlhelper.replace_urlpattern',
                ['urlpatterns', 'replacement'],
                "Delete the old urlpattern, and add a new one.\n    \n    parameters:\n        urlpatterns: list\n        replacement: an `django.conf.urls.defaults.url` object.\n    \n    example:\n    \n        replacement = url(r'^accounts/login/', 'my.site.login_signup', {}, name='auth_login'))\n        replace_urlpattern(urlpatterns, replacement)\n    "),
               ('satchmo_utils.urlhelper.replace_urlpatterns',
                ['urlpatterns', 'replacelist'],
                ''),
               ('satchmo_utils.views.bad_or_missing',
                ['request', 'msg'],
                "\n    Return an HTTP 404 response for a date request that cannot possibly exist.\n    The 'msg' parameter gives the message for the main panel on the page.\n    "),
               ('satchmo_utils.widgets._render_decimal',
                ['value', 'places=2', 'min_places=2'],
                ''),
               ('satchmo_utils.templatetags._stripquotes', ['val'], ''),
               ('satchmo_utils.templatetags.get_filter_args',
                ['argstring', 'keywords=()', 'intargs=()', 'boolargs=()', 'stripquotes=False'],
                "Convert a string formatted list of arguments into a kwargs dictionary.\n    Automatically converts all keywords in intargs to integers.\n\n    If keywords is not empty, then enforces that only those keywords are returned.\n    Also handles args, which are just elements without an equal sign\n\n    ex:\n    in: get_filter_kwargs('length=10,format=medium', ('length'))\n    out: (), {'length' : 10, 'format' : 'medium'}\n    "),
               ('satchmo_utils.templatetags.normalize_decimal.normalize_decimal',
                ['value', "args=''"],
                '\n    PARTIAL UNIT ROUNDING DECIMAL\n    Converts a valid float, integer, or string to a decimal number with a specified\n    number of decimal places, performs "partial unit rounding", and decimal normalization.\n\n    Usage:\n        val|normalize_decimal\n        val|normalize_decimal:\'places=2\'\n        val|normalize_decimal:\'places=2:roundfactor=.5\'\n        val|normalize_decimal:\'places=2:roundfactor=.5:normalize=False\'\n\n    -val- The value to be converted and optionally formated to decimal.\n    -places- The decimal place precision is defined by integer "places" and\n        must be <= the precision defined in the decimal.Decimal context.  roundfactor represents\n        the maximum number of decimal places to display if normalize is False.\n\n    -roundfactor- (partial unit rounding factor) If roundfactor is between 0 and 1, roundfactor rounds up\n        (positive roundfactor value) or down (negative roundfactor value) in factional "roundfactor" increments.\n    -normalize- If normalize is True (any value other than False), then rightmost zeros are truncated.\n\n    General Filter/Template Usage.\n        normalize_decimal is generally used without parameters in the template.\n        Defaults are: places=2, roundfactor=None, normalize=True\n        If normalize_decimal is not used as a template filter, the value (quantity)\n        will display the full decimal value in the template field.\n    '),
               ('satchmo_utils.thumbnail.field._delete',
                ['sender', 'instance=None', '**kwargs'],
                ''),
               ('satchmo_utils.thumbnail.field.upload_dir', ['instance', 'filename'], ''),
               ('satchmo_utils.thumbnail.text.URLify',
                ['s', 'num_chars=None'],
                " based on urlify.js from django\n        effect:\n            removes common words (_REMOVELIST)\n            removes unneeded whitespaces around '-'\n            trim leading/trailing whitespaces\n            lowercase string\n            replace space with '-'\n            if num_chars if given trim to number of given characters\n            finnaly quotes other URLunsafe words with urlib.quote\n    "),
               ('satchmo_utils.thumbnail.text.text_cleanup',
                ['txt', 'clean_br=True', 'cleanup_double_space=True', 'strip_ws=True'],
                ''),
               ('satchmo_utils.thumbnail.utils._get_thumbnail_path',
                ['path', 'width=None', 'height=None'],
                ' create thumbnail path from path and required width and/or height.\n\n        thumbnail file name is constructed like this:\n            <basename>_t_[w<width>][_h<height>].<extension>\n    '),
               ('satchmo_utils.thumbnail.utils._get_path_from_url',
                ['url', 'root=settings.MEDIA_ROOT', 'url_root=settings.MEDIA_URL'],
                ' make filesystem path from url '),
               ('satchmo_utils.thumbnail.utils._get_url_from_path',
                ['path', 'root=settings.MEDIA_ROOT', 'url_root=settings.MEDIA_URL'],
                ' make url from filesystem path '),
               ('satchmo_utils.thumbnail.utils._has_thumbnail',
                ['photo_url',
                 'width=None',
                 'height=None',
                 'root=settings.MEDIA_ROOT',
                 'url_root=settings.MEDIA_URL'],
                ''),
               ('satchmo_utils.thumbnail.utils.make_thumbnail',
                ['photo_url',
                 'width=None',
                 'height=None',
                 'root=settings.MEDIA_ROOT',
                 'url_root=settings.MEDIA_URL'],
                ' create thumbnail '),
               ('satchmo_utils.thumbnail.utils._remove_thumbnails',
                ['photo_url', 'root=settings.MEDIA_ROOT', 'url_root=settings.MEDIA_URL'],
                ''),
               ('satchmo_utils.thumbnail.utils.remove_model_thumbnails',
                ['model'],
                ' remove all thumbnails for all ImageFields (and subclasses) in the model '),
               ('satchmo_utils.thumbnail.utils.make_admin_thumbnail',
                ['url'],
                ' make thumbnails for admin interface '),
               ('satchmo_utils.thumbnail.utils.make_admin_thumbnails',
                ['model'],
                ' create thumbnails for admin interface for all ImageFields (and subclasses) in the model '),
               ('satchmo_utils.thumbnail.utils._get_thumbnail_url',
                ['photo_url',
                 'width=None',
                 'height=None',
                 'root=settings.MEDIA_ROOT',
                 'url_root=settings.MEDIA_URL'],
                ' return thumbnail URL for requested photo_url and required width and/or height\n\n        if thumbnail file do not exists returns original URL\n    '),
               ('satchmo_utils.thumbnail.utils._set_cached_file',
                ['path', 'value'],
                ' Store file dependent data in cache.\n        Timeout is set to _FILE_CACHE_TIMEOUT (1month).\n    '),
               ('satchmo_utils.thumbnail.utils._get_cached_file',
                ['path', 'default=None'],
                ' Get file content from cache.\n        If modification time differ return None and delete\n        data from cache.\n    '),
               ('satchmo_utils.thumbnail.utils.get_image_size',
                ['photo_url', 'root=settings.MEDIA_ROOT', 'url_root=settings.MEDIA_URL'],
                ' returns image size.\n\n        image sizes are cached (using separate locmem:/// cache instance)\n    '),
               ('satchmo_utils.thumbnail.utils._rename',
                ['old_name', 'new_name'],
                ' rename image old_name -> name '),
               ('satchmo_utils.thumbnail.utils.rename_by_field',
                ['file_path', 'req_name', 'add_path=None'],
                ''),
               ('satchmo_utils.thumbnail.templatetags.satchmo_thumbnail.thumbnail',
                ['url', "args=''"],
                ' Returns thumbnail URL and create it if not already exists.\n\n.. note:: requires PIL_,\n    if PIL_ is not found or thumbnail can not be created returns original URL.\n\n.. _PIL: http://www.pythonware.com/products/pil/\n\nUsage::\n\n    {{ url|thumbnail:"width=10,height=20" }}\n    {{ url|thumbnail:"width=10" }}\n    {{ url|thumbnail:"height=20" }}\n\nParameters:\n\nwidth\n    requested image width\n\nheight\n    requested image height\n\nImage is **proportionally** resized to dimension which is no greather than ``width x height``.\n\nThumbnail file is saved in the same location as the original image\nand his name is constructed like this::\n\n    %(dirname)s/%(basename)s_t[_w%(width)d][_h%(height)d].%(extension)s\n\nor if only a width is requested (to be compatibile with admin interface)::\n\n    %(dirname)s/%(basename)s_t%(width)d.%(extension)s\n\n'),
               ('satchmo_utils.thumbnail.templatetags.satchmo_thumbnail.image_width',
                ['url'],
                ' Returns image width.\n\nUsage:\n    {{ url|image_width }}\n'),
               ('satchmo_utils.thumbnail.templatetags.satchmo_thumbnail.image_height',
                ['url'],
                ' Returns image height.\n\nUsage:\n    {{ url|image_width }}\n'),
               ('shipping.config.shipping_methods', [], ''),
               ('shipping.config.shipping_method_by_key', ['key'], ''),
               ('shipping.config.shipping_choices', [], ''),
               ('shipping.fields.shipping_choices', [], ''),
               ('shipping.utils.update_shipping',
                ['order', 'shipping', 'contact', 'cart'],
                'Set the shipping for this order'),
               ('shipping.views.displayDoc', ['request', 'id', 'doc'], ''),
               ('shipping.modules.canadapost.get_methods',
                [],
                "\n    Fires off shipper.Shipper() for each choice that's\n    enabled in /settings/\n  "),
               ('shipping.modules.dummy.get_methods', [], ''),
               ('shipping.modules.fedex.get_methods',
                [],
                "\n    Fires off shipper.Shipper() for each choice that's\n    enabled in /settings/\n  "),
               ('shipping.modules.flat.get_methods', [], ''),
               ('shipping.modules.per.get_methods', [], ''),
               ('shipping.modules.productshipping.get_methods', [], ''),
               ('shipping.modules.productshipping.templatetags.product_shipping_tags.product_shipping',
                ['product', "args=''"],
                ''),
               ('shipping.modules.tiered.get_methods', [], ''),
               ('shipping.modules.tiered.tests.make_tiers',
                ['carrier', 'prices', 'expires=None'],
                ''),
               ('shipping.modules.tiered.templatetags.tiered_tags.tiered_shipping',
                ['price', "args=''"],
                ''),
               ('shipping.modules.tieredquantity.get_methods', [], ''),
               ('shipping.modules.tieredquantity.tests.make_tiers',
                ['carrier', 'prices', 'expires=None'],
                ''),
               ('shipping.modules.tieredweight.get_methods', [], ''),
               ('shipping.modules.tieredweight.models._get_cart_weight', ['cart'], ''),
               ('shipping.modules.tieredweight.tests.make_tiers',
                ['zone', 'prices', 'expires=None'],
                ''),
               ('shipping.modules.ups.get_methods', [], ''),
               ('shipping.modules.usps.get_methods', [], ''),
               ('tax.tests._set_percent_taxer', ['percent'], ''),
               ('tax.utils.get_tax_processor', ['order=None', 'user=None'], ''),
               ('tax.utils.round_cents', ['x'], ''),
               ('tax.modules.us_sst.management.commands.sst_import_boundry.ash_split',
                ['arg', 'qty'],
                "Unfortunately, states don't alwys publish the full SST fields in the\n    boundry files like they are required to. It's a shame really. So this function\n    will force a string to split to 'qty' fields, adding None values as needed to\n    get there.\n    "),
               ('tax.templatetags.satchmo_tax._get_taxprocessor', ['request=None'], ''),
               ('tax.templatetags.satchmo_tax.cartitem_line_taxed_total',
                ['parser', 'token'],
                'Returns the line total for the cartitem, with tax added.  If currency evaluates true,\n    then return the total formatted through moneyfmt.\n    \n    Example::\n    \n        {% cartitem_line_taxed_total cartitem [currency] %}\n    '),
               ('tax.templatetags.satchmo_tax.cart_taxed_total',
                ['parser', 'token'],
                'Returns the line total for the cartitem, with tax added.  If currency evaluates true,\n    then return the total formatted through moneyfmt.\n    \n    Example:: \n    \n        {% cart_taxed_total cartitem [currency] %}\n    '),
               ('tax.templatetags.satchmo_tax.tax_rate',
                ['parser', 'token'],
                'Returns the tax rate for an order, by tax category.\n    \n    Example:: \n    \n        {% tax_rate taxclass [order] [digits] %}\n    '),
               ('tax.templatetags.satchmo_tax.taxed_price',
                ['parser', 'token'],
                'Returns the taxed price for an amount.  If currency evaluates true,\n    then return the total formatted through moneyfmt.\n    \n    Example:: \n        \n        {% taxed_price amount [currency] [taxclass] %}\n    ')],
 'HIERARCHY': ['keyedcache',
               'keyedcache.models',
               'keyedcache.tests',
               'keyedcache.threaded',
               'keyedcache.urls',
               'keyedcache.views',
               'l10n',
               'l10n.admin',
               'l10n.config',
               'l10n.mixins',
               'l10n.models',
               'l10n.tests',
               'l10n.urls',
               'l10n.utils',
               'make-messages',
               'posplit',
               'l10n.validators',
               'l10n.validators.aupostcode',
               'l10n.validators.capostcode',
               'l10n.validators.ukpostcode',
               'l10n.validators.uspostcode',
               'livesettings',
               'livesettings.forms',
               'livesettings.functions',
               'livesettings.models',
               'livesettings.overrides',
               'livesettings.signals',
               'livesettings.tests',
               'livesettings.urls',
               'livesettings.values',
               'livesettings.views',
               'livesettings.templatetags',
               'livesettings.templatetags.config_tags',
               'payment',
               'payment.admin',
               'payment.config',
               'payment.decorators',
               'payment.fields',
               'payment.forms',
               'payment.listeners',
               'payment.models',
               'payment.signals',
               'payment.tests',
               'payment.urls',
               'payment.utils',
               'payment.modules',
               'payment.modules.base',
               'payment.modules.authorizenet',
               'payment.modules.authorizenet.config',
               'payment.modules.authorizenet.processor',
               'payment.modules.authorizenet.urls',
               'payment.modules.authorizenet.views',
               'payment.modules.autosuccess',
               'payment.modules.autosuccess.config',
               'payment.modules.autosuccess.processor',
               'payment.modules.autosuccess.urls',
               'payment.modules.autosuccess.views',
               'payment.modules.cod',
               'payment.modules.cod.config',
               'payment.modules.cod.processor',
               'payment.modules.cod.urls',
               'payment.modules.cod.views',
               'payment.modules.cybersource',
               'payment.modules.cybersource.config',
               'payment.modules.cybersource.processor',
               'payment.modules.cybersource.urls',
               'payment.modules.cybersource.views',
               'payment.modules.dummy',
               'payment.modules.dummy.config',
               'payment.modules.dummy.processor',
               'payment.modules.dummy.urls',
               'payment.modules.dummy.views',
               'payment.modules.giftcertificate',
               'payment.modules.giftcertificate.admin',
               'payment.modules.giftcertificate.config',
               'payment.modules.giftcertificate.forms',
               'payment.modules.giftcertificate.models',
               'payment.modules.giftcertificate.processor',
               'payment.modules.giftcertificate.tests',
               'payment.modules.giftcertificate.urls',
               'payment.modules.giftcertificate.utils',
               'payment.modules.giftcertificate.views',
               'payment.modules.giftcertificate.templatetags',
               'payment.modules.giftcertificate.templatetags.satchmo_giftcertificate',
               'payment.modules.google',
               'payment.modules.google.auth',
               'payment.modules.google.config',
               'payment.modules.google.notifications',
               'payment.modules.google.processor',
               'payment.modules.google.urls',
               'payment.modules.google.views',
               'payment.modules.paypal',
               'payment.modules.paypal.config',
               'payment.modules.paypal.processor',
               'payment.modules.paypal.urls',
               'payment.modules.paypal.views',
               'payment.modules.protx',
               'payment.modules.protx.config',
               'payment.modules.protx.forms',
               'payment.modules.protx.processor',
               'payment.modules.protx.urls',
               'payment.modules.protx.views',
               'payment.modules.purchaseorder',
               'payment.modules.purchaseorder.admin',
               'payment.modules.purchaseorder.config',
               'payment.modules.purchaseorder.forms',
               'payment.modules.purchaseorder.models',
               'payment.modules.purchaseorder.processor',
               'payment.modules.purchaseorder.urls',
               'payment.modules.purchaseorder.views',
               'payment.modules.sermepa',
               'payment.modules.sermepa.config',
               'payment.modules.sermepa.processor',
               'payment.modules.sermepa.urls',
               'payment.modules.sermepa.views',
               'payment.modules.trustcommerce',
               'payment.modules.trustcommerce.config',
               'payment.modules.trustcommerce.processor',
               'payment.modules.trustcommerce.urls',
               'payment.modules.trustcommerce.views',
               'payment.templatetags',
               'payment.templatetags.satchmo_checkout',
               'payment.templatetags.satchmo_googlecheckout',
               'payment.views',
               'payment.views.balance',
               'payment.views.checkout',
               'payment.views.confirm',
               'payment.views.contact',
               'payment.views.cron',
               'payment.views.payship',
               'product',
               'product.admin',
               'product.config',
               'product.fields',
               'product.forms',
               'product.listeners',
               'product.models',
               'product.queries',
               'product.signals',
               'product.tests',
               'product.utils',
               'product.jobs',
               'product.jobs.sample',
               'product.jobs.daily',
               'product.jobs.daily.rebuild_prices',
               'product.jobs.hourly',
               'product.jobs.monthly',
               'product.jobs.weekly',
               'product.management',
               'product.management.commands',
               'product.management.commands.satchmo_rebuild_pricing',
               'product.templatetags',
               'product.templatetags.satchmo_discounts',
               'product.templatetags.satchmo_product',
               'product.templatetags.satchmo_product_admin',
               'product.urls',
               'product.urls.base',
               'product.urls.category',
               'product.urls.products',
               'product.views',
               'product.views.adminviews',
               'product.views.filters',
               'satchmo_ext',
               'satchmo_ext.brand',
               'satchmo_ext.brand.admin',
               'satchmo_ext.brand.config',
               'satchmo_ext.brand.models',
               'satchmo_ext.brand.urls',
               'satchmo_ext.brand.views',
               'satchmo_ext.brand.templatetags',
               'satchmo_ext.brand.templatetags.satchmo_brands',
               'satchmo_ext.contrib',
               'satchmo_ext.contrib.cartqty_discounts',
               'satchmo_ext.metrics',
               'satchmo_ext.metrics.logger',
               'satchmo_ext.newsletter',
               'satchmo_ext.newsletter.admin',
               'satchmo_ext.newsletter.config',
               'satchmo_ext.newsletter.forms',
               'satchmo_ext.newsletter.ignore',
               'satchmo_ext.newsletter.listeners',
               'satchmo_ext.newsletter.mailman',
               'satchmo_ext.newsletter.models',
               'satchmo_ext.newsletter.signals',
               'satchmo_ext.newsletter.simple',
               'satchmo_ext.newsletter.tests',
               'satchmo_ext.newsletter.urls',
               'satchmo_ext.newsletter.views',
               'satchmo_ext.product_feeds',
               'satchmo_ext.product_feeds.models',
               'satchmo_ext.product_feeds.tests',
               'satchmo_ext.product_feeds.urls',
               'satchmo_ext.product_feeds.views',
               'satchmo_ext.product_feeds.templatetags',
               'satchmo_ext.product_feeds.templatetags.satchmo_feed',
               'satchmo_ext.productratings',
               'satchmo_ext.productratings.config',
               'satchmo_ext.productratings.listeners',
               'satchmo_ext.productratings.models',
               'satchmo_ext.productratings.queries',
               'satchmo_ext.productratings.urls',
               'satchmo_ext.productratings.utils',
               'satchmo_ext.productratings.views',
               'satchmo_ext.productratings.templatetags',
               'satchmo_ext.productratings.templatetags.satchmo_ratings',
               'satchmo_ext.recentlist',
               'satchmo_ext.recentlist.config',
               'satchmo_ext.recentlist.context_processors',
               'satchmo_ext.recentlist.middleware',
               'satchmo_ext.recentlist.models',
               'satchmo_ext.recentlist.templatetags',
               'satchmo_ext.recentlist.templatetags.satchmo_recentlist',
               'satchmo_ext.satchmo_toolbar',
               'satchmo_ext.satchmo_toolbar.config',
               'satchmo_ext.satchmo_toolbar.listeners',
               'satchmo_ext.satchmo_toolbar.models',
               'satchmo_ext.tieredpricing',
               'satchmo_ext.tieredpricing.admin',
               'satchmo_ext.tieredpricing.listeners',
               'satchmo_ext.tieredpricing.models',
               'satchmo_ext.tieredpricing.tests',
               'satchmo_ext.upsell',
               'satchmo_ext.upsell.admin',
               'satchmo_ext.upsell.models',
               'satchmo_ext.upsell.views',
               'satchmo_ext.upsell.templatetags',
               'satchmo_ext.upsell.templatetags.satchmo_upsell',
               'satchmo_ext.wishlist',
               'satchmo_ext.wishlist.admin',
               'satchmo_ext.wishlist.config',
               'satchmo_ext.wishlist.listeners',
               'satchmo_ext.wishlist.models',
               'satchmo_ext.wishlist.tests',
               'satchmo_ext.wishlist.urls',
               'satchmo_ext.wishlist.views',
               'satchmo_store',
               'satchmo_store.accounts',
               'satchmo_store.accounts.email-auth',
               'satchmo_store.accounts.forms',
               'satchmo_store.accounts.mail',
               'satchmo_store.accounts.signals',
               'satchmo_store.accounts.urls',
               'satchmo_store.accounts.views',
               'satchmo_store.contact',
               'satchmo_store.contact.admin',
               'satchmo_store.contact.config',
               'satchmo_store.contact.forms',
               'satchmo_store.contact.listeners',
               'satchmo_store.contact.models',
               'satchmo_store.contact.signals',
               'satchmo_store.contact.tests',
               'satchmo_store.contact.urls',
               'satchmo_store.contact.views',
               'satchmo_store.contact.supplier',
               'satchmo_store.contact.supplier.admin',
               'satchmo_store.contact.supplier.models',
               'satchmo_store.contact.templatetags',
               'satchmo_store.contact.templatetags.satchmo_contact',
               'satchmo_store.shop',
               'satchmo_store.shop.admin',
               'satchmo_store.shop.config',
               'satchmo_store.shop.context_processors',
               'satchmo_store.shop.exceptions',
               'satchmo_store.shop.forms',
               'satchmo_store.shop.listeners',
               'satchmo_store.shop.models',
               'satchmo_store.shop.notification',
               'satchmo_store.shop.satchmo_settings',
               'satchmo_store.shop.signals',
               'satchmo_store.shop.SSLMiddleware',
               'satchmo_store.shop.tests',
               'satchmo_store.shop.urls',
               'satchmo_store.shop.utils',
               'satchmo_store.shop.management',
               'satchmo_store.shop.management.commands',
               'satchmo_store.shop.management.commands.delete_all_dbs',
               'satchmo_store.shop.management.commands.satchmo_check',
               'satchmo_store.shop.management.commands.satchmo_copy_static',
               'satchmo_store.shop.management.commands.satchmo_copy_templates',
               'satchmo_store.shop.management.commands.satchmo_copy_urls',
               'satchmo_store.shop.management.commands.satchmo_load_l10n',
               'satchmo_store.shop.management.commands.satchmo_load_store',
               'satchmo_store.shop.management.commands.satchmo_load_us_tax',
               'satchmo_store.shop.templatetags',
               'satchmo_store.shop.templatetags.messaging_tags',
               'satchmo_store.shop.templatetags.satchmo_adminapplist',
               'satchmo_store.shop.templatetags.satchmo_adminorder_tags',
               'satchmo_store.shop.templatetags.satchmo_cart',
               'satchmo_store.shop.templatetags.satchmo_category',
               'satchmo_store.shop.templatetags.satchmo_currency',
               'satchmo_store.shop.templatetags.satchmo_google',
               'satchmo_store.shop.templatetags.satchmo_order',
               'satchmo_store.shop.templatetags.satchmo_price',
               'satchmo_store.shop.templatetags.satchmo_util',
               'satchmo_store.shop.views',
               'satchmo_store.shop.views.cart',
               'satchmo_store.shop.views.comments',
               'satchmo_store.shop.views.common',
               'satchmo_store.shop.views.contact',
               'satchmo_store.shop.views.download',
               'satchmo_store.shop.views.home',
               'satchmo_store.shop.views.orders',
               'satchmo_store.shop.views.search',
               'satchmo_store.shop.views.sitemaps',
               'satchmo_store.shop.views.smart',
               'satchmo_store.urls',
               'satchmo_store.urls.base',
               'satchmo_store.urls.default',
               'satchmo_utils',
               'satchmo_utils.admin',
               'satchmo_utils.cookies',
               'satchmo_utils.dynamic',
               'satchmo_utils.fields',
               'satchmo_utils.json',
               'satchmo_utils.models',
               'satchmo_utils.numbers',
               'satchmo_utils.sslurllib',
               'satchmo_utils.tests',
               'satchmo_utils.unique_id',
               'satchmo_utils.urlhelper',
               'satchmo_utils.validators',
               'satchmo_utils.views',
               'satchmo_utils.widgets',
               'satchmo_utils.templatetags',
               'satchmo_utils.templatetags.normalize_decimal',
               'satchmo_utils.thumbnail',
               'satchmo_utils.thumbnail.config',
               'satchmo_utils.thumbnail.field',
               'satchmo_utils.thumbnail.text',
               'satchmo_utils.thumbnail.utils',
               'satchmo_utils.thumbnail.widgets',
               'satchmo_utils.thumbnail.templatetags',
               'satchmo_utils.thumbnail.templatetags.satchmo_thumbnail',
               'shipping',
               'shipping.config',
               'shipping.fields',
               'shipping.models',
               'shipping.signals',
               'shipping.tests',
               'shipping.urls',
               'shipping.utils',
               'shipping.views',
               'shipping.modules',
               'shipping.modules.base',
               'shipping.modules.canadapost',
               'shipping.modules.canadapost.config',
               'shipping.modules.canadapost.shipper',
               'shipping.modules.dummy',
               'shipping.modules.dummy.config',
               'shipping.modules.dummy.shipper',
               'shipping.modules.fedex',
               'shipping.modules.fedex.config',
               'shipping.modules.fedex.shipper',
               'shipping.modules.flat',
               'shipping.modules.flat.config',
               'shipping.modules.flat.shipper',
               'shipping.modules.no',
               'shipping.modules.no.shipper',
               'shipping.modules.per',
               'shipping.modules.per.config',
               'shipping.modules.per.shipper',
               'shipping.modules.productshipping',
               'shipping.modules.productshipping.admin',
               'shipping.modules.productshipping.config',
               'shipping.modules.productshipping.models',
               'shipping.modules.productshipping.tests',
               'shipping.modules.productshipping.templatetags',
               'shipping.modules.productshipping.templatetags.product_shipping_tags',
               'shipping.modules.tiered',
               'shipping.modules.tiered.admin',
               'shipping.modules.tiered.config',
               'shipping.modules.tiered.models',
               'shipping.modules.tiered.tests',
               'shipping.modules.tiered.templatetags',
               'shipping.modules.tiered.templatetags.tiered_tags',
               'shipping.modules.tieredquantity',
               'shipping.modules.tieredquantity.admin',
               'shipping.modules.tieredquantity.config',
               'shipping.modules.tieredquantity.models',
               'shipping.modules.tieredquantity.tests',
               'shipping.modules.tieredweight',
               'shipping.modules.tieredweight.admin',
               'shipping.modules.tieredweight.config',
               'shipping.modules.tieredweight.forms',
               'shipping.modules.tieredweight.models',
               'shipping.modules.tieredweight.tests',
               'shipping.modules.ups',
               'shipping.modules.ups.config',
               'shipping.modules.ups.shipper',
               'shipping.modules.usps',
               'shipping.modules.usps.config',
               'shipping.modules.usps.shipper',
               'tax',
               'tax.config',
               'tax.models',
               'tax.tests',
               'tax.utils',
               'tax.modules',
               'tax.modules.area',
               'tax.modules.area.admin',
               'tax.modules.area.config',
               'tax.modules.area.models',
               'tax.modules.area.processor',
               'tax.modules.no',
               'tax.modules.no.processor',
               'tax.modules.percent',
               'tax.modules.percent.config',
               'tax.modules.percent.models',
               'tax.modules.percent.processor',
               'tax.modules.us_sst',
               'tax.modules.us_sst.admin',
               'tax.modules.us_sst.config',
               'tax.modules.us_sst.models',
               'tax.modules.us_sst.tax',
               'tax.modules.us_sst.management',
               'tax.modules.us_sst.management.commands',
               'tax.modules.us_sst.management.commands.sst_import_boundry',
               'tax.modules.us_sst.management.commands.sst_import_rate',
               'tax.templatetags',
               'tax.templatetags.satchmo_tax'],
 'POINTERS': {'keyedcache.cache': 'django.core.cache.cache',
              'keyedcache.is_list_or_tuple': 'satchmo_utils.is_list_or_tuple',
              'keyedcache.is_string_like': 'satchmo_utils.is_string_like',
              'keyedcache.logging': 'logging',
              'keyedcache.md5_constructor': 'django.utils.hashcompat.md5_constructor',
              'keyedcache.models.keyedcache': 'keyedcache',
              'keyedcache.models.logging': 'logging',
              'keyedcache.pickle': 'cPickle',
              'keyedcache.settings': 'django.conf.settings',
              'keyedcache.smart_str': 'django.utils.encoding.smart_str',
              'keyedcache.tests.Http404': 'django.http.Http404',
              'keyedcache.tests.TestCase': 'django.test.TestCase',
              'keyedcache.tests.keyedcache': 'keyedcache',
              'keyedcache.tests.random': 'random',
              'keyedcache.tests.re': 're',
              'keyedcache.tests.time': 'time',
              'keyedcache.threaded.cache_clear_request': 'keyedcache.cache_clear_request',
              'keyedcache.threaded.cache_set_request_uid': 'keyedcache.cache_set_request_uid',
              'keyedcache.threaded.cache_use_request_caching': 'keyedcache.cache_use_request_caching',
              'keyedcache.threaded.logging': 'logging',
              'keyedcache.threaded.random': 'random',
              'keyedcache.threaded.request_finished': 'django.core.signals.request_finished',
              'keyedcache.threaded.request_started': 'django.core.signals.request_started',
              'keyedcache.threaded.threadlocals': 'threaded_multihost.threadlocals',
              'keyedcache.threadlocals': 'threaded_multihost.threadlocals',
              'keyedcache.types': 'types',
              'keyedcache.urls.*': 'django.conf.urls.defaults.*',
              'keyedcache.views.*': 'keyedcache.models.*',
              'keyedcache.views.HttpResponse': 'django.http.HttpResponse',
              'keyedcache.views.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'keyedcache.views.RequestContext': 'django.template.RequestContext',
              'keyedcache.views._': 'django.utils.translation.ugettext_lazy',
              'keyedcache.views.forms': 'django.forms',
              'keyedcache.views.logging': 'logging',
              'keyedcache.views.permission_required': 'django.contrib.auth.decorators.permission_required',
              'keyedcache.views.render_to_response': 'django.shortcuts.render_to_response',
              'keyedcache.views.settings': 'django.conf.settings',
              'keyedcache.views.urlresolvers': 'django.core.urlresolvers',
              'keyedcache.views.user_passes_test': 'django.contrib.auth.decorators.user_passes_test',
              'l10n.admin.AdminArea': 'l10n.models.AdminArea',
              'l10n.admin.Country': 'l10n.models.Country',
              'l10n.admin._': 'django.utils.translation.ugettext_lazy',
              'l10n.admin.admin': 'django.contrib.admin',
              'l10n.admin.get_language': 'django.utils.translation.get_language',
              'l10n.config.*': 'livesettings.*',
              'l10n.config._': 'django.utils.translation.ugettext_lazy',
              'l10n.mixins.Site': 'django.contrib.sites.models.Site',
              'l10n.mixins.get_language': 'django.utils.translation.get_language',
              'l10n.mixins.keyedcache': 'keyedcache',
              'l10n.mixins.logging': 'logging',
              'l10n.mixins.settings': 'django.conf.settings',
              'l10n.models._': 'django.utils.translation.ugettext_lazy',
              'l10n.models.config': 'l10n.config',
              'l10n.models.models': 'django.db.models',
              'l10n.tests.TestCase': 'django.test.TestCase',
              'l10n.tests.aupostcode': 'l10n.validators.aupostcode',
              'l10n.tests.capostcode': 'l10n.validators.capostcode',
              'l10n.tests.uspostcode': 'l10n.validators.uspostcode',
              'l10n.urls.*': 'django.conf.urls.defaults.*',
              'l10n.utils.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'l10n.utils.config_value': 'livesettings.config_value',
              'l10n.utils.get_language': 'django.utils.translation.get_language',
              'l10n.utils.locale': 'l10n.locale',
              'l10n.utils.logging': 'logging',
              'l10n.utils.settings': 'django.conf.settings',
              'l10n.utils.to_locale': 'django.utils.translation.to_locale',
              'l10n.utils.trunc_decimal': 'satchmo_utils.numbers.trunc_decimal',
              'l10n.validators.aupostcode._': 'django.utils.translation.ugettext',
              'l10n.validators.aupostcode.re': 're',
              'l10n.validators.capostcode._': 'django.utils.translation.ugettext_lazy',
              'l10n.validators.capostcode.re': 're',
              'l10n.validators.ukpostcode.re': 're',
              'l10n.validators.uspostcode._': 'django.utils.translation.ugettext_lazy',
              'l10n.validators.uspostcode.re': 're',
              'livesettings.*': 'livesettings.values.*',
              'livesettings.forms.*': 'livesettings.*',
              'livesettings.forms.forms': 'django.forms',
              'livesettings.forms.logging': 'logging',
              'livesettings.functions.SettingNotSet': 'livesettings.models.SettingNotSet',
              'livesettings.functions.djangosettings': 'django.conf.settings',
              'livesettings.functions.flatten_list': 'satchmo_utils.flatten_list',
              'livesettings.functions.is_list_or_tuple': 'satchmo_utils.is_list_or_tuple',
              'livesettings.functions.is_string_like': 'satchmo_utils.is_string_like',
              'livesettings.functions.load_module': 'satchmo_utils.load_module',
              'livesettings.functions.logging': 'logging',
              'livesettings.functions.ugettext': 'django.utils.translation.ugettext',
              'livesettings.functions.values': 'livesettings.values',
              'livesettings.models.CachedObjectMixin': 'keyedcache.models.CachedObjectMixin',
              'livesettings.models.NotCachedError': 'keyedcache.NotCachedError',
              'livesettings.models.Site': 'django.contrib.sites.models.Site',
              'livesettings.models._': 'django.utils.translation.ugettext_lazy',
              'livesettings.models.cache_get': 'keyedcache.cache_get',
              'livesettings.models.cache_key': 'keyedcache.cache_key',
              'livesettings.models.cache_set': 'keyedcache.cache_set',
              'livesettings.models.get_overrides': 'livesettings.overrides.get_overrides',
              'livesettings.models.loading': 'django.db.models.loading',
              'livesettings.models.logging': 'logging',
              'livesettings.models.models': 'django.db.models',
              'livesettings.models.settings': 'django.conf.settings',
              'livesettings.models.transaction': 'django.db.transaction',
              'livesettings.overrides.Site': 'django.contrib.sites.models.Site',
              'livesettings.overrides.djangosettings': 'django.conf.settings',
              'livesettings.overrides.transaction': 'django.db.transaction',
              'livesettings.signals.django.dispatch': 'django.dispatch',
              'livesettings.templatetags.config_tags.SettingNotSet': 'livesettings.SettingNotSet',
              'livesettings.templatetags.config_tags.Site': 'django.contrib.sites.models.Site',
              'livesettings.templatetags.config_tags.config_value': 'livesettings.config_value',
              'livesettings.templatetags.config_tags.logging': 'logging',
              'livesettings.templatetags.config_tags.template': 'django.template',
              'livesettings.templatetags.config_tags.url_join': 'satchmo_utils.url_join',
              'livesettings.templatetags.config_tags.urlresolvers': 'django.core.urlresolvers',
              'livesettings.tests.*': 'livesettings.*',
              'livesettings.tests.Http404': 'django.http.Http404',
              'livesettings.tests.Site': 'django.contrib.sites.models.Site',
              'livesettings.tests.TestCase': 'django.test.TestCase',
              'livesettings.tests.djangosettings': 'django.conf.settings',
              'livesettings.tests.keyedcache': 'keyedcache',
              'livesettings.tests.logging': 'logging',
              'livesettings.tests.re': 're',
              'livesettings.tests.time': 'time',
              'livesettings.urls.*': 'django.conf.urls.defaults.*',
              'livesettings.values.Decimal': 'decimal.Decimal',
              'livesettings.values.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'livesettings.values.LongSetting': 'livesettings.models.LongSetting',
              'livesettings.values.Setting': 'livesettings.models.Setting',
              'livesettings.values.SettingNotSet': 'livesettings.models.SettingNotSet',
              'livesettings.values.Site': 'django.contrib.sites.models.Site',
              'livesettings.values.SortedDict': 'django.utils.datastructures.SortedDict',
              'livesettings.values._': 'django.utils.translation.ugettext_lazy',
              'livesettings.values.cache_set': 'keyedcache.cache_set',
              'livesettings.values.datetime': 'datetime',
              'livesettings.values.find_setting': 'livesettings.models.find_setting',
              'livesettings.values.forms': 'django.forms',
              'livesettings.values.get_overrides': 'livesettings.overrides.get_overrides',
              'livesettings.values.gettext': 'django.utils.translation.gettext',
              'livesettings.values.is_list_or_tuple': 'satchmo_utils.is_list_or_tuple',
              'livesettings.values.is_string_like': 'satchmo_utils.is_string_like',
              'livesettings.values.load_module': 'satchmo_utils.load_module',
              'livesettings.values.logging': 'logging',
              'livesettings.values.signals': 'livesettings.signals',
              'livesettings.values.simplejson': 'django.utils.simplejson',
              'livesettings.values.smart_str': 'django.utils.encoding.smart_str',
              'livesettings.values.traceback': 'traceback',
              'livesettings.views.ConfigurationSettings': 'livesettings.ConfigurationSettings',
              'livesettings.views.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'livesettings.views.LongSetting': 'livesettings.models.LongSetting',
              'livesettings.views.RequestContext': 'django.template.RequestContext',
              'livesettings.views.Setting': 'livesettings.models.Setting',
              'livesettings.views.forms': 'livesettings.forms',
              'livesettings.views.get_overrides': 'livesettings.overrides.get_overrides',
              'livesettings.views.logging': 'logging',
              'livesettings.views.never_cache': 'django.views.decorators.cache.never_cache',
              'livesettings.views.pprint': 'pprint',
              'livesettings.views.render_to_response': 'django.shortcuts.render_to_response',
              'livesettings.views.staff_member_required': 'django.contrib.admin.views.decorators.staff_member_required',
              'make-messages.dropwhile': 'itertools.dropwhile',
              'make-messages.getopt': 'getopt',
              'make-messages.os': 'os',
              'make-messages.re': 're',
              'make-messages.settings': 'django.conf.settings',
              'make-messages.sys': 'sys',
              'make-messages.templatize': 'django.utils.translation.templatize',
              'payment.admin.CreditCardDetail': 'payment.models.CreditCardDetail',
              'payment.admin.PaymentOption': 'payment.models.PaymentOption',
              'payment.admin.admin': 'django.contrib.admin',
              'payment.config.*': 'livesettings.*',
              'payment.config.get_satchmo_setting': 'satchmo_store.shop.get_satchmo_setting',
              'payment.config.is_string_like': 'satchmo_utils.is_string_like',
              'payment.config.load_module': 'satchmo_utils.load_module',
              'payment.config.logging': 'logging',
              'payment.config.signals': 'payment.signals',
              'payment.config.ugettext': 'django.utils.translation.ugettext',
              'payment.config.ugettext_lazy': 'django.utils.translation.ugettext_lazy',
              'payment.decorators.Cart': 'satchmo_store.shop.models.Cart',
              'payment.decorators.RequestContext': 'django.template.RequestContext',
              'payment.decorators.config_value': 'livesettings.config_value',
              'payment.decorators.is_string_like': 'satchmo_utils.is_string_like',
              'payment.decorators.render_to_response': 'django.shortcuts.render_to_response',
              'payment.fields.credit_choices': 'payment.config.credit_choices',
              'payment.fields.labelled_payment_choices': 'payment.config.labelled_payment_choices',
              'payment.fields.models': 'django.db.models',
              'payment.forms.Cart': 'satchmo_store.shop.models.Cart',
              'payment.forms.Contact': 'satchmo_store.contact.models.Contact',
              'payment.forms.ContactInfoForm': 'satchmo_store.contact.forms.ContactInfoForm',
              'payment.forms.CreditCard': 'satchmo_utils.views.CreditCard',
              'payment.forms.CreditCardDetail': 'payment.models.CreditCardDetail',
              'payment.forms.Decimal': 'decimal.Decimal',
              'payment.forms.Discount': 'product.models.Discount',
              'payment.forms.Order': 'satchmo_store.shop.models.Order',
              'payment.forms.Price': 'product.models.Price',
              'payment.forms.PriceAdjustment': 'product.models.PriceAdjustment',
              'payment.forms.PriceAdjustmentCalc': 'product.models.PriceAdjustmentCalc',
              'payment.forms.ProxyContactForm': 'satchmo_store.contact.forms.ProxyContactForm',
              'payment.forms.RequestContext': 'django.template.RequestContext',
              'payment.forms.TaxClass': 'product.models.TaxClass',
              'payment.forms._': 'django.utils.translation.ugettext_lazy',
              'payment.forms._get_taxprocessor': 'tax.templatetags.satchmo_tax._get_taxprocessor',
              'payment.forms.calendar': 'calendar',
              'payment.forms.config_choice_values': 'livesettings.config_choice_values',
              'payment.forms.config_get_group': 'livesettings.config_get_group',
              'payment.forms.config_value': 'livesettings.config_value',
              'payment.forms.config_value_safe': 'livesettings.config_value_safe',
              'payment.forms.datetime': 'datetime',
              'payment.forms.find_best_auto_discount': 'product.utils.find_best_auto_discount',
              'payment.forms.form_init': 'signals_ahoy.signals.form_init',
              'payment.forms.form_postsave': 'signals_ahoy.signals.form_postsave',
              'payment.forms.form_presave': 'signals_ahoy.signals.form_presave',
              'payment.forms.form_validate': 'signals_ahoy.signals.form_validate',
              'payment.forms.forms': 'django.forms',
              'payment.forms.get_or_create_order': 'payment.utils.get_or_create_order',
              'payment.forms.labelled_payment_choices': 'payment.config.labelled_payment_choices',
              'payment.forms.loader': 'django.template.loader',
              'payment.forms.logging': 'logging',
              'payment.forms.lookup_template': 'satchmo_utils.dynamic.lookup_template',
              'payment.forms.moneyfmt': 'l10n.utils.moneyfmt',
              'payment.forms.pay_ship_save': 'payment.utils.pay_ship_save',
              'payment.forms.satchmo_shipping_price_query': 'satchmo_store.shop.signals.satchmo_shipping_price_query',
              'payment.forms.settings': 'django.conf.settings',
              'payment.forms.shipping_choices_query': 'shipping.signals.shipping_choices_query',
              'payment.forms.shipping_method_by_key': 'shipping.config.shipping_method_by_key',
              'payment.forms.shipping_methods': 'shipping.config.shipping_methods',
              'payment.forms.signals': 'payment.signals',
              'payment.forms.sys': 'sys',
              'payment.forms.threadlocals': 'threaded_multihost.threadlocals',
              'payment.forms.update_shipping': 'shipping.utils.update_shipping',
              'payment.listeners._': 'django.utils.translation.ugettext_lazy',
              'payment.listeners.capture_authorizations': 'payment.utils.capture_authorizations',
              'payment.listeners.config_value': 'livesettings.config_value',
              'payment.listeners.forms': 'django.forms',
              'payment.listeners.logging': 'logging',
              'payment.listeners.ugettext': 'django.utils.translation.ugettext',
              'payment.listeners.urlresolvers': 'django.core.urlresolvers',
              'payment.models.Blowfish': 'Crypto.Cipher.Blowfish',
              'payment.models.Contact': 'satchmo_store.contact.models.Contact',
              'payment.models.CreditChoiceCharField': 'payment.fields.CreditChoiceCharField',
              'payment.models.Decimal': 'decimal.Decimal',
              'payment.models.OrderPayment': 'satchmo_store.shop.models.OrderPayment',
              'payment.models.PaymentChoiceCharField': 'payment.fields.PaymentChoiceCharField',
              'payment.models.SettingNotSet': 'livesettings.SettingNotSet',
              'payment.models._': 'django.utils.translation.ugettext_lazy',
              'payment.models.base64': 'base64',
              'payment.models.config': 'payment.config',
              'payment.models.config_choice_values': 'livesettings.config_choice_values',
              'payment.models.config_value': 'livesettings.config_value',
              'payment.models.datetime': 'datetime.datetime',
              'payment.models.keyedcache': 'keyedcache',
              'payment.models.logging': 'logging',
              'payment.models.models': 'django.db.models',
              'payment.models.satchmo_utils.sslurllib': 'satchmo_utils.sslurllib',
              'payment.models.settings': 'django.conf.settings',
              'payment.modules.authorizenet.config.*': 'livesettings.*',
              'payment.modules.authorizenet.config._': 'django.utils.translation.ugettext_lazy',
              'payment.modules.authorizenet.processor.BasePaymentProcessor': 'payment.modules.base.BasePaymentProcessor',
              'payment.modules.authorizenet.processor.Config': 'satchmo_store.shop.models.Config',
              'payment.modules.authorizenet.processor.Context': 'django.template.Context',
              'payment.modules.authorizenet.processor.Decimal': 'decimal.Decimal',
              'payment.modules.authorizenet.processor.NOTSET': 'payment.modules.base.NOTSET',
              'payment.modules.authorizenet.processor.ProcessorResult': 'payment.modules.base.ProcessorResult',
              'payment.modules.authorizenet.processor._': 'django.utils.translation.ugettext_lazy',
              'payment.modules.authorizenet.processor.config_get_group': 'livesettings.config_get_group',
              'payment.modules.authorizenet.processor.datetime': 'datetime.datetime',
              'payment.modules.authorizenet.processor.get_tax_processor': 'tax.utils.get_tax_processor',
              'payment.modules.authorizenet.processor.loader': 'django.template.loader',
              'payment.modules.authorizenet.processor.minidom': 'xml.dom.minidom',
              'payment.modules.authorizenet.processor.os': 'os',
              'payment.modules.authorizenet.processor.random': 'random',
              'payment.modules.authorizenet.processor.trunc_decimal': 'satchmo_utils.numbers.trunc_decimal',
              'payment.modules.authorizenet.processor.urlencode': 'django.utils.http.urlencode',
              'payment.modules.authorizenet.processor.urllib2': 'urllib2',
              'payment.modules.authorizenet.urls.*': 'django.conf.urls.defaults.*',
              'payment.modules.authorizenet.urls.config_get_group': 'livesettings.config_get_group',
              'payment.modules.authorizenet.urls.config_value': 'livesettings.config_value',
              'payment.modules.authorizenet.views.config_get_group': 'livesettings.config_get_group',
              'payment.modules.authorizenet.views.confirm': 'payment.views.confirm',
              'payment.modules.authorizenet.views.never_cache': 'django.views.decorators.cache.never_cache',
              'payment.modules.authorizenet.views.payship': 'payment.views.payship',
              'payment.modules.autosuccess.config.*': 'livesettings.*',
              'payment.modules.autosuccess.config._': 'django.utils.translation.ugettext_lazy',
              'payment.modules.autosuccess.processor.BasePaymentProcessor': 'payment.modules.base.BasePaymentProcessor',
              'payment.modules.autosuccess.processor.NOTSET': 'payment.modules.base.NOTSET',
              'payment.modules.autosuccess.processor.ProcessorResult': 'payment.modules.base.ProcessorResult',
              'payment.modules.autosuccess.processor._': 'django.utils.translation.ugettext_lazy',
              'payment.modules.autosuccess.urls.*': 'django.conf.urls.defaults.*',
              'payment.modules.autosuccess.views.Cart': 'satchmo_store.shop.models.Cart',
              'payment.modules.autosuccess.views.Contact': 'satchmo_store.shop.models.Contact',
              'payment.modules.autosuccess.views.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'payment.modules.autosuccess.views.Order': 'satchmo_store.shop.models.Order',
              'payment.modules.autosuccess.views.OrderPayment': 'satchmo_store.shop.models.OrderPayment',
              'payment.modules.autosuccess.views.RequestContext': 'django.template.RequestContext',
              'payment.modules.autosuccess.views.config_get_group': 'livesettings.config_get_group',
              'payment.modules.autosuccess.views.get_processor_by_key': 'payment.utils.get_processor_by_key',
              'payment.modules.autosuccess.views.logging': 'logging',
              'payment.modules.autosuccess.views.lookup_template': 'satchmo_utils.dynamic.lookup_template',
              'payment.modules.autosuccess.views.lookup_url': 'satchmo_utils.dynamic.lookup_url',
              'payment.modules.autosuccess.views.never_cache': 'django.views.decorators.cache.never_cache',
              'payment.modules.autosuccess.views.pay_ship_save': 'payment.utils.pay_ship_save',
              'payment.modules.autosuccess.views.render_to_response': 'django.shortcuts.render_to_response',
              'payment.modules.autosuccess.views.ugettext': 'django.utils.translation.ugettext',
              'payment.modules.base.Decimal': 'decimal.Decimal',
              'payment.modules.base.Order': 'satchmo_store.shop.models.Order',
              'payment.modules.base.OrderAuthorization': 'satchmo_store.shop.models.OrderAuthorization',
              'payment.modules.base.OrderPayment': 'satchmo_store.shop.models.OrderPayment',
              'payment.modules.base.OrderPaymentFailure': 'satchmo_store.shop.models.OrderPaymentFailure',
              'payment.modules.base.OrderPendingPayment': 'satchmo_store.shop.models.OrderPendingPayment',
              'payment.modules.base.OrderStatus': 'satchmo_store.shop.models.OrderStatus',
              'payment.modules.base._': 'django.utils.translation.ugettext_lazy',
              'payment.modules.base.config_get_group': 'livesettings.config_get_group',
              'payment.modules.base.datetime': 'datetime.datetime',
              'payment.modules.base.logging': 'logging',
              'payment.modules.cod.config.*': 'livesettings.*',
              'payment.modules.cod.config._': 'django.utils.translation.ugettext_lazy',
              'payment.modules.cod.processor.BasePaymentProcessor': 'payment.modules.base.BasePaymentProcessor',
              'payment.modules.cod.processor.NOTSET': 'payment.modules.base.NOTSET',
              'payment.modules.cod.processor.ProcessorResult': 'payment.modules.base.ProcessorResult',
              'payment.modules.cod.processor._': 'django.utils.translation.ugettext',
              'payment.modules.cod.urls.*': 'django.conf.urls.defaults.*',
              'payment.modules.cod.urls.config_get_group': 'livesettings.config_get_group',
              'payment.modules.cod.urls.config_value': 'livesettings.config_value',
              'payment.modules.cod.views.config_get_group': 'livesettings.config_get_group',
              'payment.modules.cod.views.confirm': 'payment.views.confirm',
              'payment.modules.cod.views.never_cache': 'django.views.decorators.cache.never_cache',
              'payment.modules.cod.views.payship': 'payment.views.payship',
              'payment.modules.cybersource.config.*': 'livesettings.*',
              'payment.modules.cybersource.config._': 'django.utils.translation.ugettext_lazy',
              'payment.modules.cybersource.processor.BasePaymentProcessor': 'payment.modules.base.BasePaymentProcessor',
              'payment.modules.cybersource.processor.Context': 'django.template.Context',
              'payment.modules.cybersource.processor.NOTSET': 'payment.modules.base.NOTSET',
              'payment.modules.cybersource.processor.ProcessorResult': 'payment.modules.base.ProcessorResult',
              'payment.modules.cybersource.processor._': 'django.utils.translation.ugettext_lazy',
              'payment.modules.cybersource.processor.config_get_group': 'livesettings.config_get_group',
              'payment.modules.cybersource.processor.fromstring': 'elementtree.ElementTree.fromstring',
              'payment.modules.cybersource.processor.loader': 'django.template.loader',
              'payment.modules.cybersource.processor.os': 'os',
              'payment.modules.cybersource.processor.trunc_decimal': 'satchmo_utils.numbers.trunc_decimal',
              'payment.modules.cybersource.processor.urllib2': 'urllib2',
              'payment.modules.cybersource.urls.*': 'django.conf.urls.defaults.*',
              'payment.modules.cybersource.urls.config_get_group': 'livesettings.config_get_group',
              'payment.modules.cybersource.urls.config_value': 'livesettings.config_value',
              'payment.modules.cybersource.views.config_get_group': 'livesettings.config_get_group',
              'payment.modules.cybersource.views.confirm': 'payment.views.confirm',
              'payment.modules.cybersource.views.never_cache': 'django.views.decorators.cache.never_cache',
              'payment.modules.cybersource.views.payship': 'payment.views.payship',
              'payment.modules.dummy.config.*': 'livesettings.*',
              'payment.modules.dummy.config._': 'django.utils.translation.ugettext_lazy',
              'payment.modules.dummy.processor.BasePaymentProcessor': 'payment.modules.base.BasePaymentProcessor',
              'payment.modules.dummy.processor.NOTSET': 'payment.modules.base.NOTSET',
              'payment.modules.dummy.processor.ProcessorResult': 'payment.modules.base.ProcessorResult',
              'payment.modules.dummy.processor._': 'django.utils.translation.ugettext_lazy',
              'payment.modules.dummy.urls.*': 'django.conf.urls.defaults.*',
              'payment.modules.dummy.urls.config_get_group': 'livesettings.config_get_group',
              'payment.modules.dummy.urls.config_value': 'livesettings.config_value',
              'payment.modules.dummy.views.config_get_group': 'livesettings.config_get_group',
              'payment.modules.dummy.views.confirm': 'payment.views.confirm',
              'payment.modules.dummy.views.never_cache': 'django.views.decorators.cache.never_cache',
              'payment.modules.dummy.views.payship': 'payment.views.payship',
              'payment.modules.giftcertificate.admin.GiftCertificate': 'payment.modules.giftcertificate.models.GiftCertificate',
              'payment.modules.giftcertificate.admin.GiftCertificateProduct': 'payment.modules.giftcertificate.models.GiftCertificateProduct',
              'payment.modules.giftcertificate.admin.GiftCertificateUsage': 'payment.modules.giftcertificate.models.GiftCertificateUsage',
              'payment.modules.giftcertificate.admin._': 'django.utils.translation.ugettext_lazy',
              'payment.modules.giftcertificate.admin.admin': 'django.contrib.admin',
              'payment.modules.giftcertificate.admin.get_language': 'django.utils.translation.get_language',
              'payment.modules.giftcertificate.config.*': 'livesettings.*',
              'payment.modules.giftcertificate.config._': 'django.utils.translation.ugettext_lazy',
              'payment.modules.giftcertificate.forms.SimplePayShipForm': 'payment.forms.SimplePayShipForm',
              'payment.modules.giftcertificate.forms._': 'django.utils.translation.ugettext_lazy',
              'payment.modules.giftcertificate.forms.forms': 'django.forms',
              'payment.modules.giftcertificate.models.Contact': 'satchmo_store.contact.models.Contact',
              'payment.modules.giftcertificate.models.Decimal': 'decimal.Decimal',
              'payment.modules.giftcertificate.models.Order': 'satchmo_store.shop.models.Order',
              'payment.modules.giftcertificate.models.OrderPayment': 'satchmo_store.shop.models.OrderPayment',
              'payment.modules.giftcertificate.models.Product': 'product.models.Product',
              'payment.modules.giftcertificate.models.Site': 'django.contrib.sites.models.Site',
              'payment.modules.giftcertificate.models._': 'django.utils.translation.ugettext_lazy',
              'payment.modules.giftcertificate.models.config': 'payment.modules.giftcertificate.config',
              'payment.modules.giftcertificate.models.config_value': 'livesettings.config_value',
              'payment.modules.giftcertificate.models.datetime': 'datetime.datetime',
              'payment.modules.giftcertificate.models.generate_certificate_code': 'payment.modules.giftcertificate.utils.generate_certificate_code',
              'payment.modules.giftcertificate.models.get_processor_by_key': 'payment.utils.get_processor_by_key',
              'payment.modules.giftcertificate.models.logging': 'logging',
              'payment.modules.giftcertificate.models.models': 'django.db.models',
              'payment.modules.giftcertificate.models.moneyfmt': 'l10n.utils.moneyfmt',
              'payment.modules.giftcertificate.processor.BasePaymentProcessor': 'payment.modules.base.BasePaymentProcessor',
              'payment.modules.giftcertificate.processor.GiftCertificate': 'payment.modules.giftcertificate.models.GiftCertificate',
              'payment.modules.giftcertificate.processor.NOTSET': 'payment.modules.base.NOTSET',
              'payment.modules.giftcertificate.processor.ProcessorResult': 'payment.modules.base.ProcessorResult',
              'payment.modules.giftcertificate.processor._': 'django.utils.translation.ugettext',
              'payment.modules.giftcertificate.processor.moneyfmt': 'l10n.utils.moneyfmt',
              'payment.modules.giftcertificate.templatetags.satchmo_giftcertificate.get_filter_args': 'satchmo_utils.templatetags.get_filter_args',
              'payment.modules.giftcertificate.templatetags.satchmo_giftcertificate.template': 'django.template',
              'payment.modules.giftcertificate.tests.*': 'payment.modules.giftcertificate.models.*',
              'payment.modules.giftcertificate.tests.AddressBook': 'satchmo_store.contact.models.AddressBook',
              'payment.modules.giftcertificate.tests.Contact': 'satchmo_store.contact.models.Contact',
              'payment.modules.giftcertificate.tests.ContactRole': 'satchmo_store.contact.models.ContactRole',
              'payment.modules.giftcertificate.tests.Country': 'l10n.models.Country',
              'payment.modules.giftcertificate.tests.Decimal': 'decimal.Decimal',
              'payment.modules.giftcertificate.tests.Order': 'satchmo_store.shop.models.Order',
              'payment.modules.giftcertificate.tests.OrderItem': 'satchmo_store.shop.models.OrderItem',
              'payment.modules.giftcertificate.tests.OrderItemDetail': 'satchmo_store.shop.models.OrderItemDetail',
              'payment.modules.giftcertificate.tests.Product': 'product.models.Product',
              'payment.modules.giftcertificate.tests.Site': 'django.contrib.sites.models.Site',
              'payment.modules.giftcertificate.tests.TestCase': 'django.test.TestCase',
              'payment.modules.giftcertificate.tests.cache_delete': 'keyedcache.cache_delete',
              'payment.modules.giftcertificate.tests.config_get_group': 'livesettings.config_get_group',
              'payment.modules.giftcertificate.tests.config_value': 'livesettings.config_value',
              'payment.modules.giftcertificate.tests.datetime': 'datetime',
              'payment.modules.giftcertificate.tests.generate_certificate_code': 'payment.modules.giftcertificate.utils.generate_certificate_code',
              'payment.modules.giftcertificate.tests.generate_code': 'payment.modules.giftcertificate.utils.generate_code',
              'payment.modules.giftcertificate.tests.logging': 'logging',
              'payment.modules.giftcertificate.urls.*': 'django.conf.urls.defaults.*',
              'payment.modules.giftcertificate.urls.config_get_group': 'livesettings.config_get_group',
              'payment.modules.giftcertificate.utils.config_value': 'livesettings.config_value',
              'payment.modules.giftcertificate.utils.random': 'random',
              'payment.modules.giftcertificate.views.GIFTCODE_KEY': 'payment.modules.giftcertificate.models.GIFTCODE_KEY',
              'payment.modules.giftcertificate.views.GiftCertCodeForm': 'payment.modules.giftcertificate.forms.GiftCertCodeForm',
              'payment.modules.giftcertificate.views.GiftCertPayShipForm': 'payment.modules.giftcertificate.forms.GiftCertPayShipForm',
              'payment.modules.giftcertificate.views.GiftCertificate': 'payment.modules.giftcertificate.models.GiftCertificate',
              'payment.modules.giftcertificate.views.Order': 'satchmo_store.shop.models.Order',
              'payment.modules.giftcertificate.views.RequestContext': 'django.template.RequestContext',
              'payment.modules.giftcertificate.views.Site': 'django.contrib.sites.models.Site',
              'payment.modules.giftcertificate.views._': 'django.utils.translation.ugettext_lazy',
              'payment.modules.giftcertificate.views.config_get_group': 'livesettings.config_get_group',
              'payment.modules.giftcertificate.views.confirm': 'payment.views.confirm',
              'payment.modules.giftcertificate.views.get_or_create_order': 'payment.utils.get_or_create_order',
              'payment.modules.giftcertificate.views.http': 'django.http',
              'payment.modules.giftcertificate.views.logging': 'logging',
              'payment.modules.giftcertificate.views.lookup_url': 'satchmo_utils.dynamic.lookup_url',
              'payment.modules.giftcertificate.views.pay_ship_save': 'payment.utils.pay_ship_save',
              'payment.modules.giftcertificate.views.payship': 'payment.views.payship',
              'payment.modules.giftcertificate.views.render_to_response': 'django.shortcuts.render_to_response',
              'payment.modules.google.auth.HttpResponse': 'django.http.HttpResponse',
              'payment.modules.google.auth.config_get_group': 'livesettings.config_get_group',
              'payment.modules.google.auth.payment_live': 'payment.config.payment_live',
              'payment.modules.google.config.*': 'livesettings.*',
              'payment.modules.google.config._': 'django.utils.translation.ugettext_lazy',
              'payment.modules.google.notifications.Cart': 'satchmo_store.shop.models.Cart',
              'payment.modules.google.notifications.Order': 'satchmo_store.shop.models.Order',
              'payment.modules.google.notifications.OrderPayment': 'satchmo_store.shop.models.OrderPayment',
              'payment.modules.google.notifications._': 'django.utils.translation.ugettext',
              'payment.modules.google.notifications.config_get_group': 'livesettings.config_get_group',
              'payment.modules.google.notifications.get_processor_by_key': 'payment.utils.get_processor_by_key',
              'payment.modules.google.notifications.re': 're',
              'payment.modules.google.processor.HeadlessPaymentProcessor': 'payment.modules.base.HeadlessPaymentProcessor',
              'payment.modules.google.urls.*': 'django.conf.urls.defaults.*',
              'payment.modules.google.urls.config_get_group': 'livesettings.config_get_group',
              'payment.modules.google.views.Context': 'django.template.Context',
              'payment.modules.google.views.Order': 'satchmo_store.shop.models.Order',
              'payment.modules.google.views.RequestContext': 'django.template.RequestContext',
              'payment.modules.google.views._': 'django.utils.translation.ugettext',
              'payment.modules.google.views.auth': 'payment.modules.google.auth',
              'payment.modules.google.views.bad_or_missing': 'satchmo_utils.views.bad_or_missing',
              'payment.modules.google.views.base64': 'base64',
              'payment.modules.google.views.config_get_group': 'livesettings.config_get_group',
              'payment.modules.google.views.config_value': 'livesettings.config_value',
              'payment.modules.google.views.confirm': 'payment.views.confirm',
              'payment.modules.google.views.get_template': 'django.template.loader.get_template',
              'payment.modules.google.views.hmac': 'hmac',
              'payment.modules.google.views.http': 'django.http',
              'payment.modules.google.views.logging': 'logging',
              'payment.modules.google.views.lookup_url': 'satchmo_utils.dynamic.lookup_url',
              'payment.modules.google.views.never_cache': 'django.views.decorators.cache.never_cache',
              'payment.modules.google.views.notifications': 'payment.modules.google.notifications',
              'payment.modules.google.views.payment_live': 'payment.config.payment_live',
              'payment.modules.google.views.payship': 'payment.views.payship',
              'payment.modules.google.views.render_to_response': 'django.shortcuts.render_to_response',
              'payment.modules.google.views.sha': 'sha',
              'payment.modules.paypal.config.*': 'livesettings.*',
              'payment.modules.paypal.config._': 'django.utils.translation.ugettext_lazy',
              'payment.modules.paypal.processor.HeadlessPaymentProcessor': 'payment.modules.base.HeadlessPaymentProcessor',
              'payment.modules.paypal.urls.*': 'django.conf.urls.defaults.*',
              'payment.modules.paypal.urls.config_get_group': 'livesettings.config_get_group',
              'payment.modules.paypal.views.Cart': 'satchmo_store.shop.models.Cart',
              'payment.modules.paypal.views.Decimal': 'decimal.Decimal',
              'payment.modules.paypal.views.HttpResponse': 'django.http.HttpResponse',
              'payment.modules.paypal.views.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'payment.modules.paypal.views.Order': 'satchmo_store.shop.models.Order',
              'payment.modules.paypal.views.OrderPayment': 'satchmo_store.shop.models.OrderPayment',
              'payment.modules.paypal.views.RequestContext': 'django.template.RequestContext',
              'payment.modules.paypal.views._': 'django.utils.translation.ugettext',
              'payment.modules.paypal.views.config_get_group': 'livesettings.config_get_group',
              'payment.modules.paypal.views.config_value': 'livesettings.config_value',
              'payment.modules.paypal.views.exc_info': 'sys.exc_info',
              'payment.modules.paypal.views.format_exception': 'traceback.format_exception',
              'payment.modules.paypal.views.get_processor_by_key': 'payment.utils.get_processor_by_key',
              'payment.modules.paypal.views.logging': 'logging',
              'payment.modules.paypal.views.lookup_template': 'satchmo_utils.dynamic.lookup_template',
              'payment.modules.paypal.views.lookup_url': 'satchmo_utils.dynamic.lookup_url',
              'payment.modules.paypal.views.never_cache': 'django.views.decorators.cache.never_cache',
              'payment.modules.paypal.views.payment_live': 'payment.config.payment_live',
              'payment.modules.paypal.views.payship': 'payment.views.payship',
              'payment.modules.paypal.views.render_to_response': 'django.shortcuts.render_to_response',
              'payment.modules.paypal.views.urlencode': 'django.utils.http.urlencode',
              'payment.modules.paypal.views.urllib2': 'urllib2',
              'payment.modules.paypal.views.urlresolvers': 'django.core.urlresolvers',
              'payment.modules.protx.config.*': 'livesettings.*',
              'payment.modules.protx.config._': 'django.utils.translation.ugettext_lazy',
              'payment.modules.protx.forms.CreditPayShipForm': 'payment.forms.CreditPayShipForm',
              'payment.modules.protx.forms.MONTHS': 'payment.forms.MONTHS',
              'payment.modules.protx.forms.REQUIRES_ISSUE_NUMBER': 'payment.modules.protx.config.REQUIRES_ISSUE_NUMBER',
              'payment.modules.protx.forms._': 'django.utils.translation.ugettext',
              'payment.modules.protx.forms.forms': 'django.forms',
              'payment.modules.protx.forms.logging': 'logging',
              'payment.modules.protx.processor.BasePaymentProcessor': 'payment.modules.base.BasePaymentProcessor',
              'payment.modules.protx.processor.NOTSET': 'payment.modules.base.NOTSET',
              'payment.modules.protx.processor.ProcessorResult': 'payment.modules.base.ProcessorResult',
              'payment.modules.protx.processor._': 'django.utils.translation.ugettext_lazy',
              'payment.modules.protx.processor.forms': 'payment.modules.protx.forms',
              'payment.modules.protx.processor.settings': 'django.conf.settings',
              'payment.modules.protx.processor.trunc_decimal': 'satchmo_utils.numbers.trunc_decimal',
              'payment.modules.protx.processor.urlencode': 'django.utils.http.urlencode',
              'payment.modules.protx.processor.urllib2': 'urllib2',
              'payment.modules.protx.urls.*': 'django.conf.urls.defaults.*',
              'payment.modules.protx.urls.config_get_group': 'livesettings.config_get_group',
              'payment.modules.protx.views.RequestContext': 'django.template.RequestContext',
              'payment.modules.protx.views._': 'django.utils.translation.ugettext',
              'payment.modules.protx.views.config_get_group': 'livesettings.config_get_group',
              'payment.modules.protx.views.confirm': 'payment.views.confirm',
              'payment.modules.protx.views.http': 'django.http',
              'payment.modules.protx.views.logging': 'logging',
              'payment.modules.protx.views.lookup_template': 'satchmo_utils.dynamic.lookup_template',
              'payment.modules.protx.views.payship': 'payment.views.payship',
              'payment.modules.protx.views.render_to_response': 'django.shortcuts.render_to_response',
              'payment.modules.purchaseorder.admin.PurchaseOrder': 'payment.modules.purchaseorder.models.PurchaseOrder',
              'payment.modules.purchaseorder.admin.admin': 'django.contrib.admin',
              'payment.modules.purchaseorder.config.*': 'livesettings.*',
              'payment.modules.purchaseorder.config._': 'django.utils.translation.ugettext_lazy',
              'payment.modules.purchaseorder.config.logging': 'logging',
              'payment.modules.purchaseorder.forms.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'payment.modules.purchaseorder.forms.PurchaseOrder': 'payment.modules.purchaseorder.models.PurchaseOrder',
              'payment.modules.purchaseorder.forms.SimplePayShipForm': 'payment.forms.SimplePayShipForm',
              'payment.modules.purchaseorder.forms.app_enabled': 'satchmo_utils.app_enabled',
              'payment.modules.purchaseorder.forms.forms': 'django.forms',
              'payment.modules.purchaseorder.forms.signals': 'signals_ahoy.signals',
              'payment.modules.purchaseorder.models.Decimal': 'decimal.Decimal',
              'payment.modules.purchaseorder.models.Order': 'satchmo_store.shop.models.Order',
              'payment.modules.purchaseorder.models._': 'django.utils.translation.ugettext_lazy',
              'payment.modules.purchaseorder.models.config': 'payment.modules.purchaseorder.config',
              'payment.modules.purchaseorder.models.mark_safe': 'django.utils.safestring.mark_safe',
              'payment.modules.purchaseorder.models.models': 'django.db.models',
              'payment.modules.purchaseorder.models.moneyfmt': 'l10n.utils.moneyfmt',
              'payment.modules.purchaseorder.models.ugettext': 'django.utils.translation.ugettext',
              'payment.modules.purchaseorder.processor.BasePaymentProcessor': 'payment.modules.base.BasePaymentProcessor',
              'payment.modules.purchaseorder.processor.NOTSET': 'payment.modules.base.NOTSET',
              'payment.modules.purchaseorder.processor.ProcessorResult': 'payment.modules.base.ProcessorResult',
              'payment.modules.purchaseorder.processor._': 'django.utils.translation.ugettext',
              'payment.modules.purchaseorder.urls.*': 'django.conf.urls.defaults.*',
              'payment.modules.purchaseorder.urls.config_get_group': 'livesettings.config_get_group',
              'payment.modules.purchaseorder.views.PurchaseorderPayShipForm': 'payment.modules.purchaseorder.forms.PurchaseorderPayShipForm',
              'payment.modules.purchaseorder.views.config_get_group': 'livesettings.config_get_group',
              'payment.modules.purchaseorder.views.confirm': 'payment.views.confirm',
              'payment.modules.purchaseorder.views.http': 'django.http',
              'payment.modules.purchaseorder.views.logging': 'logging',
              'payment.modules.purchaseorder.views.lookup_url': 'satchmo_utils.dynamic.lookup_url',
              'payment.modules.purchaseorder.views.payship': 'payment.views.payship',
              'payment.modules.sermepa.config.*': 'livesettings.*',
              'payment.modules.sermepa.config._': 'django.utils.translation.ugettext_lazy',
              'payment.modules.sermepa.processor.HeadlessPaymentProcessor': 'payment.modules.base.HeadlessPaymentProcessor',
              'payment.modules.sermepa.urls.*': 'django.conf.urls.defaults.*',
              'payment.modules.sermepa.urls.config_get_group': 'livesettings.config_get_group',
              'payment.modules.sermepa.views.Cart': 'satchmo_store.shop.models.Cart',
              'payment.modules.sermepa.views.Decimal': 'decimal.Decimal',
              'payment.modules.sermepa.views.HttpResponse': 'django.http.HttpResponse',
              'payment.modules.sermepa.views.HttpResponseBadRequest': 'django.http.HttpResponseBadRequest',
              'payment.modules.sermepa.views.HttpResponseNotFound': 'django.http.HttpResponseNotFound',
              'payment.modules.sermepa.views.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'payment.modules.sermepa.views.Order': 'satchmo_store.shop.models.Order',
              'payment.modules.sermepa.views.RequestContext': 'django.template.RequestContext',
              'payment.modules.sermepa.views._': 'django.utils.translation.ugettext_lazy',
              'payment.modules.sermepa.views.config_get_group': 'livesettings.config_get_group',
              'payment.modules.sermepa.views.config_value': 'livesettings.config_value',
              'payment.modules.sermepa.views.datetime': 'datetime.datetime',
              'payment.modules.sermepa.views.get_processor_by_key': 'payment.utils.get_processor_by_key',
              'payment.modules.sermepa.views.logging': 'logging',
              'payment.modules.sermepa.views.lookup_template': 'satchmo_utils.dynamic.lookup_template',
              'payment.modules.sermepa.views.lookup_url': 'satchmo_utils.dynamic.lookup_url',
              'payment.modules.sermepa.views.never_cache': 'django.views.decorators.cache.never_cache',
              'payment.modules.sermepa.views.payship': 'payment.views.payship',
              'payment.modules.sermepa.views.render_to_response': 'django.shortcuts.render_to_response',
              'payment.modules.sermepa.views.sha1': 'sha.sha',
              'payment.modules.sermepa.views.urlresolvers': 'django.core.urlresolvers',
              'payment.modules.trustcommerce.config.*': 'livesettings.*',
              'payment.modules.trustcommerce.config._': 'django.utils.translation.ugettext_lazy',
              'payment.modules.trustcommerce.processor.BasePaymentProcessor': 'payment.modules.base.BasePaymentProcessor',
              'payment.modules.trustcommerce.processor.Decimal': 'decimal.Decimal',
              'payment.modules.trustcommerce.processor.NOTSET': 'payment.modules.base.NOTSET',
              'payment.modules.trustcommerce.processor.ProcessorResult': 'payment.modules.base.ProcessorResult',
              'payment.modules.trustcommerce.processor._': 'django.utils.translation.ugettext_lazy',
              'payment.modules.trustcommerce.processor.config_get_group': 'livesettings.config_get_group',
              'payment.modules.trustcommerce.processor.os': 'os',
              'payment.modules.trustcommerce.processor.tclink': 'tclink',
              'payment.modules.trustcommerce.urls.*': 'django.conf.urls.defaults.*',
              'payment.modules.trustcommerce.urls.config_get_group': 'livesettings.config_get_group',
              'payment.modules.trustcommerce.urls.config_value': 'livesettings.config_value',
              'payment.modules.trustcommerce.views.config_get_group': 'livesettings.config_get_group',
              'payment.modules.trustcommerce.views.confirm': 'payment.views.confirm',
              'payment.modules.trustcommerce.views.payship': 'payment.views.payship',
              'payment.signals.django.dispatch': 'django.dispatch',
              'payment.templatetags.satchmo_checkout.ORDER_STATUS': 'satchmo_store.shop.models.ORDER_STATUS',
              'payment.templatetags.satchmo_checkout.config_get': 'livesettings.config_get',
              'payment.templatetags.satchmo_checkout.config_get_group': 'livesettings.config_get_group',
              'payment.templatetags.satchmo_checkout.template': 'django.template',
              'payment.templatetags.satchmo_checkout.translation': 'django.utils.translation',
              'payment.templatetags.satchmo_googlecheckout.CHECKOUT_BUTTON_SIZES': 'payment.modules.google.CHECKOUT_BUTTON_SIZES',
              'payment.templatetags.satchmo_googlecheckout.config_get_group': 'livesettings.config_get_group',
              'payment.templatetags.satchmo_googlecheckout.template': 'django.template',
              'payment.templatetags.satchmo_googlecheckout.translation': 'django.utils.translation',
              'payment.templatetags.satchmo_googlecheckout.urlencode': 'django.utils.http.urlencode',
              'payment.tests.*': 'satchmo_store.shop.models.*',
              'payment.tests.Client': 'django.test.client.Client',
              'payment.tests.Decimal': 'decimal.Decimal',
              'payment.tests.Site': 'django.contrib.sites.models.Site',
              'payment.tests.TestCase': 'django.test.TestCase',
              'payment.tests.config_get': 'livesettings.config_get',
              'payment.tests.config_get_group': 'livesettings.config_get_group',
              'payment.tests.config_value': 'livesettings.config_value',
              'payment.tests.datetime': 'datetime',
              'payment.tests.keyedcache': 'keyedcache',
              'payment.tests.lookup_template': 'satchmo_utils.dynamic.lookup_template',
              'payment.tests.lookup_url': 'satchmo_utils.dynamic.lookup_url',
              'payment.tests.make_urlpatterns': 'payment.urls.make_urlpatterns',
              'payment.tests.settings': 'django.conf.settings',
              'payment.tests.url': 'django.core.urlresolvers.reverse',
              'payment.tests.urlresolvers': 'django.core.urlresolvers',
              'payment.tests.utils': 'payment.utils',
              'payment.urls.*': 'django.conf.urls.defaults.*',
              'payment.urls.config_get': 'livesettings.config_get',
              'payment.urls.config_get_group': 'livesettings.config_get_group',
              'payment.urls.config_value': 'livesettings.config_value',
              'payment.urls.logging': 'logging',
              'payment.utils.Decimal': 'decimal.Decimal',
              'payment.utils.Order': 'satchmo_store.shop.models.Order',
              'payment.utils.OrderAuthorization': 'satchmo_store.shop.models.OrderAuthorization',
              'payment.utils.OrderItem': 'satchmo_store.shop.models.OrderItem',
              'payment.utils.OrderItemDetail': 'satchmo_store.shop.models.OrderItemDetail',
              'payment.utils.OrderPayment': 'satchmo_store.shop.models.OrderPayment',
              'payment.utils.OrderPendingPayment': 'satchmo_store.shop.models.OrderPendingPayment',
              'payment.utils.SocketError': 'socket.error',
              'payment.utils.active_modules': 'payment.config.active_modules',
              'payment.utils.config_get_group': 'livesettings.config_get_group',
              'payment.utils.datetime': 'datetime.datetime',
              'payment.utils.logging': 'logging',
              'payment.utils.satchmo_post_copy_item_to_order': 'satchmo_store.shop.signals.satchmo_post_copy_item_to_order',
              'payment.utils.timedelta': 'datetime.timedelta',
              'payment.utils.update_shipping': 'shipping.utils.update_shipping',
              'payment.views.balance.CustomChargeForm': 'payment.forms.CustomChargeForm',
              'payment.views.balance.Decimal': 'decimal.Decimal',
              'payment.views.balance.HttpResponse': 'django.http.HttpResponse',
              'payment.views.balance.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'payment.views.balance.Order': 'satchmo_store.shop.models.Order',
              'payment.views.balance.OrderItem': 'satchmo_store.shop.models.OrderItem',
              'payment.views.balance.OrderPayment': 'satchmo_store.shop.models.OrderPayment',
              'payment.views.balance.PaymentMethodForm': 'payment.forms.PaymentMethodForm',
              'payment.views.balance.RequestContext': 'django.template.RequestContext',
              'payment.views.balance._': 'django.utils.translation.ugettext_lazy',
              'payment.views.balance.bad_or_missing': 'satchmo_utils.views.bad_or_missing',
              'payment.views.balance.config_get_group': 'livesettings.config_get_group',
              'payment.views.balance.config_value': 'livesettings.config_value',
              'payment.views.balance.contact': 'payment.views.contact',
              'payment.views.balance.datetime': 'datetime.datetime',
              'payment.views.balance.logging': 'logging',
              'payment.views.balance.lookup_url': 'satchmo_utils.dynamic.lookup_url',
              'payment.views.balance.render_to_response': 'django.shortcuts.render_to_response',
              'payment.views.balance.timedelta': 'datetime.timedelta',
              'payment.views.balance.urlresolvers': 'django.core.urlresolvers',
              'payment.views.checkout.Order': 'satchmo_store.shop.models.Order',
              'payment.views.checkout.RequestContext': 'django.template.RequestContext',
              'payment.views.checkout._': 'django.utils.translation.ugettext',
              'payment.views.checkout.bad_or_missing': 'satchmo_utils.views.bad_or_missing',
              'payment.views.checkout.never_cache': 'django.views.decorators.cache.never_cache',
              'payment.views.checkout.render_to_response': 'django.shortcuts.render_to_response',
              'payment.views.confirm.Cart': 'satchmo_store.shop.models.Cart',
              'payment.views.confirm.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'payment.views.confirm.Order': 'satchmo_store.shop.models.Order',
              'payment.views.confirm.OrderStatus': 'satchmo_store.shop.models.OrderStatus',
              'payment.views.confirm.ProcessorResult': 'payment.modules.base.ProcessorResult',
              'payment.views.confirm.RequestContext': 'django.template.RequestContext',
              'payment.views.confirm._': 'django.utils.translation.ugettext',
              'payment.views.confirm.config_value': 'livesettings.config_value',
              'payment.views.confirm.logging': 'logging',
              'payment.views.confirm.lookup_template': 'satchmo_utils.dynamic.lookup_template',
              'payment.views.confirm.lookup_url': 'satchmo_utils.dynamic.lookup_url',
              'payment.views.confirm.never_cache': 'django.views.decorators.cache.never_cache',
              'payment.views.confirm.payment_live': 'payment.config.payment_live',
              'payment.views.confirm.render_to_response': 'django.shortcuts.render_to_response',
              'payment.views.confirm.signals': 'payment.signals',
              'payment.views.confirm.urlresolvers': 'django.core.urlresolvers',
              'payment.views.contact.CUSTOMER_ID': 'satchmo_store.contact.CUSTOMER_ID',
              'payment.views.contact.Cart': 'satchmo_store.shop.models.Cart',
              'payment.views.contact.Config': 'satchmo_store.shop.models.Config',
              'payment.views.contact.Contact': 'satchmo_store.contact.models.Contact',
              'payment.views.contact.Order': 'satchmo_store.shop.models.Order',
              'payment.views.contact.PaymentContactInfoForm': 'payment.forms.PaymentContactInfoForm',
              'payment.views.contact.RequestContext': 'django.template.RequestContext',
              'payment.views.contact.cart_has_minimum_order': 'payment.decorators.cart_has_minimum_order',
              'payment.views.contact.config_get_group': 'livesettings.config_get_group',
              'payment.views.contact.config_value': 'livesettings.config_value',
              'payment.views.contact.form_initialdata': 'signals_ahoy.signals.form_initialdata',
              'payment.views.contact.http': 'django.http',
              'payment.views.contact.logging': 'logging',
              'payment.views.contact.lookup_url': 'satchmo_utils.dynamic.lookup_url',
              'payment.views.contact.render_to_response': 'django.shortcuts.render_to_response',
              'payment.views.contact.urlresolvers': 'django.core.urlresolvers',
              'payment.views.cron.Decimal': 'decimal.Decimal',
              'payment.views.cron.HttpResponse': 'django.http.HttpResponse',
              'payment.views.cron.Order': 'satchmo_store.shop.models.Order',
              'payment.views.cron.OrderItem': 'satchmo_store.shop.models.OrderItem',
              'payment.views.cron.OrderPayment': 'satchmo_store.shop.models.OrderPayment',
              'payment.views.cron._': 'django.utils.translation.ugettext_lazy',
              'payment.views.cron.bad_or_missing': 'satchmo_utils.views.bad_or_missing',
              'payment.views.cron.config_get_group': 'livesettings.config_get_group',
              'payment.views.cron.config_value': 'livesettings.config_value',
              'payment.views.cron.datetime': 'datetime.datetime',
              'payment.views.cron.logging': 'logging',
              'payment.views.cron.timedelta': 'datetime.timedelta',
              'payment.views.cron.ugettext': 'django.utils.translation.ugettext',
              'payment.views.payship.Cart': 'satchmo_store.shop.models.Cart',
              'payment.views.payship.Contact': 'satchmo_store.contact.models.Contact',
              'payment.views.payship.CreditPayShipForm': 'payment.forms.CreditPayShipForm',
              'payment.views.payship.Order': 'satchmo_store.shop.models.Order',
              'payment.views.payship.OrderPayment': 'satchmo_store.shop.models.OrderPayment',
              'payment.views.payship.RequestContext': 'django.template.RequestContext',
              'payment.views.payship.SimplePayShipForm': 'payment.forms.SimplePayShipForm',
              'payment.views.payship._': 'django.utils.translation.ugettext_lazy',
              'payment.views.payship.config_value': 'livesettings.config_value',
              'payment.views.payship.find_best_auto_discount': 'product.utils.find_best_auto_discount',
              'payment.views.payship.http': 'django.http',
              'payment.views.payship.logging': 'logging',
              'payment.views.payship.lookup_template': 'satchmo_utils.dynamic.lookup_template',
              'payment.views.payship.lookup_url': 'satchmo_utils.dynamic.lookup_url',
              'payment.views.payship.payment_live': 'payment.config.payment_live',
              'payment.views.payship.render_to_response': 'django.shortcuts.render_to_response',
              'payment.views.payship.settings': 'django.conf.settings',
              'posplit.OptionParser': 'optparse.OptionParser',
              'posplit.os.path': 'os.path',
              'posplit.sys': 'sys',
              'product.admin.AdminImageWithThumbnailWidget': 'satchmo_utils.thumbnail.widgets.AdminImageWithThumbnailWidget',
              'product.admin.Category': 'product.models.Category',
              'product.admin.CategoryImage': 'product.models.CategoryImage',
              'product.admin.CategoryImageTranslation': 'product.models.CategoryImageTranslation',
              'product.admin.CategoryTranslation': 'product.models.CategoryTranslation',
              'product.admin.ConfigurableProduct': 'product.models.ConfigurableProduct',
              'product.admin.CustomProduct': 'product.models.CustomProduct',
              'product.admin.CustomTextField': 'product.models.CustomTextField',
              'product.admin.CustomTextFieldTranslation': 'product.models.CustomTextFieldTranslation',
              'product.admin.Discount': 'product.models.Discount',
              'product.admin.DownloadableProduct': 'product.models.DownloadableProduct',
              'product.admin.ImageWithThumbnailField': 'satchmo_utils.thumbnail.field.ImageWithThumbnailField',
              'product.admin.Option': 'product.models.Option',
              'product.admin.OptionGroup': 'product.models.OptionGroup',
              'product.admin.OptionGroupTranslation': 'product.models.OptionGroupTranslation',
              'product.admin.OptionTranslation': 'product.models.OptionTranslation',
              'product.admin.Price': 'product.models.Price',
              'product.admin.Product': 'product.models.Product',
              'product.admin.ProductAttribute': 'product.models.ProductAttribute',
              'product.admin.ProductImage': 'product.models.ProductImage',
              'product.admin.ProductImageTranslation': 'product.models.ProductImageTranslation',
              'product.admin.ProductTranslation': 'product.models.ProductTranslation',
              'product.admin.ProductVariation': 'product.models.ProductVariation',
              'product.admin.SubscriptionProduct': 'product.models.SubscriptionProduct',
              'product.admin.TaxClass': 'product.models.TaxClass',
              'product.admin.Trial': 'product.models.Trial',
              'product.admin.ValidationError': 'django.forms.ValidationError',
              'product.admin._': 'django.utils.translation.ugettext_lazy',
              'product.admin.admin': 'django.contrib.admin',
              'product.admin.config_value': 'livesettings.config_value',
              'product.admin.default_dimension_unit': 'product.models.default_dimension_unit',
              'product.admin.default_weight_unit': 'product.models.default_weight_unit',
              'product.admin.get_language': 'django.utils.translation.get_language',
              'product.admin.models': 'django.forms.models',
              'product.config.*': 'livesettings.*',
              'product.config._': 'django.utils.translation.ugettext_lazy',
              'product.config.get_satchmo_setting': 'satchmo_store.shop.get_satchmo_setting',
              'product.config.load_module': 'satchmo_utils.load_module',
              'product.forms.CommandError': 'django.core.management.base.CommandError',
              'product.forms.Decimal': 'decimal.Decimal',
              'product.forms.HttpResponse': 'django.http.HttpResponse',
              'product.forms.Option': 'product.models.Option',
              'product.forms.Price': 'product.models.Price',
              'product.forms.Product': 'product.models.Product',
              'product.forms.Site': 'django.contrib.sites.models.Site',
              'product.forms.StringIO': 'StringIO.StringIO',
              'product.forms._': 'django.utils.translation.ugettext',
              'product.forms.config': 'product.config',
              'product.forms.config_value': 'livesettings.config_value',
              'product.forms.connection': 'django.db.connection',
              'product.forms.forms': 'django.forms',
              'product.forms.logging': 'logging',
              'product.forms.no_style': 'django.core.management.color.no_style',
              'product.forms.os': 'os',
              'product.forms.serializers': 'django.core.serializers',
              'product.forms.settings': 'django.conf.settings',
              'product.forms.slugify': 'satchmo_utils.unique_id.slugify',
              'product.forms.time': 'time',
              'product.forms.transaction': 'django.db.transaction',
              'product.forms.urlresolvers': 'django.core.urlresolvers',
              'product.forms.zipfile': 'zipfile',
              'product.jobs.daily.rebuild_prices.DailyJob': 'django_extensions.management.jobs.DailyJob',
              'product.jobs.daily.rebuild_prices.ProductPriceLookup': 'product.models.ProductPriceLookup',
              'product.jobs.sample.BaseJob': 'django_extensions.management.jobs.BaseJob',
              'product.listeners.Category': 'product.models.Category',
              'product.listeners.Decimal': 'decimal.Decimal',
              'product.listeners.Discount': 'product.models.Discount',
              'product.listeners.InvalidOperation': 'decimal.InvalidOperation',
              'product.listeners.Product': 'product.models.Product',
              'product.listeners.Q': 'django.db.models.Q',
              'product.listeners.Site': 'django.contrib.sites.models.Site',
              'product.listeners.logging': 'logging',
              'product.management.commands.satchmo_rebuild_pricing.BaseCommand': 'django.core.management.base.BaseCommand',
              'product.management.commands.satchmo_rebuild_pricing.Product': 'product.models.Product',
              'product.management.commands.satchmo_rebuild_pricing.ProductPriceLookup': 'product.models.ProductPriceLookup',
              'product.management.commands.satchmo_rebuild_pricing.Site': 'django.contrib.sites.models.Site',
              'product.management.commands.satchmo_rebuild_pricing.make_option': 'optparse.make_option',
              'product.management.commands.satchmo_rebuild_pricing.settings': 'django.conf.settings',
              'product.models.CurrencyField': 'satchmo_utils.fields.CurrencyField',
              'product.models.Decimal': 'decimal.Decimal',
              'product.models.FileField': 'django.db.models.fields.files.FileField',
              'product.models.ImageWithThumbnailField': 'satchmo_utils.thumbnail.field.ImageWithThumbnailField',
              'product.models.Q': 'django.db.models.Q',
              'product.models.SettingNotSet': 'livesettings.SettingNotSet',
              'product.models.Site': 'django.contrib.sites.models.Site',
              'product.models._': 'django.utils.translation.ugettext_lazy',
              'product.models.add_month': 'satchmo_utils.add_month',
              'product.models.config': 'product.config',
              'product.models.config_value': 'livesettings.config_value',
              'product.models.config_value_safe': 'livesettings.config_value_safe',
              'product.models.cross_list': 'satchmo_utils.cross_list',
              'product.models.datetime': 'datetime',
              'product.models.forms': 'django.forms',
              'product.models.get_flat_list': 'satchmo_utils.get_flat_list',
              'product.models.get_language': 'django.utils.translation.get_language',
              'product.models.keyedcache': 'keyedcache',
              'product.models.logging': 'logging',
              'product.models.mark_safe': 'django.utils.safestring.mark_safe',
              'product.models.models': 'django.db.models',
              'product.models.moneyfmt': 'l10n.utils.moneyfmt',
              'product.models.normalize_dir': 'satchmo_utils.normalize_dir',
              'product.models.operator': 'operator',
              'product.models.os.path': 'os.path',
              'product.models.productvariation_details': 'product.utils.productvariation_details',
              'product.models.random': 'random',
              'product.models.serialize_options': 'product.utils.serialize_options',
              'product.models.settings': 'django.conf.settings',
              'product.models.sha_constructor': 'django.utils.hashcompat.sha_constructor',
              'product.models.shipping_method_by_key': 'shipping.config.shipping_method_by_key',
              'product.models.signals': 'product.signals',
              'product.models.slugify': 'satchmo_utils.unique_id.slugify',
              'product.models.smart_str': 'django.utils.encoding.smart_str',
              'product.models.sys': 'sys',
              'product.models.ugettext': 'django.utils.translation.ugettext',
              'product.models.url_join': 'satchmo_utils.url_join',
              'product.models.urlresolvers': 'django.core.urlresolvers',
              'product.queries.NotCachedError': 'keyedcache.NotCachedError',
              'product.queries.Product': 'product.models.Product',
              'product.queries.cache_get': 'keyedcache.cache_get',
              'product.queries.cache_set': 'keyedcache.cache_set',
              'product.queries.logging': 'logging',
              'product.signals.django.dispatch': 'django.dispatch',
              'product.templatetags.satchmo_discounts.Context': 'django.template.Context',
              'product.templatetags.satchmo_discounts.Decimal': 'decimal.Decimal',
              'product.templatetags.satchmo_discounts.Template': 'django.template.Template',
              'product.templatetags.satchmo_discounts._': 'django.utils.translation.ugettext_lazy',
              'product.templatetags.satchmo_discounts.calc_discounted_by_percentage': 'product.utils.calc_discounted_by_percentage',
              'product.templatetags.satchmo_discounts.config_value': 'livesettings.config_value',
              'product.templatetags.satchmo_discounts.find_best_auto_discount': 'product.utils.find_best_auto_discount',
              'product.templatetags.satchmo_discounts.get_filter_args': 'satchmo_utils.templatetags.get_filter_args',
              'product.templatetags.satchmo_discounts.get_language': 'django.utils.translation.get_language',
              'product.templatetags.satchmo_discounts.satchmo_tax': 'tax.templatetags.satchmo_tax',
              'product.templatetags.satchmo_discounts.settings': 'django.conf.settings',
              'product.templatetags.satchmo_discounts.template': 'django.template',
              'product.templatetags.satchmo_discounts.urlresolvers': 'django.core.urlresolvers',
              'product.templatetags.satchmo_product.Category': 'product.models.Category',
              'product.templatetags.satchmo_product.Context': 'django.template.Context',
              'product.templatetags.satchmo_product.Product': 'product.models.Product',
              'product.templatetags.satchmo_product.Template': 'django.template.Template',
              'product.templatetags.satchmo_product._': 'django.utils.translation.ugettext_lazy',
              'product.templatetags.satchmo_product.bestsellers': 'product.queries.bestsellers',
              'product.templatetags.satchmo_product.config_value': 'livesettings.config_value',
              'product.templatetags.satchmo_product.get_filter_args': 'satchmo_utils.templatetags.get_filter_args',
              'product.templatetags.satchmo_product.get_language': 'django.utils.translation.get_language',
              'product.templatetags.satchmo_product.keyedcache': 'keyedcache',
              'product.templatetags.satchmo_product.settings': 'django.conf.settings',
              'product.templatetags.satchmo_product.template': 'django.template',
              'product.templatetags.satchmo_product.urlresolvers': 'django.core.urlresolvers',
              'product.templatetags.satchmo_product_admin.Context': 'django.template.Context',
              'product.templatetags.satchmo_product_admin.Template': 'django.template.Template',
              'product.templatetags.satchmo_product_admin._': 'django.utils.translation.ugettext_lazy',
              'product.templatetags.satchmo_product_admin.config_value': 'livesettings.config_value',
              'product.templatetags.satchmo_product_admin.get_language': 'django.utils.translation.get_language',
              'product.templatetags.satchmo_product_admin.settings': 'django.conf.settings',
              'product.templatetags.satchmo_product_admin.template': 'django.template',
              'product.templatetags.satchmo_product_admin.urlresolvers': 'django.core.urlresolvers',
              'product.tests.*': 'product.models.*',
              'product.tests.Category': 'product.models.Category',
              'product.tests.ConfigurableProduct': 'product.models.ConfigurableProduct',
              'product.tests.Decimal': 'decimal.Decimal',
              'product.tests.Discount': 'product.models.Discount',
              'product.tests.HttpResponse': 'django.http.HttpResponse',
              'product.tests.Model': 'django.db.models.Model',
              'product.tests.Option': 'product.models.Option',
              'product.tests.OptionGroup': 'product.models.OptionGroup',
              'product.tests.Price': 'product.models.Price',
              'product.tests.Product': 'product.models.Product',
              'product.tests.ProductExportForm': 'product.forms.ProductExportForm',
              'product.tests.ProductVariation': 'product.models.ProductVariation',
              'product.tests.Site': 'django.contrib.sites.models.Site',
              'product.tests.StringIO': 'StringIO.StringIO',
              'product.tests.TestCase': 'django.test.TestCase',
              'product.tests.User': 'django.contrib.auth.models.User',
              'product.tests.datetime': 'datetime',
              'product.tests.db': 'django.db',
              'product.tests.doctest': 'doctest',
              'product.tests.keyedcache': 'keyedcache',
              'product.tests.productvariation_details': 'product.utils.productvariation_details',
              'product.tests.serialize_options': 'product.utils.serialize_options',
              'product.tests.settings': 'django.conf.settings',
              'product.tests.signals': 'product.signals',
              'product.tests.urlresolvers': 'django.core.urlresolvers',
              'product.tests.zipfile': 'zipfile',
              'product.urls.*': 'django.conf.urls.defaults.*',
              'product.urls.base.*': 'django.conf.urls.defaults.*',
              'product.urls.category.*': 'django.conf.urls.defaults.*',
              'product.urls.catpatterns': 'product.urls.category.urlpatterns',
              'product.urls.collect_urls': 'signals_ahoy.signals.collect_urls',
              'product.urls.config_value': 'livesettings.config_value',
              'product.urls.prodpatterns': 'product.urls.products.urlpatterns',
              'product.urls.product': 'product',
              'product.urls.products.*': 'django.conf.urls.defaults.*',
              'product.urls.products.collect_urls': 'signals_ahoy.signals.collect_urls',
              'product.urls.products.product': 'product',
              'product.utils.Decimal': 'decimal.Decimal',
              'product.utils.Discount': 'product.models.Discount',
              'product.utils.NullDiscount': 'product.models.NullDiscount',
              'product.utils.Option': 'product.models.Option',
              'product.utils.OptionGroup': 'product.models.OptionGroup',
              'product.utils.Product': 'product.models.Product',
              'product.utils.ProductPriceLookup': 'product.models.ProductPriceLookup',
              'product.utils.ProductVariation': 'product.models.ProductVariation',
              'product.utils.RoundedDecimalError': 'satchmo_utils.numbers.RoundedDecimalError',
              'product.utils.Site': 'django.contrib.sites.models.Site',
              'product.utils.config_value': 'livesettings.config_value',
              'product.utils.datetime': 'datetime',
              'product.utils.get_tax_processor': 'tax.utils.get_tax_processor',
              'product.utils.logging': 'logging',
              'product.utils.moneyfmt': 'l10n.utils.moneyfmt',
              'product.utils.round_decimal': 'satchmo_utils.numbers.round_decimal',
              'product.utils.split_option_unique_id': 'product.models.split_option_unique_id',
              'product.utils.types': 'types',
              'product.views.Category': 'product.models.Category',
              'product.views.ConfigurableProduct': 'product.models.ConfigurableProduct',
              'product.views.Decimal': 'decimal.Decimal',
              'product.views.Product': 'product.models.Product',
              'product.views.RequestContext': 'django.template.RequestContext',
              'product.views.RoundedDecimalError': 'satchmo_utils.numbers.RoundedDecimalError',
              'product.views._': 'django.utils.translation.ugettext',
              'product.views.adminviews.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'product.views.adminviews.InventoryForm': 'product.forms.InventoryForm',
              'product.views.adminviews.Product': 'product.models.Product',
              'product.views.adminviews.ProductExportForm': 'product.forms.ProductExportForm',
              'product.views.adminviews.ProductImportForm': 'product.forms.ProductImportForm',
              'product.views.adminviews.RequestContext': 'django.template.RequestContext',
              'product.views.adminviews.VariationManagerForm': 'product.forms.VariationManagerForm',
              'product.views.adminviews._': 'django.utils.translation.ugettext',
              'product.views.adminviews.bad_or_missing': 'satchmo_utils.views.bad_or_missing',
              'product.views.adminviews.logging': 'logging',
              'product.views.adminviews.render_to_response': 'django.shortcuts.render_to_response',
              'product.views.adminviews.urlresolvers': 'django.core.urlresolvers',
              'product.views.adminviews.user_passes_test': 'django.contrib.auth.decorators.user_passes_test',
              'product.views.bad_or_missing': 'satchmo_utils.views.bad_or_missing',
              'product.views.config_value': 'livesettings.config_value',
              'product.views.datetime': 'datetime',
              'product.views.filters.InvalidPage': 'django.core.paginator.InvalidPage',
              'product.views.filters.Paginator': 'django.core.paginator.Paginator',
              'product.views.filters.Product': 'product.models.Product',
              'product.views.filters.RequestContext': 'django.template.RequestContext',
              'product.views.filters.bestsellers': 'product.queries.bestsellers',
              'product.views.filters.config_value': 'livesettings.config_value',
              'product.views.filters.get_object_or_404': 'django.shortcuts.get_object_or_404',
              'product.views.filters.http': 'django.http',
              'product.views.filters.logging': 'logging',
              'product.views.filters.render_to_response': 'django.shortcuts.render_to_response',
              'product.views.find_best_auto_discount': 'product.utils.find_best_auto_discount',
              'product.views.get_object_or_404': 'django.shortcuts.get_object_or_404',
              'product.views.http': 'django.http',
              'product.views.index_prerender': 'product.signals.index_prerender',
              'product.views.json_encode': 'satchmo_utils.json.json_encode',
              'product.views.logging': 'logging',
              'product.views.moneyfmt': 'l10n.utils.moneyfmt',
              'product.views.random': 'random',
              'product.views.render_to_response': 'django.shortcuts.render_to_response',
              'product.views.round_decimal': 'satchmo_utils.numbers.round_decimal',
              'product.views.select_template': 'django.template.loader.select_template',
              'product.views.signals': 'product.signals',
              'product.views.sorted_tuple': 'product.models.sorted_tuple',
              'satchmo_ext.brand.admin.AdminImageWithThumbnailWidget': 'satchmo_utils.thumbnail.widgets.AdminImageWithThumbnailWidget',
              'satchmo_ext.brand.admin.Brand': 'satchmo_ext.brand.models.Brand',
              'satchmo_ext.brand.admin.BrandCategory': 'satchmo_ext.brand.models.BrandCategory',
              'satchmo_ext.brand.admin.BrandCategoryProduct': 'satchmo_ext.brand.models.BrandCategoryProduct',
              'satchmo_ext.brand.admin.BrandCategoryTranslation': 'satchmo_ext.brand.models.BrandCategoryTranslation',
              'satchmo_ext.brand.admin.BrandProduct': 'satchmo_ext.brand.models.BrandProduct',
              'satchmo_ext.brand.admin.BrandTranslation': 'satchmo_ext.brand.models.BrandTranslation',
              'satchmo_ext.brand.admin.ImageWithThumbnailField': 'satchmo_utils.thumbnail.field.ImageWithThumbnailField',
              'satchmo_ext.brand.admin.Product': 'product.models.Product',
              'satchmo_ext.brand.admin.ProductOptions': 'product.admin.ProductOptions',
              'satchmo_ext.brand.admin._': 'django.utils.translation.ugettext_lazy',
              'satchmo_ext.brand.admin.admin': 'django.contrib.admin',
              'satchmo_ext.brand.config.*': 'livesettings.*',
              'satchmo_ext.brand.config.PRODUCT_GROUP': 'product.config.PRODUCT_GROUP',
              'satchmo_ext.brand.config._': 'django.utils.translation.ugettext_lazy',
              'satchmo_ext.brand.models.ImageWithThumbnailField': 'satchmo_utils.thumbnail.field.ImageWithThumbnailField',
              'satchmo_ext.brand.models.Product': 'product.models.Product',
              'satchmo_ext.brand.models.Site': 'django.contrib.sites.models.Site',
              'satchmo_ext.brand.models.TranslatedObjectMixin': 'l10n.mixins.TranslatedObjectMixin',
              'satchmo_ext.brand.models._': 'django.utils.translation.ugettext_lazy',
              'satchmo_ext.brand.models.add_brand_urls': 'satchmo_ext.brand.urls.add_brand_urls',
              'satchmo_ext.brand.models.collect_urls': 'signals_ahoy.signals.collect_urls',
              'satchmo_ext.brand.models.config': 'satchmo_ext.brand.config',
              'satchmo_ext.brand.models.logging': 'logging',
              'satchmo_ext.brand.models.models': 'django.db.models',
              'satchmo_ext.brand.models.product': 'product',
              'satchmo_ext.brand.models.settings': 'django.conf.settings',
              'satchmo_ext.brand.templatetags.satchmo_brands.Brand': 'satchmo_ext.brand.models.Brand',
              'satchmo_ext.brand.templatetags.satchmo_brands.Library': 'django.template.Library',
              'satchmo_ext.brand.templatetags.satchmo_brands.Node': 'django.template.Node',
              'satchmo_ext.brand.templatetags.satchmo_brands.TemplateSyntaxError': 'django.template.TemplateSyntaxError',
              'satchmo_ext.brand.templatetags.satchmo_brands.get_filter_args': 'satchmo_utils.templatetags.get_filter_args',
              'satchmo_ext.brand.urls.*': 'django.conf.urls.defaults.*',
              'satchmo_ext.brand.urls.config_value': 'livesettings.config_value',
              'satchmo_ext.brand.urls.logging': 'logging',
              'satchmo_ext.brand.views.Brand': 'satchmo_ext.brand.models.Brand',
              'satchmo_ext.brand.views.BrandCategory': 'satchmo_ext.brand.models.BrandCategory',
              'satchmo_ext.brand.views.BrandProduct': 'satchmo_ext.brand.models.BrandProduct',
              'satchmo_ext.brand.views.Http404': 'django.http.Http404',
              'satchmo_ext.brand.views.HttpResponse': 'django.http.HttpResponse',
              'satchmo_ext.brand.views.Product': 'product.models.Product',
              'satchmo_ext.brand.views.RequestContext': 'django.template.RequestContext',
              'satchmo_ext.brand.views.Site': 'django.contrib.sites.models.Site',
              'satchmo_ext.brand.views._': 'django.utils.translation.ugettext_lazy',
              'satchmo_ext.brand.views.find_best_auto_discount': 'product.utils.find_best_auto_discount',
              'satchmo_ext.brand.views.get_object_or_404': 'django.shortcuts.get_object_or_404',
              'satchmo_ext.brand.views.logging': 'logging',
              'satchmo_ext.brand.views.render_to_response': 'django.shortcuts.render_to_response',
              'satchmo_ext.brand.views.signals': 'product.signals',
              'satchmo_ext.contrib.cartqty_discounts.logging': 'logging',
              'satchmo_ext.contrib.cartqty_discounts.satchmo_cartitem_price_query': 'satchmo_store.shop.signals.satchmo_cartitem_price_query',
              'satchmo_ext.metrics.logger.ConfigurableProduct': 'product.models.ConfigurableProduct',
              'satchmo_ext.metrics.logger.logging': 'logging',
              'satchmo_ext.newsletter._': 'django.utils.translation.ugettext_lazy',
              'satchmo_ext.newsletter.admin.Subscription': 'satchmo_ext.newsletter.models.Subscription',
              'satchmo_ext.newsletter.admin.SubscriptionAttribute': 'satchmo_ext.newsletter.models.SubscriptionAttribute',
              'satchmo_ext.newsletter.admin._': 'django.utils.translation.ugettext_lazy',
              'satchmo_ext.newsletter.admin.admin': 'django.contrib.admin',
              'satchmo_ext.newsletter.admin.get_language': 'django.utils.translation.get_language',
              'satchmo_ext.newsletter.config.*': 'livesettings.*',
              'satchmo_ext.newsletter.config._': 'django.utils.translation.ugettext_lazy',
              'satchmo_ext.newsletter.config.get_satchmo_setting': 'satchmo_store.shop.get_satchmo_setting',
              'satchmo_ext.newsletter.config.load_module': 'satchmo_utils.load_module',
              'satchmo_ext.newsletter.config.settings': 'django.conf.settings',
              'satchmo_ext.newsletter.config_value': 'livesettings.config_value',
              'satchmo_ext.newsletter.form_initialdata': 'signals_ahoy.signals.form_initialdata',
              'satchmo_ext.newsletter.forms': 'django.forms',
              'satchmo_ext.newsletter.forms._': 'django.utils.translation.ugettext_lazy',
              'satchmo_ext.newsletter.forms.forms': 'django.forms',
              'satchmo_ext.newsletter.forms.get_contact_or_fake': 'satchmo_ext.newsletter.models.get_contact_or_fake',
              'satchmo_ext.newsletter.forms.update_subscription': 'satchmo_ext.newsletter.update_subscription',
              'satchmo_ext.newsletter.listeners.ContactInfoForm': 'satchmo_store.contact.forms.ContactInfoForm',
              'satchmo_ext.newsletter.listeners.add_newsletter_urls': 'satchmo_ext.newsletter.urls.add_newsletter_urls',
              'satchmo_ext.newsletter.listeners.collect_urls': 'signals_ahoy.signals.collect_urls',
              'satchmo_ext.newsletter.listeners.form_postsave': 'signals_ahoy.signals.form_postsave',
              'satchmo_ext.newsletter.listeners.logging': 'logging',
              'satchmo_ext.newsletter.listeners.shop': 'satchmo_store.shop',
              'satchmo_ext.newsletter.listeners.update_subscription': 'satchmo_ext.newsletter.update_subscription',
              'satchmo_ext.newsletter.load_module': 'satchmo_utils.load_module',
              'satchmo_ext.newsletter.logging': 'logging',
              'satchmo_ext.newsletter.mailman.Errors': 'satchmo_ext.newsletter.Mailman.Errors',
              'satchmo_ext.newsletter.mailman.MailList': 'satchmo_ext.newsletter.Mailman.MailList',
              'satchmo_ext.newsletter.mailman.Subscription': 'satchmo_ext.newsletter.models.Subscription',
              'satchmo_ext.newsletter.mailman._': 'django.utils.translation.ugettext',
              'satchmo_ext.newsletter.mailman.config_value': 'livesettings.config_value',
              'satchmo_ext.newsletter.mailman.logging': 'logging',
              'satchmo_ext.newsletter.mailman.sys': 'sys',
              'satchmo_ext.newsletter.models.Contact': 'satchmo_store.contact.models.Contact',
              'satchmo_ext.newsletter.models._': 'django.utils.translation.ugettext_lazy',
              'satchmo_ext.newsletter.models.config': 'satchmo_ext.newsletter.config',
              'satchmo_ext.newsletter.models.datetime': 'datetime',
              'satchmo_ext.newsletter.models.listeners': 'satchmo_ext.newsletter.listeners',
              'satchmo_ext.newsletter.models.logging': 'logging',
              'satchmo_ext.newsletter.models.models': 'django.db.models',
              'satchmo_ext.newsletter.satchmo_contact_view': 'satchmo_store.contact.signals.satchmo_contact_view',
              'satchmo_ext.newsletter.satchmo_registration': 'satchmo_store.accounts.signals.satchmo_registration',
              'satchmo_ext.newsletter.signals': 'satchmo_ext.newsletter.signals',
              'satchmo_ext.newsletter.signals.django.dispatch': 'django.dispatch',
              'satchmo_ext.newsletter.simple.Subscription': 'satchmo_ext.newsletter.models.Subscription',
              'satchmo_ext.newsletter.simple._': 'django.utils.translation.ugettext',
              'satchmo_ext.newsletter.simple.logging': 'logging',
              'satchmo_ext.newsletter.tests.*': 'satchmo_ext.newsletter.*',
              'satchmo_ext.newsletter.tests.Client': 'django.test.client.Client',
              'satchmo_ext.newsletter.tests.Subscription': 'satchmo_ext.newsletter.models.Subscription',
              'satchmo_ext.newsletter.tests.TestCase': 'django.test.TestCase',
              'satchmo_ext.newsletter.tests.config_get': 'livesettings.config_get',
              'satchmo_ext.newsletter.tests.get_contact_or_fake': 'satchmo_ext.newsletter.models.get_contact_or_fake',
              'satchmo_ext.newsletter.tests.keyedcache': 'keyedcache',
              'satchmo_ext.newsletter.tests.logging': 'logging',
              'satchmo_ext.newsletter.tests.urlresolvers': 'django.core.urlresolvers',
              'satchmo_ext.newsletter.urls.*': 'django.conf.urls.defaults.*',
              'satchmo_ext.newsletter.urls.config_value': 'livesettings.config_value',
              'satchmo_ext.newsletter.urls.logging': 'logging',
              'satchmo_ext.newsletter.views.NewsletterForm': 'satchmo_ext.newsletter.forms.NewsletterForm',
              'satchmo_ext.newsletter.views.RequestContext': 'django.template.RequestContext',
              'satchmo_ext.newsletter.views._': 'django.utils.translation.ugettext_lazy',
              'satchmo_ext.newsletter.views.render_to_response': 'django.shortcuts.render_to_response',
              'satchmo_ext.newsletter.views.ugettext': 'django.utils.translation.ugettext',
              'satchmo_ext.product_feeds.models.add_feed_urls': 'satchmo_ext.product_feeds.urls.add_feed_urls',
              'satchmo_ext.product_feeds.models.collect_urls': 'signals_ahoy.signals.collect_urls',
              'satchmo_ext.product_feeds.models.shop': 'satchmo_store.shop',
              'satchmo_ext.product_feeds.templatetags.satchmo_feed.mark_safe': 'django.utils.safestring.mark_safe',
              'satchmo_ext.product_feeds.templatetags.satchmo_feed.re': 're',
              'satchmo_ext.product_feeds.templatetags.satchmo_feed.template': 'django.template',
              'satchmo_ext.product_feeds.tests.Product': 'product.models.Product',
              'satchmo_ext.product_feeds.tests.TestCase': 'django.test.TestCase',
              'satchmo_ext.product_feeds.tests.keyedcache': 'keyedcache',
              'satchmo_ext.product_feeds.tests.settings': 'django.conf.settings',
              'satchmo_ext.product_feeds.tests.urlresolvers': 'django.core.urlresolvers',
              'satchmo_ext.product_feeds.urls.*': 'django.conf.urls.defaults.*',
              'satchmo_ext.product_feeds.urls.logging': 'logging',
              'satchmo_ext.product_feeds.views.Category': 'product.models.Category',
              'satchmo_ext.product_feeds.views.Config': 'satchmo_store.shop.models.Config',
              'satchmo_ext.product_feeds.views.Http404': 'django.http.Http404',
              'satchmo_ext.product_feeds.views.Product': 'product.models.Product',
              'satchmo_ext.product_feeds.views._': 'django.utils.translation.ugettext_lazy',
              'satchmo_ext.product_feeds.views.credit_choices': 'payment.config.credit_choices',
              'satchmo_ext.product_feeds.views.datetime': 'datetime',
              'satchmo_ext.product_feeds.views.get_object_or_404': 'django.shortcuts.get_object_or_404',
              'satchmo_ext.product_feeds.views.render_to_response': 'django.shortcuts.render_to_response',
              'satchmo_ext.product_feeds.views.urlresolvers': 'django.core.urlresolvers',
              'satchmo_ext.product_feeds.views.user_passes_test': 'django.contrib.auth.decorators.user_passes_test',
              'satchmo_ext.productratings.*': 'satchmo_ext.productratings.listeners.*',
              'satchmo_ext.productratings.Comment': 'django.contrib.comments.models.Comment',
              'satchmo_ext.productratings.comment_was_posted': 'django.contrib.comments.signals.comment_was_posted',
              'satchmo_ext.productratings.comment_will_be_posted': 'django.contrib.comments.signals.comment_will_be_posted',
              'satchmo_ext.productratings.config.*': 'livesettings.*',
              'satchmo_ext.productratings.config.PRODUCT_GROUP': 'product.config.PRODUCT_GROUP',
              'satchmo_ext.productratings.config._': 'django.utils.translation.ugettext_lazy',
              'satchmo_ext.productratings.config.settings': 'django.conf.settings',
              'satchmo_ext.productratings.listeners.Akismet': 'akismet.Akismet',
              'satchmo_ext.productratings.listeners.Comment': 'django.contrib.comments.models.Comment',
              'satchmo_ext.productratings.listeners.Product': 'product.models.Product',
              'satchmo_ext.productratings.listeners.ProductRating': 'satchmo_ext.productratings.models.ProductRating',
              'satchmo_ext.productratings.listeners.Site': 'django.contrib.sites.models.Site',
              'satchmo_ext.productratings.listeners.config_value': 'livesettings.config_value',
              'satchmo_ext.productratings.listeners.logging': 'logging',
              'satchmo_ext.productratings.listeners.settings': 'django.conf.settings',
              'satchmo_ext.productratings.listeners.smart_str': 'django.utils.encoding.smart_str',
              'satchmo_ext.productratings.listeners.url_join': 'satchmo_utils.url_join',
              'satchmo_ext.productratings.listeners.urlresolvers': 'django.core.urlresolvers',
              'satchmo_ext.productratings.models.Comment': 'django.contrib.comments.models.Comment',
              'satchmo_ext.productratings.models._': 'django.utils.translation.ugettext_lazy',
              'satchmo_ext.productratings.models.add_comment_urls': 'satchmo_ext.productratings.urls.add_comment_urls',
              'satchmo_ext.productratings.models.add_product_urls': 'satchmo_ext.productratings.urls.add_product_urls',
              'satchmo_ext.productratings.models.collect_urls': 'signals_ahoy.signals.collect_urls',
              'satchmo_ext.productratings.models.config': 'satchmo_ext.productratings.config',
              'satchmo_ext.productratings.models.models': 'django.db.models',
              'satchmo_ext.productratings.models.product': 'product',
              'satchmo_ext.productratings.models.satchmo_store': 'satchmo_store',
              'satchmo_ext.productratings.models.ugettext': 'django.utils.translation.ugettext',
              'satchmo_ext.productratings.queries.Comment': 'django.contrib.comments.models.Comment',
              'satchmo_ext.productratings.queries.NotCachedError': 'keyedcache.NotCachedError',
              'satchmo_ext.productratings.queries.Product': 'product.models.Product',
              'satchmo_ext.productratings.queries.Site': 'django.contrib.sites.models.Site',
              'satchmo_ext.productratings.queries.average': 'satchmo_ext.productratings.utils.average',
              'satchmo_ext.productratings.queries.cache_get': 'keyedcache.cache_get',
              'satchmo_ext.productratings.queries.cache_set': 'keyedcache.cache_set',
              'satchmo_ext.productratings.queries.config_value': 'livesettings.config_value',
              'satchmo_ext.productratings.queries.logging': 'logging',
              'satchmo_ext.productratings.queries.math': 'math',
              'satchmo_ext.productratings.templatetags.satchmo_ratings.config_value': 'livesettings.config_value',
              'satchmo_ext.productratings.templatetags.satchmo_ratings.get_product_rating': 'satchmo_ext.productratings.utils.get_product_rating',
              'satchmo_ext.productratings.templatetags.satchmo_ratings.get_product_rating_string': 'satchmo_ext.productratings.utils.get_product_rating_string',
              'satchmo_ext.productratings.templatetags.satchmo_ratings.logging': 'logging',
              'satchmo_ext.productratings.templatetags.satchmo_ratings.render_to_string': 'django.template.loader.render_to_string',
              'satchmo_ext.productratings.templatetags.satchmo_ratings.template': 'django.template',
              'satchmo_ext.productratings.urls.*': 'django.conf.urls.defaults.*',
              'satchmo_ext.productratings.urls.logging': 'logging',
              'satchmo_ext.productratings.utils.Comment': 'django.contrib.comments.models.Comment',
              'satchmo_ext.productratings.utils.Site': 'django.contrib.sites.models.Site',
              'satchmo_ext.productratings.utils._': 'django.utils.translation.ugettext_lazy',
              'satchmo_ext.productratings.utils.logging': 'logging',
              'satchmo_ext.productratings.utils.operator': 'operator',
              'satchmo_ext.productratings.utils.settings': 'django.conf.settings',
              'satchmo_ext.productratings.views.RequestContext': 'django.template.RequestContext',
              'satchmo_ext.productratings.views.config_value': 'livesettings.config_value',
              'satchmo_ext.productratings.views.highest_rated': 'satchmo_ext.productratings.queries.highest_rated',
              'satchmo_ext.productratings.views.render_to_response': 'django.shortcuts.render_to_response',
              'satchmo_ext.recentlist.config.*': 'livesettings.*',
              'satchmo_ext.recentlist.config.PRODUCT_GROUP': 'product.config.PRODUCT_GROUP',
              'satchmo_ext.recentlist.config._': 'django.utils.translation.ugettext_lazy',
              'satchmo_ext.recentlist.context_processors.Product': 'product.models.Product',
              'satchmo_ext.recentlist.context_processors.config_value': 'livesettings.config_value',
              'satchmo_ext.recentlist.middleware.NoReverseMatch': 'django.core.urlresolvers.NoReverseMatch',
              'satchmo_ext.recentlist.middleware.config_value': 'livesettings.config_value',
              'satchmo_ext.recentlist.middleware.logging': 'logging',
              'satchmo_ext.recentlist.middleware.re': 're',
              'satchmo_ext.recentlist.middleware.reverse': 'django.core.urlresolvers.reverse',
              'satchmo_ext.recentlist.models.config': 'satchmo_ext.recentlist.config',
              'satchmo_ext.recentlist.templatetags.satchmo_recentlist.Library': 'django.template.Library',
              'satchmo_ext.recentlist.templatetags.satchmo_recentlist.Node': 'django.template.Node',
              'satchmo_ext.recentlist.templatetags.satchmo_recentlist.NodeList': 'django.template.NodeList',
              'satchmo_ext.recentlist.templatetags.satchmo_recentlist.Product': 'product.models.Product',
              'satchmo_ext.recentlist.templatetags.satchmo_recentlist.TemplateSyntaxError': 'django.template.TemplateSyntaxError',
              'satchmo_ext.recentlist.templatetags.satchmo_recentlist.config_value': 'livesettings.config_value',
              'satchmo_ext.satchmo_toolbar.listeners.Cart': 'satchmo_store.shop.models.Cart',
              'satchmo_ext.satchmo_toolbar.listeners.Contact': 'satchmo_store.contact.models.Contact',
              'satchmo_ext.satchmo_toolbar.listeners.Order': 'satchmo_store.shop.models.Order',
              'satchmo_ext.satchmo_toolbar.listeners._': 'django.utils.translation.ugettext_lazy',
              'satchmo_ext.satchmo_toolbar.listeners.datetime': 'datetime',
              'satchmo_ext.satchmo_toolbar.listeners.get_version': 'satchmo_store.get_version',
              'satchmo_ext.satchmo_toolbar.listeners.logging': 'logging',
              'satchmo_ext.satchmo_toolbar.listeners.operator': 'operator',
              'satchmo_ext.satchmo_toolbar.listeners.satchmo_context': 'satchmo_store.shop.signals.satchmo_context',
              'satchmo_ext.satchmo_toolbar.listeners.threadlocals': 'threaded_multihost.threadlocals',
              'satchmo_ext.satchmo_toolbar.models.config': 'satchmo_ext.satchmo_toolbar.config',
              'satchmo_ext.satchmo_toolbar.models.listeners': 'satchmo_ext.satchmo_toolbar.listeners',
              'satchmo_ext.tieredpricing.admin.Price_Inline': 'product.admin.Price_Inline',
              'satchmo_ext.tieredpricing.admin.PricingTier': 'satchmo_ext.tieredpricing.models.PricingTier',
              'satchmo_ext.tieredpricing.admin.Product': 'product.models.Product',
              'satchmo_ext.tieredpricing.admin.ProductOptions': 'product.admin.ProductOptions',
              'satchmo_ext.tieredpricing.admin.TieredPrice': 'satchmo_ext.tieredpricing.models.TieredPrice',
              'satchmo_ext.tieredpricing.admin._': 'django.utils.translation.ugettext_lazy',
              'satchmo_ext.tieredpricing.admin.admin': 'django.contrib.admin',
              'satchmo_ext.tieredpricing.models.CurrencyField': 'satchmo_utils.fields.CurrencyField',
              'satchmo_ext.tieredpricing.models.Decimal': 'decimal.Decimal',
              'satchmo_ext.tieredpricing.models.Group': 'django.contrib.auth.models.Group',
              'satchmo_ext.tieredpricing.models.Price': 'product.models.Price',
              'satchmo_ext.tieredpricing.models.PriceAdjustment': 'product.models.PriceAdjustment',
              'satchmo_ext.tieredpricing.models.PriceAdjustmentCalc': 'product.models.PriceAdjustmentCalc',
              'satchmo_ext.tieredpricing.models.Product': 'product.models.Product',
              'satchmo_ext.tieredpricing.models._': 'django.utils.translation.ugettext_lazy',
              'satchmo_ext.tieredpricing.models.datetime': 'datetime',
              'satchmo_ext.tieredpricing.models.logging': 'logging',
              'satchmo_ext.tieredpricing.models.models': 'django.db.models',
              'satchmo_ext.tieredpricing.models.signals': 'product.signals',
              'satchmo_ext.tieredpricing.models.threadlocals': 'threaded_multihost.threadlocals',
              'satchmo_ext.tieredpricing.tests.*': 'satchmo_ext.tieredpricing.models.*',
              'satchmo_ext.tieredpricing.tests.Decimal': 'decimal.Decimal',
              'satchmo_ext.tieredpricing.tests.Group': 'django.contrib.auth.models.Group',
              'satchmo_ext.tieredpricing.tests.Price': 'product.models.Price',
              'satchmo_ext.tieredpricing.tests.Product': 'product.models.Product',
              'satchmo_ext.tieredpricing.tests.TestCase': 'django.test.TestCase',
              'satchmo_ext.tieredpricing.tests.User': 'django.contrib.auth.models.User',
              'satchmo_ext.tieredpricing.tests.keyedcache': 'keyedcache',
              'satchmo_ext.tieredpricing.tests.set_current_user': 'threaded_multihost.threadlocals.set_current_user',
              'satchmo_ext.upsell.admin.Upsell': 'satchmo_ext.upsell.models.Upsell',
              'satchmo_ext.upsell.admin.UpsellTranslation': 'satchmo_ext.upsell.models.UpsellTranslation',
              'satchmo_ext.upsell.admin._': 'django.utils.translation.ugettext_lazy',
              'satchmo_ext.upsell.admin.admin': 'django.contrib.admin',
              'satchmo_ext.upsell.admin.get_language': 'django.utils.translation.get_language',
              'satchmo_ext.upsell.models.CachedObjectMixin': 'keyedcache.models.CachedObjectMixin',
              'satchmo_ext.upsell.models.Decimal': 'decimal.Decimal',
              'satchmo_ext.upsell.models.Product': 'product.models.Product',
              'satchmo_ext.upsell.models._': 'django.utils.translation.ugettext_lazy',
              'satchmo_ext.upsell.models.date': 'datetime.date',
              'satchmo_ext.upsell.models.datetime': 'datetime',
              'satchmo_ext.upsell.models.get_language': 'django.utils.translation.get_language',
              'satchmo_ext.upsell.models.getcontext': 'decimal.getcontext',
              'satchmo_ext.upsell.models.keyedcache': 'keyedcache',
              'satchmo_ext.upsell.models.logging': 'logging',
              'satchmo_ext.upsell.models.models': 'django.db.models',
              'satchmo_ext.upsell.models.settings': 'django.conf.settings',
              'satchmo_ext.upsell.models.ugettext': 'django.utils.translation.ugettext',
              'satchmo_ext.upsell.satchmo_cart_add_complete': 'satchmo_store.shop.signals.satchmo_cart_add_complete',
              'satchmo_ext.upsell.templatetags.satchmo_upsell.template': 'django.template',
              'satchmo_ext.upsell.views': 'satchmo_ext.upsell.views',
              'satchmo_ext.upsell.views.CartAddProhibited': 'satchmo_store.shop.exceptions.CartAddProhibited',
              'satchmo_ext.upsell.views.Decimal': 'decimal.Decimal',
              'satchmo_ext.upsell.views.Product': 'product.models.Product',
              'satchmo_ext.upsell.views._': 'django.utils.translation.ugettext_lazy',
              'satchmo_ext.upsell.views.logging': 'logging',
              'satchmo_ext.wishlist.admin.ProductWish': 'satchmo_ext.wishlist.models.ProductWish',
              'satchmo_ext.wishlist.admin._': 'django.utils.translation.ugettext_lazy',
              'satchmo_ext.wishlist.admin.admin': 'django.contrib.admin',
              'satchmo_ext.wishlist.admin.get_language': 'django.utils.translation.get_language',
              'satchmo_ext.wishlist.config.*': 'livesettings.*',
              'satchmo_ext.wishlist.config.SHOP_GROUP': 'satchmo_store.shop.config.SHOP_GROUP',
              'satchmo_ext.wishlist.config._': 'django.utils.translation.ugettext_lazy',
              'satchmo_ext.wishlist.listeners.logging': 'logging',
              'satchmo_ext.wishlist.listeners.wishlist_add': 'satchmo_ext.wishlist.views.wishlist_add',
              'satchmo_ext.wishlist.models.Contact': 'satchmo_store.contact.models.Contact',
              'satchmo_ext.wishlist.models.Product': 'product.models.Product',
              'satchmo_ext.wishlist.models._': 'django.utils.translation.ugettext_lazy',
              'satchmo_ext.wishlist.models.add_wishlist_urls': 'satchmo_ext.wishlist.urls.add_wishlist_urls',
              'satchmo_ext.wishlist.models.cart_add_view': 'satchmo_store.shop.signals.cart_add_view',
              'satchmo_ext.wishlist.models.collect_urls': 'signals_ahoy.signals.collect_urls',
              'satchmo_ext.wishlist.models.config': 'satchmo_ext.wishlist.config',
              'satchmo_ext.wishlist.models.datetime': 'datetime',
              'satchmo_ext.wishlist.models.models': 'django.db.models',
              'satchmo_ext.wishlist.models.shop': 'satchmo_store.shop',
              'satchmo_ext.wishlist.models.simplejson': 'django.utils.simplejson',
              'satchmo_ext.wishlist.models.wishlist_cart_add_listener': 'satchmo_ext.wishlist.listeners.wishlist_cart_add_listener',
              'satchmo_ext.wishlist.tests.*': 'satchmo_ext.wishlist.models.*',
              'satchmo_ext.wishlist.tests.Client': 'django.test.client.Client',
              'satchmo_ext.wishlist.tests.Contact': 'satchmo_store.contact.models.Contact',
              'satchmo_ext.wishlist.tests.Country': 'l10n.models.Country',
              'satchmo_ext.wishlist.tests.Product': 'product.models.Product',
              'satchmo_ext.wishlist.tests.TestCase': 'django.test.TestCase',
              'satchmo_ext.wishlist.tests.User': 'django.contrib.auth.models.User',
              'satchmo_ext.wishlist.tests.cache_delete': 'keyedcache.cache_delete',
              'satchmo_ext.wishlist.tests.config_get': 'livesettings.config_get',
              'satchmo_ext.wishlist.tests.config_value': 'livesettings.config_value',
              'satchmo_ext.wishlist.tests.get_filter_args': 'satchmo_utils.templatetags.get_filter_args',
              'satchmo_ext.wishlist.tests.rebuild_pricing': 'product.utils.rebuild_pricing',
              'satchmo_ext.wishlist.tests.settings': 'django.conf.settings',
              'satchmo_ext.wishlist.tests.smart_str': 'django.utils.encoding.smart_str',
              'satchmo_ext.wishlist.tests.url': 'django.core.urlresolvers.reverse',
              'satchmo_ext.wishlist.urls.*': 'django.conf.urls.defaults.*',
              'satchmo_ext.wishlist.urls.config_value': 'livesettings.config_value',
              'satchmo_ext.wishlist.urls.logging': 'logging',
              'satchmo_ext.wishlist.views.Cart': 'satchmo_store.shop.models.Cart',
              'satchmo_ext.wishlist.views.CartAddProhibited': 'satchmo_store.shop.exceptions.CartAddProhibited',
              'satchmo_ext.wishlist.views.Contact': 'satchmo_store.contact.models.Contact',
              'satchmo_ext.wishlist.views.HttpResponse': 'django.http.HttpResponse',
              'satchmo_ext.wishlist.views.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'satchmo_ext.wishlist.views.JSONEncoder': 'django.utils.simplejson.encoder.JSONEncoder',
              'satchmo_ext.wishlist.views.MultiValueDictKeyError': 'django.utils.datastructures.MultiValueDictKeyError',
              'satchmo_ext.wishlist.views.Order': 'satchmo_store.shop.models.Order',
              'satchmo_ext.wishlist.views.Product': 'product.models.Product',
              'satchmo_ext.wishlist.views.ProductWish': 'satchmo_ext.wishlist.models.ProductWish',
              'satchmo_ext.wishlist.views.RequestContext': 'django.template.RequestContext',
              'satchmo_ext.wishlist.views._': 'django.utils.translation.ugettext',
              'satchmo_ext.wishlist.views.bad_or_missing': 'satchmo_utils.views.bad_or_missing',
              'satchmo_ext.wishlist.views.find_product_template': 'product.views.find_product_template',
              'satchmo_ext.wishlist.views.logging': 'logging',
              'satchmo_ext.wishlist.views.mark_safe': 'django.utils.safestring.mark_safe',
              'satchmo_ext.wishlist.views.order_success': 'satchmo_store.shop.signals.order_success',
              'satchmo_ext.wishlist.views.product_from_post': 'satchmo_store.shop.views.cart.product_from_post',
              'satchmo_ext.wishlist.views.render_to_response': 'django.shortcuts.render_to_response',
              'satchmo_ext.wishlist.views.satchmo_cart_changed': 'satchmo_store.shop.signals.satchmo_cart_changed',
              'satchmo_ext.wishlist.views.settings': 'django.conf.settings',
              'satchmo_ext.wishlist.views.urlresolvers': 'django.core.urlresolvers',
              'satchmo_store.accounts.email-auth.ModelBackend': 'django.contrib.auth.backends.ModelBackend',
              'satchmo_store.accounts.email-auth.User': 'django.contrib.auth.models.User',
              'satchmo_store.accounts.email-auth.re': 're',
              'satchmo_store.accounts.forms.AddressBook': 'satchmo_store.contact.models.AddressBook',
              'satchmo_store.accounts.forms.AuthenticationForm': 'django.contrib.auth.forms.AuthenticationForm',
              'satchmo_store.accounts.forms.Contact': 'satchmo_store.contact.models.Contact',
              'satchmo_store.accounts.forms.ContactInfoForm': 'satchmo_store.contact.forms.ContactInfoForm',
              'satchmo_store.accounts.forms.ContactRole': 'satchmo_store.contact.models.ContactRole',
              'satchmo_store.accounts.forms.Country': 'l10n.models.Country',
              'satchmo_store.accounts.forms.PhoneNumber': 'satchmo_store.contact.models.PhoneNumber',
              'satchmo_store.accounts.forms.RegistrationProfile': 'registration.models.RegistrationProfile',
              'satchmo_store.accounts.forms.User': 'django.contrib.auth.models.User',
              'satchmo_store.accounts.forms._': 'django.utils.translation.ugettext_lazy',
              'satchmo_store.accounts.forms.authenticate': 'django.contrib.auth.authenticate',
              'satchmo_store.accounts.forms.config_value': 'livesettings.config_value',
              'satchmo_store.accounts.forms.form_init': 'signals_ahoy.signals.form_init',
              'satchmo_store.accounts.forms.form_initialdata': 'signals_ahoy.signals.form_initialdata',
              'satchmo_store.accounts.forms.forms': 'django.forms',
              'satchmo_store.accounts.forms.generate_id': 'satchmo_utils.unique_id.generate_id',
              'satchmo_store.accounts.forms.logging': 'logging',
              'satchmo_store.accounts.forms.login': 'django.contrib.auth.login',
              'satchmo_store.accounts.forms.send_welcome_email': 'satchmo_store.accounts.mail.send_welcome_email',
              'satchmo_store.accounts.forms.signals': 'satchmo_store.accounts.signals',
              'satchmo_store.accounts.forms.ugettext': 'django.utils.translation.ugettext',
              'satchmo_store.accounts.mail.Config': 'satchmo_store.shop.models.Config',
              'satchmo_store.accounts.mail.Context': 'django.template.Context',
              'satchmo_store.accounts.mail.SocketError': 'socket.error',
              'satchmo_store.accounts.mail.loader': 'django.template.loader',
              'satchmo_store.accounts.mail.logging': 'logging',
              'satchmo_store.accounts.mail.send_mail': 'django.core.mail.send_mail',
              'satchmo_store.accounts.mail.settings': 'django.conf.settings',
              'satchmo_store.accounts.mail.ugettext': 'django.utils.translation.ugettext',
              'satchmo_store.accounts.signals.django.dispatch': 'django.dispatch',
              'satchmo_store.accounts.urls.*': 'django.conf.urls.defaults.*',
              'satchmo_store.accounts.urls.accounts': 'satchmo_store.accounts',
              'satchmo_store.accounts.urls.collect_urls': 'signals_ahoy.signals.collect_urls',
              'satchmo_store.accounts.urls.config_value': 'livesettings.config_value',
              'satchmo_store.accounts.urls.urlpatterns': 'satchmo_store.contact.urls.urlpatterns',
              'satchmo_store.accounts.views.AuthenticationForm': 'django.contrib.auth.forms.AuthenticationForm',
              'satchmo_store.accounts.views.CUSTOMER_ID': 'satchmo_store.contact.CUSTOMER_ID',
              'satchmo_store.accounts.views.Config': 'satchmo_store.shop.models.Config',
              'satchmo_store.accounts.views.Contact': 'satchmo_store.contact.models.Contact',
              'satchmo_store.accounts.views.Country': 'l10n.models.Country',
              'satchmo_store.accounts.views.EmailAuthenticationForm': 'satchmo_store.accounts.forms.EmailAuthenticationForm',
              'satchmo_store.accounts.views.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'satchmo_store.accounts.views.QueryDict': 'django.http.QueryDict',
              'satchmo_store.accounts.views.REDIRECT_FIELD_NAME': 'django.contrib.auth.REDIRECT_FIELD_NAME',
              'satchmo_store.accounts.views.RegistrationAddressForm': 'satchmo_store.accounts.forms.RegistrationAddressForm',
              'satchmo_store.accounts.views.RegistrationForm': 'satchmo_store.accounts.forms.RegistrationForm',
              'satchmo_store.accounts.views.RegistrationProfile': 'registration.models.RegistrationProfile',
              'satchmo_store.accounts.views.RequestContext': 'django.template.RequestContext',
              'satchmo_store.accounts.views.RequestSite': 'django.contrib.sites.models.RequestSite',
              'satchmo_store.accounts.views.Site': 'django.contrib.sites.models.Site',
              'satchmo_store.accounts.views.User': 'django.contrib.auth.models.User',
              'satchmo_store.accounts.views._': 'django.utils.translation.ugettext_lazy',
              'satchmo_store.accounts.views.config_get_group': 'livesettings.config_get_group',
              'satchmo_store.accounts.views.config_value': 'livesettings.config_value',
              'satchmo_store.accounts.views.logging': 'logging',
              'satchmo_store.accounts.views.login': 'django.contrib.auth.login',
              'satchmo_store.accounts.views.never_cache': 'django.views.decorators.cache.never_cache',
              'satchmo_store.accounts.views.render_to_response': 'django.shortcuts.render_to_response',
              'satchmo_store.accounts.views.send_welcome_email': 'satchmo_store.accounts.mail.send_welcome_email',
              'satchmo_store.accounts.views.settings': 'django.conf.settings',
              'satchmo_store.accounts.views.signals': 'satchmo_store.accounts.signals',
              'satchmo_store.accounts.views.urlresolvers': 'django.core.urlresolvers',
              'satchmo_store.contact.admin.AddressBook': 'satchmo_store.contact.models.AddressBook',
              'satchmo_store.contact.admin.AutocompleteAdmin': 'satchmo_utils.admin.AutocompleteAdmin',
              'satchmo_store.contact.admin.Contact': 'satchmo_store.contact.models.Contact',
              'satchmo_store.contact.admin.ContactInteractionType': 'satchmo_store.contact.models.ContactInteractionType',
              'satchmo_store.contact.admin.ContactOrganization': 'satchmo_store.contact.models.ContactOrganization',
              'satchmo_store.contact.admin.ContactOrganizationRole': 'satchmo_store.contact.models.ContactOrganizationRole',
              'satchmo_store.contact.admin.ContactRole': 'satchmo_store.contact.models.ContactRole',
              'satchmo_store.contact.admin.Interaction': 'satchmo_store.contact.models.Interaction',
              'satchmo_store.contact.admin.Organization': 'satchmo_store.contact.models.Organization',
              'satchmo_store.contact.admin.PhoneNumber': 'satchmo_store.contact.models.PhoneNumber',
              'satchmo_store.contact.admin._': 'django.utils.translation.ugettext_lazy',
              'satchmo_store.contact.admin.admin': 'django.contrib.admin',
              'satchmo_store.contact.admin.get_language': 'django.utils.translation.get_language',
              'satchmo_store.contact.config.BooleanValue': 'livesettings.BooleanValue',
              'satchmo_store.contact.config.IntegerValue': 'livesettings.IntegerValue',
              'satchmo_store.contact.config.MultipleStringValue': 'livesettings.MultipleStringValue',
              'satchmo_store.contact.config.SHOP_GROUP': 'satchmo_store.shop.config.SHOP_GROUP',
              'satchmo_store.contact.config.StringValue': 'livesettings.StringValue',
              'satchmo_store.contact.config._': 'django.utils.translation.ugettext_lazy',
              'satchmo_store.contact.config.config_register': 'livesettings.config_register',
              'satchmo_store.contact.forms.AddressBook': 'satchmo_store.contact.models.AddressBook',
              'satchmo_store.contact.forms.Config': 'satchmo_store.shop.models.Config',
              'satchmo_store.contact.forms.Contact': 'satchmo_store.contact.models.Contact',
              'satchmo_store.contact.forms.ContactRole': 'satchmo_store.contact.models.ContactRole',
              'satchmo_store.contact.forms.Country': 'l10n.models.Country',
              'satchmo_store.contact.forms.Organization': 'satchmo_store.contact.models.Organization',
              'satchmo_store.contact.forms.PhoneNumber': 'satchmo_store.contact.models.PhoneNumber',
              'satchmo_store.contact.forms.Q': 'django.db.models.Q',
              'satchmo_store.contact.forms.SelectDateWidget': 'django.forms.extras.widgets.SelectDateWidget',
              'satchmo_store.contact.forms.SettingNotSet': 'livesettings.SettingNotSet',
              'satchmo_store.contact.forms.User': 'django.contrib.auth.models.User',
              'satchmo_store.contact.forms._': 'django.utils.translation.ugettext_lazy',
              'satchmo_store.contact.forms.config_get_group': 'livesettings.config_get_group',
              'satchmo_store.contact.forms.config_value': 'livesettings.config_value',
              'satchmo_store.contact.forms.datetime': 'datetime',
              'satchmo_store.contact.forms.form_init': 'signals_ahoy.signals.form_init',
              'satchmo_store.contact.forms.form_postsave': 'signals_ahoy.signals.form_postsave',
              'satchmo_store.contact.forms.forms': 'django.forms',
              'satchmo_store.contact.forms.logging': 'logging',
              'satchmo_store.contact.forms.signals': 'satchmo_store.contact.signals',
              'satchmo_store.contact.forms.ugettext': 'django.utils.translation.ugettext',
              'satchmo_store.contact.listeners': 'satchmo_store.contact.listeners',
              'satchmo_store.contact.listeners.aupostcode': 'l10n.validators.aupostcode',
              'satchmo_store.contact.listeners.capostcode': 'l10n.validators.capostcode',
              'satchmo_store.contact.listeners.forms': 'django.forms',
              'satchmo_store.contact.listeners.logging': 'logging',
              'satchmo_store.contact.listeners.signals': 'satchmo_store.contact.signals',
              'satchmo_store.contact.listeners.ukpostcode': 'l10n.validators.ukpostcode',
              'satchmo_store.contact.listeners.uspostcode': 'l10n.validators.uspostcode',
              'satchmo_store.contact.models.CUSTOMER_ID': 'satchmo_store.contact.CUSTOMER_ID',
              'satchmo_store.contact.models.Country': 'l10n.models.Country',
              'satchmo_store.contact.models.User': 'django.contrib.auth.models.User',
              'satchmo_store.contact.models._': 'django.utils.translation.ugettext_lazy',
              'satchmo_store.contact.models.config': 'satchmo_store.contact.config',
              'satchmo_store.contact.models.config_get_group': 'livesettings.config_get_group',
              'satchmo_store.contact.models.datetime': 'datetime',
              'satchmo_store.contact.models.logging': 'logging',
              'satchmo_store.contact.models.models': 'django.db.models',
              'satchmo_store.contact.models.settings': 'django.conf.settings',
              'satchmo_store.contact.models.sys': 'sys',
              'satchmo_store.contact.models.ugettext': 'django.utils.translation.ugettext',
              'satchmo_store.contact.models.urlresolvers': 'django.core.urlresolvers',
              'satchmo_store.contact.signals.django.dispatch': 'django.dispatch',
              'satchmo_store.contact.supplier.admin.RawItem': 'satchmo_store.contact.supplier.models.RawItem',
              'satchmo_store.contact.supplier.admin.SupplierOrder': 'satchmo_store.contact.supplier.models.SupplierOrder',
              'satchmo_store.contact.supplier.admin.SupplierOrderItem': 'satchmo_store.contact.supplier.models.SupplierOrderItem',
              'satchmo_store.contact.supplier.admin.SupplierOrderStatus': 'satchmo_store.contact.supplier.models.SupplierOrderStatus',
              'satchmo_store.contact.supplier.admin._': 'django.utils.translation.ugettext_lazy',
              'satchmo_store.contact.supplier.admin.admin': 'django.contrib.admin',
              'satchmo_store.contact.supplier.admin.get_language': 'django.utils.translation.get_language',
              'satchmo_store.contact.supplier.models.Contact': 'satchmo_store.contact.models.Contact',
              'satchmo_store.contact.supplier.models.Organization': 'satchmo_store.contact.models.Organization',
              'satchmo_store.contact.supplier.models._': 'django.utils.translation.ugettext_lazy',
              'satchmo_store.contact.supplier.models.datetime': 'datetime',
              'satchmo_store.contact.supplier.models.models': 'django.db.models',
              'satchmo_store.contact.templatetags.satchmo_contact.template': 'django.template',
              'satchmo_store.contact.tests.*': 'satchmo_store.contact.models.*',
              'satchmo_store.contact.tests.Config': 'satchmo_store.shop.models.Config',
              'satchmo_store.contact.tests.ContactInfoForm': 'satchmo_store.contact.forms.ContactInfoForm',
              'satchmo_store.contact.tests.Country': 'l10n.models.Country',
              'satchmo_store.contact.tests.TestCase': 'django.test.TestCase',
              'satchmo_store.contact.tests.datetime': 'datetime',
              'satchmo_store.contact.urls.*': 'django.conf.urls.defaults.*',
              'satchmo_store.contact.urls.collect_urls': 'signals_ahoy.signals.collect_urls',
              'satchmo_store.contact.urls.contact': 'satchmo_store.contact',
              'satchmo_store.contact.views.CUSTOMER_ID': 'satchmo_store.contact.CUSTOMER_ID',
              'satchmo_store.contact.views.Config': 'satchmo_store.shop.models.Config',
              'satchmo_store.contact.views.Contact': 'satchmo_store.contact.models.Contact',
              'satchmo_store.contact.views.ExtendedContactInfoForm': 'satchmo_store.contact.forms.ExtendedContactInfoForm',
              'satchmo_store.contact.views.REDIRECT_FIELD_NAME': 'django.contrib.auth.REDIRECT_FIELD_NAME',
              'satchmo_store.contact.views.RequestContext': 'django.template.RequestContext',
              'satchmo_store.contact.views.SettingNotSet': 'livesettings.SettingNotSet',
              'satchmo_store.contact.views._': 'django.utils.translation.ugettext_lazy',
              'satchmo_store.contact.views.config_get_group': 'livesettings.config_get_group',
              'satchmo_store.contact.views.config_value': 'livesettings.config_value',
              'satchmo_store.contact.views.http': 'django.http',
              'satchmo_store.contact.views.logging': 'logging',
              'satchmo_store.contact.views.login_required': 'django.contrib.auth.decorators.login_required',
              'satchmo_store.contact.views.render_to_response': 'django.shortcuts.render_to_response',
              'satchmo_store.contact.views.signals': 'satchmo_store.contact.signals',
              'satchmo_store.contact.views.urlresolvers': 'django.core.urlresolvers',
              'satchmo_store.hg': 'mercurial.hg',
              'satchmo_store.os': 'os',
              'satchmo_store.shop.SSLMiddleware.Config': 'satchmo_store.shop.models.Config',
              'satchmo_store.shop.SSLMiddleware.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'satchmo_store.shop.SSLMiddleware.get_host': 'django.http.get_host',
              'satchmo_store.shop.SSLMiddleware.request_is_secure': 'satchmo_utils.request_is_secure',
              'satchmo_store.shop.SSLMiddleware.settings': 'django.conf.settings',
              'satchmo_store.shop.admin.AutocompleteAdmin': 'satchmo_utils.admin.AutocompleteAdmin',
              'satchmo_store.shop.admin.Cart': 'satchmo_store.shop.models.Cart',
              'satchmo_store.shop.admin.CartItem': 'satchmo_store.shop.models.CartItem',
              'satchmo_store.shop.admin.CartItemDetails': 'satchmo_store.shop.models.CartItemDetails',
              'satchmo_store.shop.admin.Config': 'satchmo_store.shop.models.Config',
              'satchmo_store.shop.admin.CurrencyField': 'satchmo_utils.fields.CurrencyField',
              'satchmo_store.shop.admin.DownloadLink': 'satchmo_store.shop.models.DownloadLink',
              'satchmo_store.shop.admin.Order': 'satchmo_store.shop.models.Order',
              'satchmo_store.shop.admin.OrderAuthorization': 'satchmo_store.shop.models.OrderAuthorization',
              'satchmo_store.shop.admin.OrderItem': 'satchmo_store.shop.models.OrderItem',
              'satchmo_store.shop.admin.OrderItemDetail': 'satchmo_store.shop.models.OrderItemDetail',
              'satchmo_store.shop.admin.OrderPayment': 'satchmo_store.shop.models.OrderPayment',
              'satchmo_store.shop.admin.OrderPaymentFailure': 'satchmo_store.shop.models.OrderPaymentFailure',
              'satchmo_store.shop.admin.OrderStatus': 'satchmo_store.shop.models.OrderStatus',
              'satchmo_store.shop.admin.OrderTaxDetail': 'satchmo_store.shop.models.OrderTaxDetail',
              'satchmo_store.shop.admin.OrderVariable': 'satchmo_store.shop.models.OrderVariable',
              'satchmo_store.shop.admin._': 'django.utils.translation.ugettext_lazy',
              'satchmo_store.shop.admin.admin': 'django.contrib.admin',
              'satchmo_store.shop.admin.get_language': 'django.utils.translation.get_language',
              'satchmo_store.shop.config.BooleanValue': 'livesettings.BooleanValue',
              'satchmo_store.shop.config.ConfigurationGroup': 'livesettings.ConfigurationGroup',
              'satchmo_store.shop.config.Decimal': 'decimal.Decimal',
              'satchmo_store.shop.config.DecimalValue': 'livesettings.DecimalValue',
              'satchmo_store.shop.config.MultipleStringValue': 'livesettings.MultipleStringValue',
              'satchmo_store.shop.config.PositiveIntegerValue': 'livesettings.PositiveIntegerValue',
              'satchmo_store.shop.config.StringValue': 'livesettings.StringValue',
              'satchmo_store.shop.config._': 'django.utils.translation.ugettext_lazy',
              'satchmo_store.shop.config.config_register': 'livesettings.config_register',
              'satchmo_store.shop.config.os': 'os',
              'satchmo_store.shop.config.settings': 'django.conf.settings',
              'satchmo_store.shop.config.urlparse': 'urlparse',
              'satchmo_store.shop.context_processors.Cart': 'satchmo_store.shop.models.Cart',
              'satchmo_store.shop.context_processors.Category': 'product.models.Category',
              'satchmo_store.shop.context_processors.Config': 'satchmo_store.shop.models.Config',
              'satchmo_store.shop.context_processors.Discount': 'product.models.Discount',
              'satchmo_store.shop.context_processors.NullCart': 'satchmo_store.shop.models.NullCart',
              'satchmo_store.shop.context_processors.NullConfig': 'satchmo_store.shop.models.NullConfig',
              'satchmo_store.shop.context_processors.current_media_url': 'satchmo_utils.current_media_url',
              'satchmo_store.shop.context_processors.datetime': 'datetime',
              'satchmo_store.shop.context_processors.get_satchmo_setting': 'satchmo_store.shop.get_satchmo_setting',
              'satchmo_store.shop.context_processors.logging': 'logging',
              'satchmo_store.shop.context_processors.request_is_secure': 'satchmo_utils.request_is_secure',
              'satchmo_store.shop.context_processors.satchmo_context': 'satchmo_store.shop.signals.satchmo_context',
              'satchmo_store.shop.context_processors.site_settings': 'django.conf.settings',
              'satchmo_store.shop.exceptions._': 'django.utils.translation.gettext_lazy',
              'satchmo_store.shop.forms.Cart': 'satchmo_store.shop.models.Cart',
              'satchmo_store.shop.forms.Decimal': 'decimal.Decimal',
              'satchmo_store.shop.forms.PositiveRoundedDecimalField': 'satchmo_utils.numbers.PositiveRoundedDecimalField',
              'satchmo_store.shop.forms.Product': 'product.models.Product',
              'satchmo_store.shop.forms.RoundedDecimalError': 'satchmo_utils.numbers.RoundedDecimalError',
              'satchmo_store.shop.forms.config_value': 'livesettings.config_value',
              'satchmo_store.shop.forms.forms': 'django.forms',
              'satchmo_store.shop.forms.logging': 'logging',
              'satchmo_store.shop.forms.round_decimal': 'satchmo_utils.numbers.round_decimal',
              'satchmo_store.shop.forms.satchmo_cart_add_complete': 'satchmo_store.shop.signals.satchmo_cart_add_complete',
              'satchmo_store.shop.forms.satchmo_cart_details_query': 'satchmo_store.shop.signals.satchmo_cart_details_query',
              'satchmo_store.shop.get_satchmo_setting': 'satchmo_store.shop.satchmo_settings.get_satchmo_setting',
              'satchmo_store.shop.listeners.DownloadLink': 'satchmo_store.shop.models.DownloadLink',
              'satchmo_store.shop.listeners.Order': 'satchmo_store.shop.models.Order',
              'satchmo_store.shop.listeners.OutOfStockError': 'satchmo_store.shop.exceptions.OutOfStockError',
              'satchmo_store.shop.listeners.Product': 'product.models.Product',
              'satchmo_store.shop.listeners._': 'django.utils.translation.gettext_lazy',
              'satchmo_store.shop.listeners.application_search': 'signals_ahoy.signals.application_search',
              'satchmo_store.shop.listeners.capture_on_ship_listener': 'payment.listeners.capture_on_ship_listener',
              'satchmo_store.shop.listeners.config_value': 'livesettings.config_value',
              'satchmo_store.shop.listeners.contact_signals': 'satchmo_store.contact.signals',
              'satchmo_store.shop.listeners.default_product_search_listener': 'product.listeners.default_product_search_listener',
              'satchmo_store.shop.listeners.discount_used_listener': 'product.listeners.discount_used_listener',
              'satchmo_store.shop.listeners.logging': 'logging',
              'satchmo_store.shop.listeners.notification': 'satchmo_store.shop.notification',
              'satchmo_store.shop.listeners.product_signals': 'product.signals',
              'satchmo_store.shop.listeners.settings': 'django.conf.settings',
              'satchmo_store.shop.listeners.signals': 'satchmo_store.shop.signals',
              'satchmo_store.shop.listeners.ugettext': 'django.utils.translation.ugettext',
              'satchmo_store.shop.logging': 'logging',
              'satchmo_store.shop.management.commands.delete_all_dbs.NoArgsCommand': 'django.core.management.base.NoArgsCommand',
              'satchmo_store.shop.management.commands.delete_all_dbs._mysql': '_mysql',
              'satchmo_store.shop.management.commands.delete_all_dbs.os': 'os',
              'satchmo_store.shop.management.commands.delete_all_dbs.settings': 'django.conf.settings',
              'satchmo_store.shop.management.commands.delete_all_dbs.string': 'string',
              'satchmo_store.shop.management.commands.satchmo_check.Crypto.Cipher': 'Crypto.Cipher',
              'satchmo_store.shop.management.commands.satchmo_check.Decimal': 'decimal.Decimal',
              'satchmo_store.shop.management.commands.satchmo_check.Element': 'elementtree.ElementTree.Element',
              'satchmo_store.shop.management.commands.satchmo_check.Image': 'PIL',
              'satchmo_store.shop.management.commands.satchmo_check.NoArgsCommand': 'django.core.management.base.NoArgsCommand',
              'satchmo_store.shop.management.commands.satchmo_check.django': 'django',
              'satchmo_store.shop.management.commands.satchmo_check.get_locale_conv': 'l10n.utils.get_locale_conv',
              'satchmo_store.shop.management.commands.satchmo_check.registration': 'registration',
              'satchmo_store.shop.management.commands.satchmo_check.reportlab': 'reportlab',
              'satchmo_store.shop.management.commands.satchmo_check.satchmo_store': 'satchmo_store',
              'satchmo_store.shop.management.commands.satchmo_check.settings': 'django.conf.settings',
              'satchmo_store.shop.management.commands.satchmo_check.sorl': 'sorl',
              'satchmo_store.shop.management.commands.satchmo_check.sys': 'sys',
              'satchmo_store.shop.management.commands.satchmo_check.trml2pdf': 'trml2pdf',
              'satchmo_store.shop.management.commands.satchmo_check.yaml': 'yaml',
              'satchmo_store.shop.management.commands.satchmo_copy_static.NoArgsCommand': 'django.core.management.base.NoArgsCommand',
              'satchmo_store.shop.management.commands.satchmo_copy_static.os': 'os',
              'satchmo_store.shop.management.commands.satchmo_copy_static.satchmo_store': 'satchmo_store',
              'satchmo_store.shop.management.commands.satchmo_copy_static.shutil': 'shutil',
              'satchmo_store.shop.management.commands.satchmo_copy_templates.NoArgsCommand': 'django.core.management.base.NoArgsCommand',
              'satchmo_store.shop.management.commands.satchmo_copy_templates.os': 'os',
              'satchmo_store.shop.management.commands.satchmo_copy_templates.satchmo_store': 'satchmo_store',
              'satchmo_store.shop.management.commands.satchmo_copy_templates.shutil': 'shutil',
              'satchmo_store.shop.management.commands.satchmo_copy_templates.string': 'string',
              'satchmo_store.shop.management.commands.satchmo_copy_urls.NoArgsCommand': 'django.core.management.base.NoArgsCommand',
              'satchmo_store.shop.management.commands.satchmo_copy_urls.os': 'os',
              'satchmo_store.shop.management.commands.satchmo_copy_urls.satchmo_store': 'satchmo_store',
              'satchmo_store.shop.management.commands.satchmo_copy_urls.shutil': 'shutil',
              'satchmo_store.shop.management.commands.satchmo_load_l10n.NoArgsCommand': 'django.core.management.base.NoArgsCommand',
              'satchmo_store.shop.management.commands.satchmo_load_l10n.call_command': 'django.core.management.call_command',
              'satchmo_store.shop.management.commands.satchmo_load_store.AddressBook': 'satchmo_store.contact.models.AddressBook',
              'satchmo_store.shop.management.commands.satchmo_load_store.Category': 'product.models.Category',
              'satchmo_store.shop.management.commands.satchmo_load_store.Config': 'satchmo_store.shop.models.Config',
              'satchmo_store.shop.management.commands.satchmo_load_store.ConfigurableProduct': 'product.models.ConfigurableProduct',
              'satchmo_store.shop.management.commands.satchmo_load_store.Contact': 'satchmo_store.contact.models.Contact',
              'satchmo_store.shop.management.commands.satchmo_load_store.ContactOrganization': 'satchmo_store.contact.models.ContactOrganization',
              'satchmo_store.shop.management.commands.satchmo_load_store.ContactOrganizationRole': 'satchmo_store.contact.models.ContactOrganizationRole',
              'satchmo_store.shop.management.commands.satchmo_load_store.ContactRole': 'satchmo_store.contact.models.ContactRole',
              'satchmo_store.shop.management.commands.satchmo_load_store.Country': 'l10n.models.Country',
              'satchmo_store.shop.management.commands.satchmo_load_store.NoArgsCommand': 'django.core.management.base.NoArgsCommand',
              'satchmo_store.shop.management.commands.satchmo_load_store.Option': 'product.models.Option',
              'satchmo_store.shop.management.commands.satchmo_load_store.OptionGroup': 'product.models.OptionGroup',
              'satchmo_store.shop.management.commands.satchmo_load_store.Organization': 'satchmo_store.contact.supplier.models.Organization',
              'satchmo_store.shop.management.commands.satchmo_load_store.PhoneNumber': 'satchmo_store.contact.models.PhoneNumber',
              'satchmo_store.shop.management.commands.satchmo_load_store.Price': 'product.models.Price',
              'satchmo_store.shop.management.commands.satchmo_load_store.Product': 'product.models.Product',
              'satchmo_store.shop.management.commands.satchmo_load_store.ProductImage': 'product.models.ProductImage',
              'satchmo_store.shop.management.commands.satchmo_load_store.ProductVariation': 'product.models.ProductVariation',
              'satchmo_store.shop.management.commands.satchmo_load_store.Site': 'django.contrib.sites.models.Site',
              'satchmo_store.shop.management.commands.satchmo_load_store.User': 'django.contrib.auth.models.User',
              'satchmo_store.shop.management.commands.satchmo_load_store.settings': 'django.conf.settings',
              'satchmo_store.shop.management.commands.satchmo_load_store.sys': 'sys',
              'satchmo_store.shop.management.commands.satchmo_load_us_tax.NoArgsCommand': 'django.core.management.base.NoArgsCommand',
              'satchmo_store.shop.management.commands.satchmo_load_us_tax.call_command': 'django.core.management.call_command',
              'satchmo_store.shop.models.ConfigurationSettings': 'livesettings.ConfigurationSettings',
              'satchmo_store.shop.models.Contact': 'satchmo_store.contact.models.Contact',
              'satchmo_store.shop.models.Country': 'l10n.models.Country',
              'satchmo_store.shop.models.CurrencyField': 'satchmo_utils.fields.CurrencyField',
              'satchmo_store.shop.models.Decimal': 'decimal.Decimal',
              'satchmo_store.shop.models.Discount': 'product.models.Discount',
              'satchmo_store.shop.models.DownloadableProduct': 'product.models.DownloadableProduct',
              'satchmo_store.shop.models.PaymentChoiceCharField': 'payment.fields.PaymentChoiceCharField',
              'satchmo_store.shop.models.Price': 'product.models.Price',
              'satchmo_store.shop.models.PriceAdjustment': 'product.models.PriceAdjustment',
              'satchmo_store.shop.models.PriceAdjustmentCalc': 'product.models.PriceAdjustmentCalc',
              'satchmo_store.shop.models.Product': 'product.models.Product',
              'satchmo_store.shop.models.ROUND_CEILING': 'decimal.ROUND_CEILING',
              'satchmo_store.shop.models.ShippingChoiceCharField': 'shipping.fields.ShippingChoiceCharField',
              'satchmo_store.shop.models.Site': 'django.contrib.sites.models.Site',
              'satchmo_store.shop.models._': 'django.utils.translation.ugettext_lazy',
              'satchmo_store.shop.models.config': 'satchmo_store.shop.config',
              'satchmo_store.shop.models.config_choice_values': 'livesettings.config_choice_values',
              'satchmo_store.shop.models.config_value': 'livesettings.config_value',
              'satchmo_store.shop.models.datetime': 'datetime',
              'satchmo_store.shop.models.force_unicode': 'django.utils.encoding.force_unicode',
              'satchmo_store.shop.models.get_product_quantity_adjustments': 'product.models.get_product_quantity_adjustments',
              'satchmo_store.shop.models.get_tax_processor': 'tax.utils.get_tax_processor',
              'satchmo_store.shop.models.keyedcache': 'keyedcache',
              'satchmo_store.shop.models.listeners': 'satchmo_store.shop.listeners',
              'satchmo_store.shop.models.logging': 'logging',
              'satchmo_store.shop.models.mark_safe': 'django.utils.safestring.mark_safe',
              'satchmo_store.shop.models.models': 'django.db.models',
              'satchmo_store.shop.models.moneyfmt': 'l10n.utils.moneyfmt',
              'satchmo_store.shop.models.operator': 'operator',
              'satchmo_store.shop.models.settings': 'django.conf.settings',
              'satchmo_store.shop.models.signals': 'satchmo_store.shop.signals',
              'satchmo_store.shop.models.tax': 'tax',
              'satchmo_store.shop.models.trunc_decimal': 'satchmo_utils.numbers.trunc_decimal',
              'satchmo_store.shop.models.ugettext': 'django.utils.translation.ugettext',
              'satchmo_store.shop.models.urlresolvers': 'django.core.urlresolvers',
              'satchmo_store.shop.multihost_patch': 'threaded_multihost.multihost_patch',
              'satchmo_store.shop.notification.Config': 'satchmo_store.shop.models.Config',
              'satchmo_store.shop.notification.Context': 'django.template.Context',
              'satchmo_store.shop.notification.Decimal': 'decimal.Decimal',
              'satchmo_store.shop.notification.Discount': 'product.models.Discount',
              'satchmo_store.shop.notification.SocketError': 'socket.error',
              'satchmo_store.shop.notification._': 'django.utils.translation.ugettext',
              'satchmo_store.shop.notification.config_value': 'livesettings.config_value',
              'satchmo_store.shop.notification.loader': 'django.template.loader',
              'satchmo_store.shop.notification.logging': 'logging',
              'satchmo_store.shop.notification.send_mail': 'django.core.mail.send_mail',
              'satchmo_store.shop.notification.settings': 'django.conf.settings',
              'satchmo_store.shop.satchmo_settings.settings': 'django.conf.settings',
              'satchmo_store.shop.signals.django.dispatch': 'django.dispatch',
              'satchmo_store.shop.templatetags.messaging_tags.template': 'django.template',
              'satchmo_store.shop.templatetags.satchmo_adminapplist.models': 'django.db.models',
              'satchmo_store.shop.templatetags.satchmo_adminapplist.template': 'django.template',
              'satchmo_store.shop.templatetags.satchmo_adminorder_tags.ORDER_STATUS': 'satchmo_store.shop.models.ORDER_STATUS',
              'satchmo_store.shop.templatetags.satchmo_adminorder_tags.Order': 'satchmo_store.shop.models.Order',
              'satchmo_store.shop.templatetags.satchmo_adminorder_tags.get_satchmo_setting': 'satchmo_store.shop.get_satchmo_setting',
              'satchmo_store.shop.templatetags.satchmo_adminorder_tags.is_multihost_enabled': 'satchmo_store.shop.utils.is_multihost_enabled',
              'satchmo_store.shop.templatetags.satchmo_adminorder_tags.models': 'django.db.models',
              'satchmo_store.shop.templatetags.satchmo_adminorder_tags.template': 'django.template',
              'satchmo_store.shop.templatetags.satchmo_cart.CartTaxedTotalNode': 'tax.templatetags.satchmo_tax.CartTaxedTotalNode',
              'satchmo_store.shop.templatetags.satchmo_cart.CartitemLineTaxedTotalNode': 'tax.templatetags.satchmo_tax.CartitemLineTaxedTotalNode',
              'satchmo_store.shop.templatetags.satchmo_cart.config_value': 'livesettings.config_value',
              'satchmo_store.shop.templatetags.satchmo_cart.logging': 'logging',
              'satchmo_store.shop.templatetags.satchmo_cart.mark_safe': 'django.utils.safestring.mark_safe',
              'satchmo_store.shop.templatetags.satchmo_cart.math': 'math',
              'satchmo_store.shop.templatetags.satchmo_cart.moneyfmt': 'l10n.utils.moneyfmt',
              'satchmo_store.shop.templatetags.satchmo_cart.template': 'django.template',
              'satchmo_store.shop.templatetags.satchmo_category.Category': 'product.models.Category',
              'satchmo_store.shop.templatetags.satchmo_category.Element': 'elementtree.ElementTree.Element',
              'satchmo_store.shop.templatetags.satchmo_category.Library': 'django.template.Library',
              'satchmo_store.shop.templatetags.satchmo_category.Node': 'django.template.Node',
              'satchmo_store.shop.templatetags.satchmo_category.SubElement': 'elementtree.ElementTree.SubElement',
              'satchmo_store.shop.templatetags.satchmo_category.TemplateSyntaxError': 'django.template.TemplateSyntaxError',
              'satchmo_store.shop.templatetags.satchmo_category.get_filter_args': 'satchmo_utils.templatetags.get_filter_args',
              'satchmo_store.shop.templatetags.satchmo_category.logging': 'logging',
              'satchmo_store.shop.templatetags.satchmo_category.tostring': 'elementtree.ElementTree.tostring',
              'satchmo_store.shop.templatetags.satchmo_currency.Decimal': 'decimal.Decimal',
              'satchmo_store.shop.templatetags.satchmo_currency.InvalidOperation': 'decimal.InvalidOperation',
              'satchmo_store.shop.templatetags.satchmo_currency.config_value': 'livesettings.config_value',
              'satchmo_store.shop.templatetags.satchmo_currency.force_unicode': 'django.utils.encoding.force_unicode',
              'satchmo_store.shop.templatetags.satchmo_currency.get_filter_args': 'satchmo_utils.templatetags.get_filter_args',
              'satchmo_store.shop.templatetags.satchmo_currency.logging': 'logging',
              'satchmo_store.shop.templatetags.satchmo_currency.mark_safe': 'django.utils.safestring.mark_safe',
              'satchmo_store.shop.templatetags.satchmo_currency.moneyfmt': 'l10n.utils.moneyfmt',
              'satchmo_store.shop.templatetags.satchmo_currency.settings': 'django.conf.settings',
              'satchmo_store.shop.templatetags.satchmo_currency.template': 'django.template',
              'satchmo_store.shop.templatetags.satchmo_google.Contact': 'satchmo_store.contact.models.Contact',
              'satchmo_store.shop.templatetags.satchmo_google.Library': 'django.template.Library',
              'satchmo_store.shop.templatetags.satchmo_google.Node': 'django.template.Node',
              'satchmo_store.shop.templatetags.satchmo_google.config_value': 'livesettings.config_value',
              'satchmo_store.shop.templatetags.satchmo_google.settings': 'django.conf.settings',
              'satchmo_store.shop.templatetags.satchmo_google.sys': 'sys',
              'satchmo_store.shop.templatetags.satchmo_order.get_filter_args': 'satchmo_utils.templatetags.get_filter_args',
              'satchmo_store.shop.templatetags.satchmo_order.template': 'django.template',
              'satchmo_store.shop.templatetags.satchmo_price.Library': 'django.template.Library',
              'satchmo_store.shop.templatetags.satchmo_price.Node': 'django.template.Node',
              'satchmo_store.shop.templatetags.satchmo_price.Option': 'product.models.Option',
              'satchmo_store.shop.templatetags.satchmo_price.moneyfmt': 'l10n.utils.moneyfmt',
              'satchmo_store.shop.templatetags.satchmo_price.settings': 'django.conf.settings',
              'satchmo_store.shop.templatetags.satchmo_util.Category': 'product.models.Category',
              'satchmo_store.shop.templatetags.satchmo_util.config_choice_values': 'livesettings.config_choice_values',
              'satchmo_store.shop.templatetags.satchmo_util.config_value': 'livesettings.config_value',
              'satchmo_store.shop.templatetags.satchmo_util.forms': 'django.forms',
              'satchmo_store.shop.templatetags.satchmo_util.json_encode': 'satchmo_utils.json.json_encode',
              'satchmo_store.shop.templatetags.satchmo_util.logging': 'logging',
              'satchmo_store.shop.templatetags.satchmo_util.mark_safe': 'django.utils.safestring.mark_safe',
              'satchmo_store.shop.templatetags.satchmo_util.math': 'math',
              'satchmo_store.shop.templatetags.satchmo_util.random': 'random',
              'satchmo_store.shop.templatetags.satchmo_util.settings': 'django.conf.settings',
              'satchmo_store.shop.templatetags.satchmo_util.template': 'django.template',
              'satchmo_store.shop.templatetags.satchmo_util.trunc_decimal': 'satchmo_utils.numbers.trunc_decimal',
              'satchmo_store.shop.templatetags.satchmo_util.urlresolvers': 'django.core.urlresolvers',
              'satchmo_store.shop.tests.*': 'satchmo_store.shop.models.*',
              'satchmo_store.shop.tests.CUSTOMER_ID': 'satchmo_store.contact.CUSTOMER_ID',
              'satchmo_store.shop.tests.CartAddProhibited': 'satchmo_store.shop.exceptions.CartAddProhibited',
              'satchmo_store.shop.tests.Client': 'django.test.client.Client',
              'satchmo_store.shop.tests.Country': 'l10n.models.Country',
              'satchmo_store.shop.tests.Decimal': 'decimal.Decimal',
              'satchmo_store.shop.tests.Product': 'product.models.Product',
              'satchmo_store.shop.tests.Site': 'django.contrib.sites.models.Site',
              'satchmo_store.shop.tests.TestCase': 'django.test.TestCase',
              'satchmo_store.shop.tests.User': 'django.contrib.auth.models.User',
              'satchmo_store.shop.tests._': 'django.utils.translation.ugettext',
              'satchmo_store.shop.tests.cache_delete': 'keyedcache.cache_delete',
              'satchmo_store.shop.tests.config_get': 'livesettings.config_get',
              'satchmo_store.shop.tests.config_value': 'livesettings.config_value',
              'satchmo_store.shop.tests.datetime': 'datetime',
              'satchmo_store.shop.tests.doctest': 'doctest',
              'satchmo_store.shop.tests.get_current_request': 'threaded_multihost.threadlocals.get_current_request',
              'satchmo_store.shop.tests.get_filter_args': 'satchmo_utils.templatetags.get_filter_args',
              'satchmo_store.shop.tests.get_satchmo_setting': 'satchmo_store.shop.get_satchmo_setting',
              'satchmo_store.shop.tests.keyedcache': 'keyedcache',
              'satchmo_store.shop.tests.mail': 'django.core.mail',
              'satchmo_store.shop.tests.rebuild_pricing': 'product.utils.rebuild_pricing',
              'satchmo_store.shop.tests.settings': 'django.conf.settings',
              'satchmo_store.shop.tests.signals': 'satchmo_store.shop.signals',
              'satchmo_store.shop.tests.smart_str': 'django.utils.encoding.smart_str',
              'satchmo_store.shop.tests.url': 'django.core.urlresolvers.reverse',
              'satchmo_store.shop.urls.*': 'django.conf.urls.defaults.*',
              'satchmo_store.shop.urls.collect_urls': 'signals_ahoy.signals.collect_urls',
              'satchmo_store.shop.urls.productpatterns': 'product.urls.urlpatterns',
              'satchmo_store.shop.urls.settings': 'django.conf.settings',
              'satchmo_store.shop.urls.shop': 'satchmo_store.shop',
              'satchmo_store.shop.urls.sitemaps': 'satchmo_store.shop.views.sitemaps.sitemaps',
              'satchmo_store.shop.utils.SiteManager': 'django.contrib.sites.models.SiteManager',
              'satchmo_store.shop.views.cart.Cart': 'satchmo_store.shop.models.Cart',
              'satchmo_store.shop.views.cart.CartAddProhibited': 'satchmo_store.shop.exceptions.CartAddProhibited',
              'satchmo_store.shop.views.cart.CartItem': 'satchmo_store.shop.models.CartItem',
              'satchmo_store.shop.views.cart.Config': 'satchmo_store.shop.models.Config',
              'satchmo_store.shop.views.cart.Decimal': 'decimal.Decimal',
              'satchmo_store.shop.views.cart.Http404': 'django.http.Http404',
              'satchmo_store.shop.views.cart.HttpResponse': 'django.http.HttpResponse',
              'satchmo_store.shop.views.cart.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'satchmo_store.shop.views.cart.JSONEncoder': 'django.utils.simplejson.encoder.JSONEncoder',
              'satchmo_store.shop.views.cart.MultiValueDictKeyError': 'django.utils.datastructures.MultiValueDictKeyError',
              'satchmo_store.shop.views.cart.NullCart': 'satchmo_store.shop.models.NullCart',
              'satchmo_store.shop.views.cart.NullCartItem': 'satchmo_store.shop.models.NullCartItem',
              'satchmo_store.shop.views.cart.OptionManager': 'product.models.OptionManager',
              'satchmo_store.shop.views.cart.Product': 'product.models.Product',
              'satchmo_store.shop.views.cart.RequestContext': 'django.template.RequestContext',
              'satchmo_store.shop.views.cart.RoundedDecimalError': 'satchmo_utils.numbers.RoundedDecimalError',
              'satchmo_store.shop.views.cart._': 'django.utils.translation.ugettext',
              'satchmo_store.shop.views.cart.bad_or_missing': 'satchmo_utils.views.bad_or_missing',
              'satchmo_store.shop.views.cart.config_value': 'livesettings.config_value',
              'satchmo_store.shop.views.cart.find_best_auto_discount': 'product.utils.find_best_auto_discount',
              'satchmo_store.shop.views.cart.find_product_template': 'product.views.find_product_template',
              'satchmo_store.shop.views.cart.forms': 'satchmo_store.shop.forms',
              'satchmo_store.shop.views.cart.logging': 'logging',
              'satchmo_store.shop.views.cart.mark_safe': 'django.utils.safestring.mark_safe',
              'satchmo_store.shop.views.cart.never_cache': 'django.views.decorators.cache.never_cache',
              'satchmo_store.shop.views.cart.optionids_from_post': 'product.views.optionids_from_post',
              'satchmo_store.shop.views.cart.render_to_response': 'django.shortcuts.render_to_response',
              'satchmo_store.shop.views.cart.round_decimal': 'satchmo_utils.numbers.round_decimal',
              'satchmo_store.shop.views.cart.satchmo_cart_add_complete': 'satchmo_store.shop.signals.satchmo_cart_add_complete',
              'satchmo_store.shop.views.cart.satchmo_cart_changed': 'satchmo_store.shop.signals.satchmo_cart_changed',
              'satchmo_store.shop.views.cart.satchmo_cart_details_query': 'satchmo_store.shop.signals.satchmo_cart_details_query',
              'satchmo_store.shop.views.cart.urlresolvers': 'django.core.urlresolvers',
              'satchmo_store.shop.views.comments.Comment': 'django.contrib.comments.models.Comment',
              'satchmo_store.shop.views.comments.ContentType': 'django.contrib.contenttypes.models.ContentType',
              'satchmo_store.shop.views.comments.Http404': 'django.http.Http404',
              'satchmo_store.shop.views.comments.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'satchmo_store.shop.views.comments.Site': 'django.contrib.sites.models.Site',
              'satchmo_store.shop.views.comments._': 'django.utils.translation.ugettext_lazy',
              'satchmo_store.shop.views.comments.getLogger': 'logging.getLogger',
              'satchmo_store.shop.views.comments.post_comment': 'django.contrib.comments.views.comments.post_comment',
              'satchmo_store.shop.views.comments.settings': 'django.conf.settings',
              'satchmo_store.shop.views.contact.Config': 'satchmo_store.shop.models.Config',
              'satchmo_store.shop.views.contact.Context': 'django.template.Context',
              'satchmo_store.shop.views.contact.RequestContext': 'django.template.RequestContext',
              'satchmo_store.shop.views.contact.SocketError': 'socket.error',
              'satchmo_store.shop.views.contact._': 'django.utils.translation.ugettext_lazy',
              'satchmo_store.shop.views.contact.forms': 'django.forms',
              'satchmo_store.shop.views.contact.get_satchmo_setting': 'satchmo_store.shop.get_satchmo_setting',
              'satchmo_store.shop.views.contact.http': 'django.http',
              'satchmo_store.shop.views.contact.loader': 'django.template.loader',
              'satchmo_store.shop.views.contact.logging': 'logging',
              'satchmo_store.shop.views.contact.render_to_response': 'django.shortcuts.render_to_response',
              'satchmo_store.shop.views.contact.send_mail': 'django.core.mail.send_mail',
              'satchmo_store.shop.views.contact.settings': 'django.conf.settings',
              'satchmo_store.shop.views.contact.urlresolvers': 'django.core.urlresolvers',
              'satchmo_store.shop.views.download.DownloadLink': 'satchmo_store.shop.models.DownloadLink',
              'satchmo_store.shop.views.download.HttpResponse': 'django.http.HttpResponse',
              'satchmo_store.shop.views.download.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'satchmo_store.shop.views.download.RequestContext': 'django.template.RequestContext',
              'satchmo_store.shop.views.download._': 'django.utils.translation.ugettext_lazy',
              'satchmo_store.shop.views.download.loader': 'django.template.loader',
              'satchmo_store.shop.views.download.mimetypes': 'mimetypes',
              'satchmo_store.shop.views.download.os': 'os',
              'satchmo_store.shop.views.download.os.path': 'os.path',
              'satchmo_store.shop.views.download.re': 're',
              'satchmo_store.shop.views.download.render_to_response': 'django.shortcuts.render_to_response',
              'satchmo_store.shop.views.download.urlresolvers': 'django.core.urlresolvers',
              'satchmo_store.shop.views.home.EmptyPage': 'django.core.paginator.EmptyPage',
              'satchmo_store.shop.views.home.Paginator': 'django.core.paginator.Paginator',
              'satchmo_store.shop.views.home.RequestContext': 'django.template.RequestContext',
              'satchmo_store.shop.views.home._': 'django.utils.translation.ugettext',
              'satchmo_store.shop.views.home.bad_or_missing': 'satchmo_utils.views.bad_or_missing',
              'satchmo_store.shop.views.home.config_value': 'livesettings.config_value',
              'satchmo_store.shop.views.home.display_featured': 'product.views.display_featured',
              'satchmo_store.shop.views.home.render_to_response': 'django.shortcuts.render_to_response',
              'satchmo_store.shop.views.orders.Contact': 'satchmo_store.contact.models.Contact',
              'satchmo_store.shop.views.orders.Order': 'satchmo_store.shop.models.Order',
              'satchmo_store.shop.views.orders.RequestContext': 'django.template.RequestContext',
              'satchmo_store.shop.views.orders._': 'django.utils.translation.ugettext_lazy',
              'satchmo_store.shop.views.orders.bad_or_missing': 'satchmo_utils.views.bad_or_missing',
              'satchmo_store.shop.views.orders.config_value': 'livesettings.config_value',
              'satchmo_store.shop.views.orders.login_required': 'django.contrib.auth.decorators.login_required',
              'satchmo_store.shop.views.orders.render_to_response': 'django.shortcuts.render_to_response',
              'satchmo_store.shop.views.search.Product': 'product.models.Product',
              'satchmo_store.shop.views.search.RequestContext': 'django.template.RequestContext',
              'satchmo_store.shop.views.search.application_search': 'signals_ahoy.signals.application_search',
              'satchmo_store.shop.views.search.render_to_response': 'django.shortcuts.render_to_response',
              'satchmo_store.shop.views.search.signals': 'satchmo_store.shop.signals',
              'satchmo_store.shop.views.sitemaps.Category': 'product.models.Category',
              'satchmo_store.shop.views.sitemaps.Product': 'product.models.Product',
              'satchmo_store.shop.views.sitemaps.Sitemap': 'django.contrib.sitemaps.Sitemap',
              'satchmo_store.shop.views.sitemaps.get_satchmo_setting': 'satchmo_store.shop.get_satchmo_setting',
              'satchmo_store.shop.views.sitemaps.settings': 'django.conf.settings',
              'satchmo_store.shop.views.sitemaps.urlresolvers': 'django.core.urlresolvers',
              'satchmo_store.shop.views.smart.Cart': 'satchmo_store.shop.models.Cart',
              'satchmo_store.shop.views.smart.cart': 'satchmo_store.shop.views.cart',
              'satchmo_store.shop.views.smart.cart_add_view': 'satchmo_store.shop.signals.cart_add_view',
              'satchmo_store.shop.views.smart.logging': 'logging',
              'satchmo_store.ui': 'mercurial.ui',
              'satchmo_store.urls.*': 'django.conf.urls.defaults.*',
              'satchmo_store.urls.base.*': 'django.conf.urls.defaults.*',
              'satchmo_store.urls.base.collect_urls': 'signals_ahoy.signals.collect_urls',
              'satchmo_store.urls.base.get_satchmo_setting': 'satchmo_store.shop.get_satchmo_setting',
              'satchmo_store.urls.base.logging': 'logging',
              'satchmo_store.urls.base.prodpatterns': 'product.urls.base.adminpatterns',
              'satchmo_store.urls.base.satchmo_store': 'satchmo_store',
              'satchmo_store.urls.base.shippatterns': 'shipping.urls.adminpatterns',
              'satchmo_store.urls.basepatterns': 'satchmo_store.urls.base.urlpatterns',
              'satchmo_store.urls.default.*': 'django.conf.urls.defaults.*',
              'satchmo_store.urls.default.admin': 'django.contrib.admin',
              'satchmo_store.urls.default.logging': 'logging',
              'satchmo_store.urls.default.settings': 'django.conf.settings',
              'satchmo_store.urls.defaultpatterns': 'satchmo_store.urls.default.urlpatterns',
              'satchmo_store.urls.get_satchmo_setting': 'satchmo_store.shop.get_satchmo_setting',
              'satchmo_store.urls.shoppatterns': 'satchmo_store.shop.urls.urlpatterns',
              'satchmo_store.urls.sitemaps': 'satchmo_store.shop.views.sitemaps.sitemaps',
              'satchmo_store.urls.urlhelper': 'satchmo_utils.urlhelper',
              'satchmo_utils.Decimal': 'decimal.Decimal',
              'satchmo_utils.InvalidOperation': 'decimal.InvalidOperation',
              'satchmo_utils.ROUND_HALF_UP': 'decimal.ROUND_HALF_UP',
              'satchmo_utils.admin.HttpResponse': 'django.http.HttpResponse',
              'satchmo_utils.admin.HttpResponseNotFound': 'django.http.HttpResponseNotFound',
              'satchmo_utils.admin.Message': 'django.contrib.auth.models.Message',
              'satchmo_utils.admin.QuerySet': 'django.db.models.query.QuerySet',
              'satchmo_utils.admin.admin': 'django.contrib.admin',
              'satchmo_utils.admin.escape': 'django.utils.html.escape',
              'satchmo_utils.admin.forms': 'django.forms',
              'satchmo_utils.admin.mark_safe': 'django.utils.safestring.mark_safe',
              'satchmo_utils.admin.models': 'django.db.models',
              'satchmo_utils.admin.operator': 'operator',
              'satchmo_utils.admin.settings': 'django.conf.settings',
              'satchmo_utils.admin.smart_str': 'django.utils.encoding.smart_str',
              'satchmo_utils.admin.truncate_words': 'django.utils.text.truncate_words',
              'satchmo_utils.admin.url': 'django.conf.urls.defaults.url',
              'satchmo_utils.cookies.Morsel': 'Cookie.Morsel',
              'satchmo_utils.cookies.SimpleCookie': 'Cookie.SimpleCookie',
              'satchmo_utils.cookies.copy': 'copy',
              'satchmo_utils.datetime': 'datetime',
              'satchmo_utils.dynamic.Site': 'django.contrib.sites.models.Site',
              'satchmo_utils.dynamic.logging': 'logging',
              'satchmo_utils.dynamic.url_join': 'satchmo_utils.url_join',
              'satchmo_utils.dynamic.urlresolvers': 'django.core.urlresolvers',
              'satchmo_utils.fields.CurrencyWidget': 'satchmo_utils.widgets.CurrencyWidget',
              'satchmo_utils.fields.DecimalField': 'django.db.models.fields.DecimalField',
              'satchmo_utils.fields.forms': 'django.forms',
              'satchmo_utils.fields.logging': 'logging',
              'satchmo_utils.json.*': 'decimal.*',
              'satchmo_utils.json.DateTimeAwareJSONEncoder': 'django.core.serializers.json.DateTimeAwareJSONEncoder',
              'satchmo_utils.json.json': 'django.utils.simplejson',
              'satchmo_utils.json.models': 'django.db.models',
              'satchmo_utils.json.types': 'types',
              'satchmo_utils.logging': 'logging',
              'satchmo_utils.models': 'django.db.models',
              'satchmo_utils.numbers.Decimal': 'decimal.Decimal',
              'satchmo_utils.numbers.InvalidOperation': 'decimal.InvalidOperation',
              'satchmo_utils.numbers.ROUND_DOWN': 'decimal.ROUND_DOWN',
              'satchmo_utils.numbers.ROUND_HALF_UP': 'decimal.ROUND_HALF_UP',
              'satchmo_utils.numbers._': 'django.utils.translation.ugettext',
              'satchmo_utils.numbers.config_value': 'livesettings.config_value',
              'satchmo_utils.numbers.forms': 'django.forms',
              'satchmo_utils.numbers.getcontext': 'decimal.getcontext',
              'satchmo_utils.numbers.logging': 'logging',
              'satchmo_utils.numbers.sys': 'sys',
              'satchmo_utils.os': 'os',
              'satchmo_utils.random': 'random',
              'satchmo_utils.settings': 'django.conf.settings',
              'satchmo_utils.sslurllib.httplib': 'httplib',
              'satchmo_utils.sslurllib.logging': 'logging',
              'satchmo_utils.sslurllib.socket': 'socket',
              'satchmo_utils.sslurllib.ssl': 'ssl',
              'satchmo_utils.sslurllib.sys': 'sys',
              'satchmo_utils.sslurllib.urllib2': 'urllib2',
              'satchmo_utils.sys': 'sys',
              'satchmo_utils.templatetags.normalize_decimal.RoundedDecimalError': 'satchmo_utils.numbers.RoundedDecimalError',
              'satchmo_utils.templatetags.normalize_decimal.get_filter_args': 'satchmo_utils.templatetags.get_filter_args',
              'satchmo_utils.templatetags.normalize_decimal.logging': 'logging',
              'satchmo_utils.templatetags.normalize_decimal.mark_safe': 'django.utils.safestring.mark_safe',
              'satchmo_utils.templatetags.normalize_decimal.round_decimal': 'satchmo_utils.numbers.round_decimal',
              'satchmo_utils.templatetags.normalize_decimal.template': 'django.template',
              'satchmo_utils.tests.Decimal': 'decimal.Decimal',
              'satchmo_utils.tests.RoundedDecimalError': 'satchmo_utils.numbers.RoundedDecimalError',
              'satchmo_utils.tests.TestCase': 'django.test.TestCase',
              'satchmo_utils.tests.round_decimal': 'satchmo_utils.numbers.round_decimal',
              'satchmo_utils.tests.trunc_decimal': 'satchmo_utils.numbers.trunc_decimal',
              'satchmo_utils.thumbnail.config.BooleanValue': 'livesettings.BooleanValue',
              'satchmo_utils.thumbnail.config.ConfigurationGroup': 'livesettings.ConfigurationGroup',
              'satchmo_utils.thumbnail.config.IntegerValue': 'livesettings.IntegerValue',
              'satchmo_utils.thumbnail.config._': 'django.utils.translation.ugettext_lazy',
              'satchmo_utils.thumbnail.config.config_register_list': 'livesettings.config_register_list',
              'satchmo_utils.thumbnail.field.ImageField': 'django.db.models.fields.files.ImageField',
              'satchmo_utils.thumbnail.field.SettingNotSet': 'livesettings.SettingNotSet',
              'satchmo_utils.thumbnail.field.config': 'satchmo_utils.thumbnail.config',
              'satchmo_utils.thumbnail.field.config_value': 'livesettings.config_value',
              'satchmo_utils.thumbnail.field.logging': 'logging',
              'satchmo_utils.thumbnail.field.normalize_dir': 'satchmo_utils.normalize_dir',
              'satchmo_utils.thumbnail.field.os': 'os',
              'satchmo_utils.thumbnail.field.remove_model_thumbnails': 'satchmo_utils.thumbnail.utils.remove_model_thumbnails',
              'satchmo_utils.thumbnail.field.rename_by_field': 'satchmo_utils.thumbnail.utils.rename_by_field',
              'satchmo_utils.thumbnail.field.signals': 'django.db.models.signals',
              'satchmo_utils.thumbnail.templatetags.satchmo_thumbnail.TemplateSyntaxError': 'django.template.TemplateSyntaxError',
              'satchmo_utils.thumbnail.templatetags.satchmo_thumbnail.get_image_size': 'satchmo_utils.thumbnail.utils.get_image_size',
              'satchmo_utils.thumbnail.templatetags.satchmo_thumbnail.make_thumbnail': 'satchmo_utils.thumbnail.utils.make_thumbnail',
              'satchmo_utils.thumbnail.templatetags.satchmo_thumbnail.settings': 'django.conf.settings',
              'satchmo_utils.thumbnail.templatetags.satchmo_thumbnail.template': 'django.template',
              'satchmo_utils.thumbnail.text.re': 're',
              'satchmo_utils.thumbnail.utils.Image': 'PIL.Image',
              'satchmo_utils.thumbnail.utils.ImageField': 'django.db.models.fields.files.ImageField',
              'satchmo_utils.thumbnail.utils.URLify': 'satchmo_utils.thumbnail.text.URLify',
              'satchmo_utils.thumbnail.utils.config_value': 'livesettings.config_value',
              'satchmo_utils.thumbnail.utils.fnmatch': 'fnmatch',
              'satchmo_utils.thumbnail.utils.get_cache': 'django.core.cache.get_cache',
              'satchmo_utils.thumbnail.utils.logging': 'logging',
              'satchmo_utils.thumbnail.utils.os': 'os',
              'satchmo_utils.thumbnail.utils.settings': 'django.conf.settings',
              'satchmo_utils.thumbnail.utils.shutil': 'shutil',
              'satchmo_utils.thumbnail.utils.sys': 'sys',
              'satchmo_utils.thumbnail.utils.urlparse': 'urlparse',
              'satchmo_utils.thumbnail.widgets._': 'django.utils.translation.ugettext_lazy',
              'satchmo_utils.thumbnail.widgets.forms': 'django.forms',
              'satchmo_utils.thumbnail.widgets.make_admin_thumbnail': 'satchmo_utils.thumbnail.utils.make_admin_thumbnail',
              'satchmo_utils.thumbnail.widgets.mark_safe': 'django.utils.safestring.mark_safe',
              'satchmo_utils.thumbnail.widgets.settings': 'django.conf.settings',
              'satchmo_utils.types': 'types',
              'satchmo_utils.unique_id.User': 'django.contrib.auth.models.User',
              'satchmo_utils.unique_id.force_unicode': 'django.utils.encoding.force_unicode',
              'satchmo_utils.unique_id.name2codepoint': 'htmlentitydefs.name2codepoint',
              'satchmo_utils.unique_id.random_string': 'satchmo_utils.random_string',
              'satchmo_utils.unique_id.re': 're',
              'satchmo_utils.unique_id.smart_unicode': 'django.utils.encoding.smart_unicode',
              'satchmo_utils.unique_id.unicodedata': 'unicodedata',
              'satchmo_utils.validators.ValidationError': 'django.core.validators.ValidationError',
              'satchmo_utils.validators._': 'django.utils.translation.ugettext_lazy',
              'satchmo_utils.views.RequestContext': 'django.template.RequestContext',
              'satchmo_utils.views._': 'django.utils.translation.ugettext',
              'satchmo_utils.views.http': 'django.http',
              'satchmo_utils.views.loader': 'django.template.loader',
              'satchmo_utils.views.re': 're',
              'satchmo_utils.widgets.Decimal': 'decimal.Decimal',
              'satchmo_utils.widgets._': 'django.utils.translation.ugettext_lazy',
              'satchmo_utils.widgets.config_value': 'livesettings.config_value',
              'satchmo_utils.widgets.forms': 'django.forms',
              'satchmo_utils.widgets.logging': 'logging',
              'satchmo_utils.widgets.mark_safe': 'django.utils.safestring.mark_safe',
              'satchmo_utils.widgets.round_decimal': 'satchmo_utils.numbers.round_decimal',
              'shipping.config.*': 'livesettings.*',
              'shipping.config._': 'django.utils.translation.ugettext_lazy',
              'shipping.config.get_satchmo_setting': 'satchmo_store.shop.get_satchmo_setting',
              'shipping.config.is_string_like': 'satchmo_utils.is_string_like',
              'shipping.config.load_module': 'satchmo_utils.load_module',
              'shipping.config.noship': 'shipping.modules.no.shipper',
              'shipping.config.settings': 'django.conf.settings',
              'shipping.fields.SettingNotSet': 'livesettings.SettingNotSet',
              'shipping.fields.config_choice_values': 'livesettings.config_choice_values',
              'shipping.fields.config_value_safe': 'livesettings.config_value_safe',
              'shipping.fields.models': 'django.db.models',
              'shipping.models.config': 'shipping.config',
              'shipping.modules.canadapost.config.*': 'livesettings.*',
              'shipping.modules.canadapost.config._': 'django.utils.translation.ugettext_lazy',
              'shipping.modules.canadapost.config_choice_values': 'livesettings.config_choice_values',
              'shipping.modules.canadapost.shipper': 'shipping.modules.canadapost.shipper',
              'shipping.modules.canadapost.shipper.BaseShipper': 'shipping.modules.base.BaseShipper',
              'shipping.modules.canadapost.shipper.Config': 'satchmo.shop.models.Config',
              'shipping.modules.canadapost.shipper.Context': 'django.template.Context',
              'shipping.modules.canadapost.shipper.Decimal': 'decimal.Decimal',
              'shipping.modules.canadapost.shipper._': 'django.utils.translation.ugettext',
              'shipping.modules.canadapost.shipper.cache': 'django.core.cache.cache',
              'shipping.modules.canadapost.shipper.config_get_group': 'livesettings.config_get_group',
              'shipping.modules.canadapost.shipper.config_value': 'livesettings.config_value',
              'shipping.modules.canadapost.shipper.datetime': 'datetime',
              'shipping.modules.canadapost.shipper.fromstring': 'elementtree.ElementTree.fromstring',
              'shipping.modules.canadapost.shipper.loader': 'django.template.loader',
              'shipping.modules.canadapost.shipper.logging': 'logging',
              'shipping.modules.canadapost.shipper.mark_safe': 'django.utils.safestring.mark_safe',
              'shipping.modules.canadapost.shipper.tostring': 'elementtree.ElementTree.tostring',
              'shipping.modules.canadapost.shipper.urllib2': 'urllib2',
              'shipping.modules.dummy.shipper': 'shipping.modules.dummy.shipper',
              'shipping.modules.dummy.shipper.BaseShipper': 'shipping.modules.base.BaseShipper',
              'shipping.modules.dummy.shipper.Decimal': 'decimal.Decimal',
              'shipping.modules.dummy.shipper._': 'django.utils.translation.ugettext',
              'shipping.modules.fedex.config.*': 'livesettings.*',
              'shipping.modules.fedex.config._': 'django.utils.translation.ugettext_lazy',
              'shipping.modules.fedex.config_choice_values': 'livesettings.config_choice_values',
              'shipping.modules.fedex.shipper': 'shipping.modules.fedex.shipper',
              'shipping.modules.fedex.shipper.BaseShipper': 'shipping.modules.base.BaseShipper',
              'shipping.modules.fedex.shipper.Config': 'satchmo_store.shop.models.Config',
              'shipping.modules.fedex.shipper.Context': 'django.template.Context',
              'shipping.modules.fedex.shipper.Decimal': 'decimal.Decimal',
              'shipping.modules.fedex.shipper._': 'django.utils.translation.ugettext',
              'shipping.modules.fedex.shipper.cache': 'django.core.cache.cache',
              'shipping.modules.fedex.shipper.config_get_group': 'livesettings.config_get_group',
              'shipping.modules.fedex.shipper.loader': 'django.template.loader',
              'shipping.modules.fedex.shipper.logging': 'logging',
              'shipping.modules.fedex.shipper.mark_safe': 'django.utils.safestring.mark_safe',
              'shipping.modules.fedex.shipper.minidom': 'xml.dom.minidom',
              'shipping.modules.fedex.shipper.signals': 'shipping.signals',
              'shipping.modules.fedex.shipper.urllib2': 'urllib2',
              'shipping.modules.flat.config.*': 'livesettings.*',
              'shipping.modules.flat.config._': 'django.utils.translation.ugettext_lazy',
              'shipping.modules.flat.shipper': 'shipping.modules.flat.shipper',
              'shipping.modules.flat.shipper.BaseShipper': 'shipping.modules.base.BaseShipper',
              'shipping.modules.flat.shipper.Decimal': 'decimal.Decimal',
              'shipping.modules.flat.shipper.config_value': 'livesettings.config_value',
              'shipping.modules.flat.shipper.ugettext': 'django.utils.translation.ugettext',
              'shipping.modules.flat.shipper.ugettext_lazy': 'django.utils.translation.ugettext_lazy',
              'shipping.modules.no.shipper.BaseShipper': 'shipping.modules.base.BaseShipper',
              'shipping.modules.no.shipper.Decimal': 'decimal.Decimal',
              'shipping.modules.no.shipper._': 'django.utils.translation.ugettext_lazy',
              'shipping.modules.no.shipper.ugettext': 'django.utils.translation.ugettext',
              'shipping.modules.per.config.*': 'livesettings.*',
              'shipping.modules.per.config._': 'django.utils.translation.ugettext_lazy',
              'shipping.modules.per.shipper': 'shipping.modules.per.shipper',
              'shipping.modules.per.shipper.BaseShipper': 'shipping.modules.base.BaseShipper',
              'shipping.modules.per.shipper.Decimal': 'decimal.Decimal',
              'shipping.modules.per.shipper.config_value': 'livesettings.config_value',
              'shipping.modules.per.shipper.ugettext': 'django.utils.translation.ugettext',
              'shipping.modules.per.shipper.ugettext_lazy': 'django.utils.translation.ugettext_lazy',
              'shipping.modules.productshipping.Carrier': 'shipping.modules.productshipping.models.Carrier',
              'shipping.modules.productshipping.Shipper': 'shipping.modules.productshipping.models.Shipper',
              'shipping.modules.productshipping.admin.Carrier': 'shipping.modules.productshipping.models.Carrier',
              'shipping.modules.productshipping.admin.CarrierTranslation': 'shipping.modules.productshipping.models.CarrierTranslation',
              'shipping.modules.productshipping.admin.Product': 'product.models.Product',
              'shipping.modules.productshipping.admin.ProductOptions': 'product.admin.ProductOptions',
              'shipping.modules.productshipping.admin.ProductShippingPrice': 'shipping.modules.productshipping.models.ProductShippingPrice',
              'shipping.modules.productshipping.admin._': 'django.utils.translation.ugettext_lazy',
              'shipping.modules.productshipping.admin.admin': 'django.contrib.admin',
              'shipping.modules.productshipping.admin.get_language': 'django.utils.translation.get_language',
              'shipping.modules.productshipping.config.*': 'livesettings.*',
              'shipping.modules.productshipping.config.SHIPPING_ACTIVE': 'shipping.config.SHIPPING_ACTIVE',
              'shipping.modules.productshipping.config._': 'django.utils.translation.ugettext_lazy',
              'shipping.modules.productshipping.config.logging': 'logging',
              'shipping.modules.productshipping.load_once': 'satchmo_utils.load_once',
              'shipping.modules.productshipping.models.BaseShipper': 'shipping.modules.base.BaseShipper',
              'shipping.modules.productshipping.models.Decimal': 'decimal.Decimal',
              'shipping.modules.productshipping.models.Product': 'product.models.Product',
              'shipping.modules.productshipping.models._': 'django.utils.translation.ugettext_lazy',
              'shipping.modules.productshipping.models.config': 'shipping.modules.productshipping.config',
              'shipping.modules.productshipping.models.datetime': 'datetime',
              'shipping.modules.productshipping.models.get_language': 'django.utils.translation.get_language',
              'shipping.modules.productshipping.models.logging': 'logging',
              'shipping.modules.productshipping.models.models': 'django.db.models',
              'shipping.modules.productshipping.models.operator': 'operator',
              'shipping.modules.productshipping.models.settings': 'django.conf.settings',
              'shipping.modules.productshipping.templatetags.product_shipping_tags.Carrier': 'shipping.modules.productshipping.models.Carrier',
              'shipping.modules.productshipping.templatetags.product_shipping_tags.get_filter_args': 'satchmo_utils.templatetags.get_filter_args',
              'shipping.modules.productshipping.templatetags.product_shipping_tags.mark_safe': 'django.utils.safestring.mark_safe',
              'shipping.modules.productshipping.templatetags.product_shipping_tags.moneyfmt': 'l10n.utils.moneyfmt',
              'shipping.modules.productshipping.templatetags.product_shipping_tags.template': 'django.template',
              'shipping.modules.productshipping.tests.Carrier': 'shipping.modules.productshipping.models.Carrier',
              'shipping.modules.productshipping.tests.Decimal': 'decimal.Decimal',
              'shipping.modules.productshipping.tests.Product': 'product.models.Product',
              'shipping.modules.productshipping.tests.ProductShippingPrice': 'shipping.modules.productshipping.models.ProductShippingPrice',
              'shipping.modules.productshipping.tests.Shipper': 'shipping.modules.productshipping.models.Shipper',
              'shipping.modules.productshipping.tests.TestCase': 'django.test.TestCase',
              'shipping.modules.productshipping.tests.datetime': 'datetime.datetime',
              'shipping.modules.tiered.Carrier': 'shipping.modules.tiered.models.Carrier',
              'shipping.modules.tiered.Shipper': 'shipping.modules.tiered.models.Shipper',
              'shipping.modules.tiered.admin.Carrier': 'shipping.modules.tiered.models.Carrier',
              'shipping.modules.tiered.admin.CarrierTranslation': 'shipping.modules.tiered.models.CarrierTranslation',
              'shipping.modules.tiered.admin.ShippingTier': 'shipping.modules.tiered.models.ShippingTier',
              'shipping.modules.tiered.admin._': 'django.utils.translation.ugettext_lazy',
              'shipping.modules.tiered.admin.admin': 'django.contrib.admin',
              'shipping.modules.tiered.admin.get_language': 'django.utils.translation.get_language',
              'shipping.modules.tiered.config.*': 'livesettings.*',
              'shipping.modules.tiered.config.SHIPPING_ACTIVE': 'shipping.config.SHIPPING_ACTIVE',
              'shipping.modules.tiered.config._': 'django.utils.translation.ugettext_lazy',
              'shipping.modules.tiered.config.logging': 'logging',
              'shipping.modules.tiered.load_once': 'satchmo_utils.load_once',
              'shipping.modules.tiered.models.BaseShipper': 'shipping.modules.base.BaseShipper',
              'shipping.modules.tiered.models.Decimal': 'decimal.Decimal',
              'shipping.modules.tiered.models._': 'django.utils.translation.ugettext_lazy',
              'shipping.modules.tiered.models.config': 'shipping.modules.tiered.config',
              'shipping.modules.tiered.models.datetime': 'datetime',
              'shipping.modules.tiered.models.get_language': 'django.utils.translation.get_language',
              'shipping.modules.tiered.models.logging': 'logging',
              'shipping.modules.tiered.models.models': 'django.db.models',
              'shipping.modules.tiered.models.operator': 'operator',
              'shipping.modules.tiered.models.settings': 'django.conf.settings',
              'shipping.modules.tiered.templatetags.tiered_tags.Carrier': 'shipping.modules.tiered.models.Carrier',
              'shipping.modules.tiered.templatetags.tiered_tags.Decimal': 'decimal.Decimal',
              'shipping.modules.tiered.templatetags.tiered_tags.get_filter_args': 'satchmo_utils.templatetags.get_filter_args',
              'shipping.modules.tiered.templatetags.tiered_tags.mark_safe': 'django.utils.safestring.mark_safe',
              'shipping.modules.tiered.templatetags.tiered_tags.moneyfmt': 'l10n.utils.moneyfmt',
              'shipping.modules.tiered.templatetags.tiered_tags.template': 'django.template',
              'shipping.modules.tiered.tests.Carrier': 'shipping.modules.tiered.models.Carrier',
              'shipping.modules.tiered.tests.Decimal': 'decimal.Decimal',
              'shipping.modules.tiered.tests.Shipper': 'shipping.modules.tiered.models.Shipper',
              'shipping.modules.tiered.tests.ShippingTier': 'shipping.modules.tiered.models.ShippingTier',
              'shipping.modules.tiered.tests.TestCase': 'django.test.TestCase',
              'shipping.modules.tiered.tests.datetime': 'datetime.datetime',
              'shipping.modules.tieredquantity.Carrier': 'shipping.modules.tieredquantity.models.Carrier',
              'shipping.modules.tieredquantity.Shipper': 'shipping.modules.tieredquantity.models.Shipper',
              'shipping.modules.tieredquantity.admin.Carrier': 'shipping.modules.tieredquantity.models.Carrier',
              'shipping.modules.tieredquantity.admin.CarrierTranslation': 'shipping.modules.tieredquantity.models.CarrierTranslation',
              'shipping.modules.tieredquantity.admin.QuantityTier': 'shipping.modules.tieredquantity.models.QuantityTier',
              'shipping.modules.tieredquantity.admin._': 'django.utils.translation.ugettext_lazy',
              'shipping.modules.tieredquantity.admin.admin': 'django.contrib.admin',
              'shipping.modules.tieredquantity.admin.get_language': 'django.utils.translation.get_language',
              'shipping.modules.tieredquantity.config.SHIPPING_ACTIVE': 'shipping.config.SHIPPING_ACTIVE',
              'shipping.modules.tieredquantity.config._': 'django.utils.translation.ugettext_lazy',
              'shipping.modules.tieredquantity.models.BaseShipper': 'shipping.modules.base.BaseShipper',
              'shipping.modules.tieredquantity.models.Decimal': 'decimal.Decimal',
              'shipping.modules.tieredquantity.models._': 'django.utils.translation.ugettext_lazy',
              'shipping.modules.tieredquantity.models.config': 'shipping.modules.tieredquantity.config',
              'shipping.modules.tieredquantity.models.datetime': 'datetime',
              'shipping.modules.tieredquantity.models.get_language': 'django.utils.translation.get_language',
              'shipping.modules.tieredquantity.models.logging': 'logging',
              'shipping.modules.tieredquantity.models.models': 'django.db.models',
              'shipping.modules.tieredquantity.models.operator': 'operator',
              'shipping.modules.tieredquantity.models.settings': 'django.conf.settings',
              'shipping.modules.tieredquantity.tests.Carrier': 'shipping.modules.tieredquantity.models.Carrier',
              'shipping.modules.tieredquantity.tests.Decimal': 'decimal.Decimal',
              'shipping.modules.tieredquantity.tests.QuantityTier': 'shipping.modules.tieredquantity.models.QuantityTier',
              'shipping.modules.tieredquantity.tests.Shipper': 'shipping.modules.tieredquantity.models.Shipper',
              'shipping.modules.tieredquantity.tests.TestCase': 'django.test.TestCase',
              'shipping.modules.tieredquantity.tests.datetime': 'datetime.datetime',
              'shipping.modules.tieredweight.Carrier': 'shipping.modules.tieredweight.models.Carrier',
              'shipping.modules.tieredweight.Shipper': 'shipping.modules.tieredweight.models.Shipper',
              'shipping.modules.tieredweight.admin.Carrier': 'shipping.modules.tieredweight.models.Carrier',
              'shipping.modules.tieredweight.admin.CarrierAdminForm': 'shipping.modules.tieredweight.forms.CarrierAdminForm',
              'shipping.modules.tieredweight.admin.WeightTier': 'shipping.modules.tieredweight.models.WeightTier',
              'shipping.modules.tieredweight.admin.Zone': 'shipping.modules.tieredweight.models.Zone',
              'shipping.modules.tieredweight.admin.ZoneAdminForm': 'shipping.modules.tieredweight.forms.ZoneAdminForm',
              'shipping.modules.tieredweight.admin.ZoneTranslation': 'shipping.modules.tieredweight.models.ZoneTranslation',
              'shipping.modules.tieredweight.admin.admin': 'django.contrib.admin',
              'shipping.modules.tieredweight.config.*': 'livesettings.*',
              'shipping.modules.tieredweight.config.SHIPPING_ACTIVE': 'shipping.config.SHIPPING_ACTIVE',
              'shipping.modules.tieredweight.config._': 'django.utils.translation.ugettext_lazy',
              'shipping.modules.tieredweight.config.logging': 'logging',
              'shipping.modules.tieredweight.forms.Carrier': 'shipping.modules.tieredweight.models.Carrier',
              'shipping.modules.tieredweight.forms.EmptyQuerySet': 'django.db.models.query.EmptyQuerySet',
              'shipping.modules.tieredweight.forms.Zone': 'shipping.modules.tieredweight.models.Zone',
              'shipping.modules.tieredweight.forms.forms': 'django.forms',
              'shipping.modules.tieredweight.load_once': 'satchmo_utils.load_once',
              'shipping.modules.tieredweight.models.BaseShipper': 'shipping.modules.base.BaseShipper',
              'shipping.modules.tieredweight.models.Country': 'l10n.models.Country',
              'shipping.modules.tieredweight.models.Decimal': 'django.utils._decimal.Decimal',
              'shipping.modules.tieredweight.models._': 'django.utils.translation.ugettext_lazy',
              'shipping.modules.tieredweight.models.config': 'shipping.modules.tieredweight.config',
              'shipping.modules.tieredweight.models.date': 'datetime.date',
              'shipping.modules.tieredweight.models.get_language': 'django.utils.translation.get_language',
              'shipping.modules.tieredweight.models.logging': 'logging',
              'shipping.modules.tieredweight.models.models': 'django.db.models',
              'shipping.modules.tieredweight.models.settings': 'django.conf.settings',
              'shipping.modules.tieredweight.tests.Carrier': 'shipping.modules.tieredweight.models.Carrier',
              'shipping.modules.tieredweight.tests.Country': 'l10n.models.Country',
              'shipping.modules.tieredweight.tests.Decimal': 'django.utils._decimal.Decimal',
              'shipping.modules.tieredweight.tests.TestCase': 'django.test.TestCase',
              'shipping.modules.tieredweight.tests.TieredWeightException': 'shipping.modules.tieredweight.models.TieredWeightException',
              'shipping.modules.tieredweight.tests.datetime': 'datetime.datetime',
              'shipping.modules.ups.config.*': 'livesettings.*',
              'shipping.modules.ups.config._': 'django.utils.translation.ugettext_lazy',
              'shipping.modules.ups.config_choice_values': 'livesettings.config_choice_values',
              'shipping.modules.ups.shipper': 'shipping.modules.ups.shipper',
              'shipping.modules.ups.shipper.BaseShipper': 'shipping.modules.base.BaseShipper',
              'shipping.modules.ups.shipper.Config': 'satchmo_store.shop.models.Config',
              'shipping.modules.ups.shipper.Context': 'django.template.Context',
              'shipping.modules.ups.shipper.Decimal': 'decimal.Decimal',
              'shipping.modules.ups.shipper._': 'django.utils.translation.ugettext',
              'shipping.modules.ups.shipper.cache': 'django.core.cache.cache',
              'shipping.modules.ups.shipper.config_get_group': 'livesettings.config_get_group',
              'shipping.modules.ups.shipper.config_value': 'livesettings.config_value',
              'shipping.modules.ups.shipper.fromstring': 'elementtree.ElementTree.fromstring',
              'shipping.modules.ups.shipper.loader': 'django.template.loader',
              'shipping.modules.ups.shipper.logging': 'logging',
              'shipping.modules.ups.shipper.signals': 'shipping.signals',
              'shipping.modules.ups.shipper.tostring': 'elementtree.ElementTree.tostring',
              'shipping.modules.ups.shipper.urllib2': 'urllib2',
              'shipping.modules.usps.config.*': 'livesettings.*',
              'shipping.modules.usps.config.Decimal': 'decimal.Decimal',
              'shipping.modules.usps.config._': 'django.utils.translation.ugettext_lazy',
              'shipping.modules.usps.config_choice_values': 'livesettings.config_choice_values',
              'shipping.modules.usps.shipper': 'shipping.modules.usps.shipper',
              'shipping.modules.usps.shipper.BaseShipper': 'shipping.modules.base.BaseShipper',
              'shipping.modules.usps.shipper.Config': 'satchmo_store.shop.models.Config',
              'shipping.modules.usps.shipper.Context': 'django.template.Context',
              'shipping.modules.usps.shipper.Country': 'l10n.models.Country',
              'shipping.modules.usps.shipper.Decimal': 'decimal.Decimal',
              'shipping.modules.usps.shipper._': 'django.utils.translation.ugettext',
              'shipping.modules.usps.shipper.cache': 'django.core.cache.cache',
              'shipping.modules.usps.shipper.config_get_group': 'livesettings.config_get_group',
              'shipping.modules.usps.shipper.config_value': 'livesettings.config_value',
              'shipping.modules.usps.shipper.fromstring': 'elementtree.ElementTree.fromstring',
              'shipping.modules.usps.shipper.loader': 'django.template.loader',
              'shipping.modules.usps.shipper.logging': 'logging',
              'shipping.modules.usps.shipper.tostring': 'elementtree.ElementTree.tostring',
              'shipping.modules.usps.shipper.urllib2': 'urllib2',
              'shipping.signals.django.dispatch': 'django.dispatch',
              'shipping.tests.*': 'satchmo_store.shop.models.*',
              'shipping.tests.Decimal': 'decimal.Decimal',
              'shipping.tests.Site': 'django.contrib.sites.models.Site',
              'shipping.tests.TestCase': 'django.test.TestCase',
              'shipping.tests.config_value': 'livesettings.config_value',
              'shipping.tests.flat': 'shipping.modules.flat.shipper.Shipper',
              'shipping.tests.keyedcache': 'keyedcache',
              'shipping.tests.models': 'django.db.models',
              'shipping.tests.per': 'shipping.modules.per.shipper.Shipper',
              'shipping.urls.*': 'django.conf.urls.defaults.*',
              'shipping.utils.Decimal': 'decimal.Decimal',
              'shipping.utils.shipping_method_by_key': 'shipping.config.shipping_method_by_key',
              'shipping.views.Config': 'satchmo_store.shop.models.Config',
              'shipping.views.Context': 'django.template.Context',
              'shipping.views.HttpResponse': 'django.http.HttpResponse',
              'shipping.views.HttpResponseRedirect': 'django.http.HttpResponseRedirect',
              'shipping.views.Order': 'satchmo_store.shop.models.Order',
              'shipping.views.config_value': 'livesettings.config_value',
              'shipping.views.get_object_or_404': 'django.shortcuts.get_object_or_404',
              'shipping.views.loader': 'django.template.loader',
              'shipping.views.never_cache': 'django.views.decorators.cache.never_cache',
              'shipping.views.os': 'os',
              'shipping.views.settings': 'django.conf.settings',
              'shipping.views.smart_str': 'django.utils.encoding.smart_str',
              'shipping.views.staff_member_required': 'django.contrib.admin.views.decorators.staff_member_required',
              'shipping.views.trml2pdf': 'trml2pdf',
              'shipping.views.urllib': 'urllib',
              'tax.config.*': 'livesettings.*',
              'tax.config._': 'django.utils.translation.ugettext_lazy',
              'tax.config.get_satchmo_setting': 'satchmo_store.shop.get_satchmo_setting',
              'tax.config.is_string_like': 'satchmo_utils.is_string_like',
              'tax.config.load_module': 'satchmo_utils.load_module',
              'tax.config.settings': 'django.conf.settings',
              'tax.models.config': 'tax.config',
              'tax.modules.area.admin.TaxRate': 'tax.modules.area.models.TaxRate',
              'tax.modules.area.admin.ValidationError': 'django.forms.ValidationError',
              'tax.modules.area.admin._': 'django.utils.translation.ugettext_lazy',
              'tax.modules.area.admin.admin': 'django.contrib.admin',
              'tax.modules.area.admin.get_language': 'django.utils.translation.get_language',
              'tax.modules.area.admin.models': 'django.forms.models',
              'tax.modules.area.config.*': 'livesettings.*',
              'tax.modules.area.config.DatabaseError': 'django.db.DatabaseError',
              'tax.modules.area.config.TAX_MODULE': 'tax.config.TAX_MODULE',
              'tax.modules.area.config._': 'django.utils.translation.ugettext_lazy',
              'tax.modules.area.config.transaction': 'django.db.transaction',
              'tax.modules.area.models.AdminArea': 'l10n.models.AdminArea',
              'tax.modules.area.models.Country': 'l10n.models.Country',
              'tax.modules.area.models.TaxClass': 'product.models.TaxClass',
              'tax.modules.area.models._': 'django.utils.translation.ugettext_lazy',
              'tax.modules.area.models.config': 'tax.modules.area.config',
              'tax.modules.area.models.models': 'django.db.models',
              'tax.modules.area.models.ugettext': 'django.utils.translation.ugettext',
              'tax.modules.area.processor.AdminArea': 'l10n.models.AdminArea',
              'tax.modules.area.processor.Config': 'satchmo_store.shop.models.Config',
              'tax.modules.area.processor.Contact': 'satchmo_store.contact.models.Contact',
              'tax.modules.area.processor.Country': 'l10n.models.Country',
              'tax.modules.area.processor.Decimal': 'decimal.Decimal',
              'tax.modules.area.processor.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'tax.modules.area.processor.Q': 'django.db.models.Q',
              'tax.modules.area.processor.TaxClass': 'product.models.TaxClass',
              'tax.modules.area.processor.TaxRate': 'tax.modules.area.models.TaxRate',
              'tax.modules.area.processor.config_value': 'livesettings.config_value',
              'tax.modules.area.processor.is_string_like': 'satchmo_utils.is_string_like',
              'tax.modules.area.processor.logging': 'logging',
              'tax.modules.no.processor.Decimal': 'decimal.Decimal',
              'tax.modules.percent.config.*': 'livesettings.*',
              'tax.modules.percent.config.TAX_MODULE': 'tax.config.TAX_MODULE',
              'tax.modules.percent.config._': 'django.utils.translation.ugettext_lazy',
              'tax.modules.percent.models.config': 'tax.modules.percent.config',
              'tax.modules.percent.processor.Decimal': 'decimal.Decimal',
              'tax.modules.percent.processor.config_value': 'livesettings.config_value',
              'tax.modules.us_sst.admin.TaxBoundry': 'tax.modules.us_sst.models.TaxBoundry',
              'tax.modules.us_sst.admin.TaxRate': 'tax.modules.us_sst.models.TaxRate',
              'tax.modules.us_sst.admin.Taxable': 'tax.modules.us_sst.models.Taxable',
              'tax.modules.us_sst.admin.ValidationError': 'django.forms.ValidationError',
              'tax.modules.us_sst.admin._': 'django.utils.translation.ugettext_lazy',
              'tax.modules.us_sst.admin.admin': 'django.contrib.admin',
              'tax.modules.us_sst.admin.get_language': 'django.utils.translation.get_language',
              'tax.modules.us_sst.admin.models': 'django.forms.models',
              'tax.modules.us_sst.config.*': 'livesettings.*',
              'tax.modules.us_sst.config._': 'django.utils.translation.ugettext_lazy',
              'tax.modules.us_sst.management.commands.sst_import_boundry.BaseCommand': 'django.core.management.base.BaseCommand',
              'tax.modules.us_sst.management.commands.sst_import_boundry.Decimal': 'decimal.Decimal',
              'tax.modules.us_sst.management.commands.sst_import_boundry.TaxBoundry': 'tax.modules.us_sst.models.TaxBoundry',
              'tax.modules.us_sst.management.commands.sst_import_boundry.TaxRate': 'tax.modules.us_sst.models.TaxRate',
              'tax.modules.us_sst.management.commands.sst_import_boundry.date': 'datetime.date',
              'tax.modules.us_sst.management.commands.sst_import_boundry.os': 'os',
              'tax.modules.us_sst.management.commands.sst_import_boundry.tax.config': 'tax.config',
              'tax.modules.us_sst.management.commands.sst_import_rate.BaseCommand': 'django.core.management.base.BaseCommand',
              'tax.modules.us_sst.management.commands.sst_import_rate.Decimal': 'decimal.Decimal',
              'tax.modules.us_sst.management.commands.sst_import_rate.TaxRate': 'tax.modules.us_sst.models.TaxRate',
              'tax.modules.us_sst.management.commands.sst_import_rate.date': 'datetime.date',
              'tax.modules.us_sst.management.commands.sst_import_rate.os': 'os',
              'tax.modules.us_sst.models.AdminArea': 'l10n.models.AdminArea',
              'tax.modules.us_sst.models.Country': 'l10n.models.Country',
              'tax.modules.us_sst.models.Decimal': 'django.utils._decimal.Decimal',
              'tax.modules.us_sst.models.TaxClass': 'product.models.TaxClass',
              'tax.modules.us_sst.models._': 'django.utils.translation.ugettext_lazy',
              'tax.modules.us_sst.models._date': 'datetime.date',
              'tax.modules.us_sst.models.config': 'tax.modules.us_sst.config',
              'tax.modules.us_sst.models.models': 'django.db.models',
              'tax.modules.us_sst.models.ugettext': 'django.utils.translation.ugettext',
              'tax.modules.us_sst.tax.AdminArea': 'l10n.models.AdminArea',
              'tax.modules.us_sst.tax.Config': 'satchmo_store.shop.models.Config',
              'tax.modules.us_sst.tax.Contact': 'satchmo_store.contact.models.Contact',
              'tax.modules.us_sst.tax.Country': 'l10n.models.Country',
              'tax.modules.us_sst.tax.Decimal': 'django.utils._decimal.Decimal',
              'tax.modules.us_sst.tax.ImproperlyConfigured': 'django.core.exceptions.ImproperlyConfigured',
              'tax.modules.us_sst.tax.Q': 'django.db.models.Q',
              'tax.modules.us_sst.tax.TaxBoundry': 'tax.modules.us_sst.models.TaxBoundry',
              'tax.modules.us_sst.tax.TaxClass': 'product.models.TaxClass',
              'tax.modules.us_sst.tax.TaxRate': 'tax.modules.us_sst.models.TaxRate',
              'tax.modules.us_sst.tax.Taxable': 'tax.modules.us_sst.models.Taxable',
              'tax.modules.us_sst.tax.config_value': 'livesettings.config_value',
              'tax.modules.us_sst.tax.datetime': 'datetime',
              'tax.modules.us_sst.tax.is_string_like': 'satchmo_utils.is_string_like',
              'tax.modules.us_sst.tax.logging': 'logging',
              'tax.modules.us_sst.tax.re': 're',
              'tax.templatetags.satchmo_tax.Decimal': 'decimal.Decimal',
              'tax.templatetags.satchmo_tax.get_current_user': 'threaded_multihost.threadlocals.get_current_user',
              'tax.templatetags.satchmo_tax.get_filter_args': 'satchmo_utils.templatetags.get_filter_args',
              'tax.templatetags.satchmo_tax.get_tax_processor': 'tax.utils.get_tax_processor',
              'tax.templatetags.satchmo_tax.get_thread_variable': 'threaded_multihost.threadlocals.get_thread_variable',
              'tax.templatetags.satchmo_tax.logging': 'logging',
              'tax.templatetags.satchmo_tax.moneyfmt': 'l10n.utils.moneyfmt',
              'tax.templatetags.satchmo_tax.set_thread_variable': 'threaded_multihost.threadlocals.set_thread_variable',
              'tax.templatetags.satchmo_tax.template': 'django.template',
              'tax.tests.*': 'tax.models.*',
              'tax.tests.AddressBook': 'satchmo_store.contact.models.AddressBook',
              'tax.tests.Contact': 'satchmo_store.contact.models.Contact',
              'tax.tests.Decimal': 'decimal.Decimal',
              'tax.tests.Order': 'satchmo_store.shop.models.Order',
              'tax.tests.OrderItem': 'satchmo_store.shop.models.OrderItem',
              'tax.tests.OrderPayment': 'satchmo_store.shop.models.OrderPayment',
              'tax.tests.Product': 'product.models.Product',
              'tax.tests.TestCase': 'django.test.TestCase',
              'tax.tests.cache_delete': 'keyedcache.cache_delete',
              'tax.tests.config_get': 'livesettings.config_get',
              'tax.tests.datetime': 'datetime',
              'tax.tests.logging': 'logging',
              'tax.tests.make_order_payment': 'satchmo_store.shop.tests.make_order_payment',
              'tax.tests.make_test_order': 'satchmo_store.shop.tests.make_test_order',
              'tax.utils.config_value': 'livesettings.config_value',
              'tax.utils.decimal': 'decimal',
              'tax.utils.load_module': 'satchmo_utils.load_module'}}
